import{_ as r,c as i,o as l,a4 as t}from"./chunks/framework.BQlL4Ck5.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/1.C语言基础/05.流程结构之循环结构和跳转语句.md","filePath":"C++/1.C语言基础/05.流程结构之循环结构和跳转语句.md","lastUpdated":1754871536000}'),e={name:"C++/1.C语言基础/05.流程结构之循环结构和跳转语句.md"};function n(p,o,d,a,c,s){return l(),i("div",null,o[0]||(o[0]=[t('<h3 id="_1-循环结构" tabindex="-1"><strong>1. 循环结构</strong> <a class="header-anchor" href="#_1-循环结构" aria-label="Permalink to &quot;**1. 循环结构**&quot;">​</a></h3><p>循环结构用于在满足条件的情况下重复执行某段代码，直到条件不满足为止。C语言中提供了三种循环结构：<code>while</code>、<code>do...while</code> 和 <code>for</code>。</p><h4 id="_1-1-while-循环" tabindex="-1"><strong>1.1 <code>while</code> 循环</strong> <a class="header-anchor" href="#_1-1-while-循环" aria-label="Permalink to &quot;**1.1 `while` 循环**&quot;">​</a></h4><ul><li><p><strong>语法</strong>：</p><p>while (循环控制条件) {<br>      循环体中的语句;<br>      能够让循环结束的语句;<br>  }</p></li><li><p><strong>执行流程</strong>：</p><ol><li><p>首先判断 <code>循环控制条件</code> 是否为真。</p></li><li><p>如果为真，则执行 <code>循环体</code> 中的语句。</p></li><li><p>执行完 <code>循环体</code> 后，再次判断 <code>循环控制条件</code> 是否为真。</p></li><li><p>重复上述过程，直到 <code>循环控制条件</code> 为假，循环结束。</p></li></ol></li><li><p><strong>示例</strong>：</p><p>int age = 0;<br>  while (age &lt; 18) {<br>      printf(&quot;我今年还没成年\\n&quot;);<br>      age++;<br>  }<br>  printf(&quot;我今年刚满18岁\\n&quot;);</p><ul><li><p>输出：</p><p>我今年还没成年<br>  （重复 18 次）<br>  我今年刚满18岁</p></li></ul></li><li><p><strong>死循环</strong>：</p><ul><li><p>如果 <code>循环控制条件</code> 永远为真，循环将无法结束，形成死循环。</p></li><li><p>示例：</p><p>while (1); // 死循环</p></li></ul></li><li><p><strong>练习</strong>：计算 1 到 n 的和</p><p>#include &lt;stdio.h&gt;<br>  int main() {<br>      int n = 0, sum = 0;<br>      printf(&quot;请输入n: &quot;);<br>      scanf(&quot;%d&quot;, &amp;n);<br>      while (n &gt; 0) {<br>          sum += n;<br>          n--;<br>     }<br>      printf(&quot;和是：%d\\n&quot;, sum);<br>      return 0;<br>  }</p></li></ul><h4 id="_1-2-do-while-循环" tabindex="-1"><strong>1.2 <code>do...while</code> 循环</strong> <a class="header-anchor" href="#_1-2-do-while-循环" aria-label="Permalink to &quot;**1.2 `do...while` 循环**&quot;">​</a></h4><ul><li><p><strong>语法</strong>：</p><p>do {<br>      循环体中的语句;<br>      能够让循环结束的语句;<br>  } while (循环控制条件); // 注意分号</p></li><li><p><strong>执行流程</strong>：</p><ol><li><p>首先执行 <code>循环体</code> 中的语句。</p></li><li><p>执行完 <code>循环体</code> 后，判断 <code>循环控制条件</code> 是否为真。</p></li><li><p>如果为真，则继续执行 <code>循环体</code>；否则循环结束。</p></li></ol></li><li><p><strong>特点</strong>：</p><ul><li><code>do...while</code> 循环至少会执行一次 <code>循环体</code>，即使 <code>循环控制条件</code> 一开始就为假。</li></ul></li><li><p><strong>示例</strong>：</p><p>int age = 0;<br>  do {<br>      printf(&quot;我今年还没成年\\n&quot;);<br>      age++;<br>  } while (age &lt; 18);</p></li><li><p><strong>练习</strong>：获取 1 到 100 之间 7 的倍数的个数</p><p>#include &lt;stdio.h&gt;<br>  int main() {<br>      int n = 0;<br>      while (n &lt;= 100) {<br>          if (0 == (n % 7)) {<br>              printf(&quot;%d\\n&quot;, n);<br>         }<br>          n++;<br>     }<br>      return 0;<br>  }</p></li></ul><h4 id="_1-3-for-循环" tabindex="-1"><strong>1.3 <code>for</code> 循环</strong> <a class="header-anchor" href="#_1-3-for-循环" aria-label="Permalink to &quot;**1.3 `for` 循环**&quot;">​</a></h4><ul><li><p><strong>语法</strong>：</p><p>for (初始化表达式; 循环控制条件; 更新表达式) {<br>      循环体中的语句;<br>  }</p></li><li><p><strong>执行流程</strong>：</p><ol><li><p>执行 <code>初始化表达式</code>。</p></li><li><p>判断 <code>循环控制条件</code> 是否为真。</p></li><li><p>如果为真，则执行 <code>循环体</code> 中的语句。</p></li><li><p>执行完 <code>循环体</code> 后，执行 <code>更新表达式</code>。</p></li><li><p>重复上述过程，直到 <code>循环控制条件</code> 为假，循环结束。</p></li></ol></li><li><p><strong>示例</strong>：</p><p>for (int i = 0; i &lt; 5; i++) {<br>      printf(&quot;%d\\n&quot;, i);<br>  }</p><ul><li><p>输出：</p><p>0<br>  1<br>  2<br>  3<br>  4</p></li></ul></li></ul><hr><h3 id="_2-跳转语句" tabindex="-1"><strong>2. 跳转语句</strong> <a class="header-anchor" href="#_2-跳转语句" aria-label="Permalink to &quot;**2. 跳转语句**&quot;">​</a></h3><p>跳转语句用于改变程序的执行顺序，主要包括 <code>break</code>、<code>continue</code> 和 <code>goto</code>。</p><h4 id="_2-1-break-语句" tabindex="-1"><strong>2.1 <code>break</code> 语句</strong> <a class="header-anchor" href="#_2-1-break-语句" aria-label="Permalink to &quot;**2.1 `break` 语句**&quot;">​</a></h4><ul><li><p><strong>作用</strong>：</p><ul><li>用于立即退出当前循环或 <code>switch</code> 语句。</li></ul></li><li><p><strong>示例</strong>：</p><p>for (int i = 0; i &lt; 10; i++) {<br>      if (i == 5) {<br>          break; // 当 i 等于 5 时退出循环<br>     }<br>      printf(&quot;%d\\n&quot;, i);<br>  }</p><ul><li><p>输出：</p><p>0<br>  1<br>  2<br>  3<br>  4</p></li></ul></li></ul><h4 id="_2-2-continue-语句" tabindex="-1"><strong>2.2 <code>continue</code> 语句</strong> <a class="header-anchor" href="#_2-2-continue-语句" aria-label="Permalink to &quot;**2.2 `continue` 语句**&quot;">​</a></h4><ul><li><p><strong>作用</strong>：</p><ul><li>用于跳过当前循环的剩余部分，直接进入下一次循环。</li></ul></li><li><p><strong>示例</strong>：</p><p>for (int i = 0; i &lt; 5; i++) {<br>      if (i == 2) {<br>          continue; // 当 i 等于 2 时跳过本次循环<br>     }<br>      printf(&quot;%d\\n&quot;, i);<br>  }</p><ul><li><p>输出：</p><p>0<br>  1<br>  3<br>  4</p></li></ul></li></ul><h4 id="_2-3-goto-语句" tabindex="-1"><strong>2.3 <code>goto</code> 语句</strong> <a class="header-anchor" href="#_2-3-goto-语句" aria-label="Permalink to &quot;**2.3 `goto` 语句**&quot;">​</a></h4><ul><li><p><strong>作用</strong>：</p><ul><li>用于无条件跳转到程序中的某个标签处。</li></ul></li><li><p><strong>注意</strong>：</p><ul><li>过度使用 <code>goto</code> 会降低代码的可读性，应尽量避免。</li></ul></li><li><p><strong>示例</strong>：</p><p>int i = 0;<br>  start:<br>  printf(&quot;%d\\n&quot;, i);<br>  i++;<br>  if (i &lt; 5) {<br>      goto start; // 跳转到 start 标签处<br>  }</p><ul><li><p>输出：</p><p>0<br>  1<br>  2<br>  3<br>  4</p></li></ul></li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ol><li><p><strong>循环结构</strong>：</p><ul><li><p><code>while</code>：先判断条件，再执行循环体。</p></li><li><p><code>do...while</code>：先执行循环体，再判断条件。</p></li><li><p><code>for</code>：适合已知循环次数的场景。</p></li></ul></li><li><p><strong>跳转语句</strong>：</p><ul><li><p><code>break</code>：退出当前循环或 <code>switch</code> 语句。</p></li><li><p><code>continue</code>：跳过当前循环，进入下一次循环。</p></li><li><p><code>goto</code>：无条件跳转到标签处。</p></li></ul></li></ol>',20)]))}const g=r(e,[["render",n]]);export{u as __pageData,g as default};
