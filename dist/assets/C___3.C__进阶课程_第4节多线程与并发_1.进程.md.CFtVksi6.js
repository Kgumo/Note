import{_ as l,C as e,c as h,o as i,a3 as a,b as p,w as n,a as r,G as k,a4 as d}from"./chunks/framework.C3IOjdSt.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/3.C++进阶课程/第4节多线程与并发/1.进程.md","filePath":"C++/3.C++进阶课程/第4节多线程与并发/1.进程.md","lastUpdated":1754900608000}'),o={name:"C++/3.C++进阶课程/第4节多线程与并发/1.进程.md"};function g(E,s,c,b,u,y){const t=e("Mermaid");return i(),h("div",null,[s[1]||(s[1]=a(`<h3 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h3><p><strong>程序</strong>: 数据结构+算法</p><ul><li><strong>数据结构</strong>: 表示思维对象抽象概念的物理表现</li><li><strong>指令操作</strong>: 对数据进行处理的规则</li><li><strong>计算</strong>: 对有限数据集实施以解决问题的有限指令集合<br> 程序是数据和指令的集合，执行过程即计算。</li></ul><hr><h4 id="程序的执行方式" tabindex="-1">程序的执行方式 <a class="header-anchor" href="#程序的执行方式" aria-label="Permalink to &quot;程序的执行方式&quot;">​</a></h4><h5 id="顺序方式" tabindex="-1">顺序方式 <a class="header-anchor" href="#顺序方式" aria-label="Permalink to &quot;顺序方式&quot;">​</a></h5><ul><li>完全执行完一个程序才能执行下一个</li><li><strong>示例</strong>: 游戏大厅选完角色后才能进入游戏界面</li><li><strong>缺陷</strong>: CPU利用率低</li></ul><h5 id="并发执行" tabindex="-1">并发执行 <a class="header-anchor" href="#并发执行" aria-label="Permalink to &quot;并发执行&quot;">​</a></h5><ul><li>将指令执行过程拆分为不同步骤</li><li>不同硬件并行处理不同步骤</li><li><strong>目的</strong>: 提高CPU利用率和系统吞吐量</li></ul><hr><h4 id="进程定义" tabindex="-1">进程定义 <a class="header-anchor" href="#进程定义" aria-label="Permalink to &quot;进程定义&quot;">​</a></h4><p>进程是具有独立功能的程序在数据集合上的一次运行活动。<br><strong>示例</strong>:</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    std::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sum = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> std::endl;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>执行 <code>./a.out</code> 即启动一个进程。</p><hr><h4 id="进程与程序的区别" tabindex="-1">进程与程序的区别 <a class="header-anchor" href="#进程与程序的区别" aria-label="Permalink to &quot;进程与程序的区别&quot;">​</a></h4><table tabindex="0"><thead><tr><th><strong>程序</strong></th><th><strong>进程</strong></th></tr></thead><tbody><tr><td>静态概念（指令集合）</td><td>动态概念（活动实体）</td></tr><tr><td>存储在文件系统中</td><td>运行时创建和消亡</td></tr><tr><td>一个程序可对应多个进程</td><td>一次程序执行对应一个进程</td></tr><tr><td>-</td><td>竞争系统资源的基本单位</td></tr><tr><td><strong>类比</strong>: &quot;菜谱&quot;（程序）与 &quot;按菜谱炒菜&quot;（进程）。</td><td></td></tr></tbody></table><hr><h4 id="进程状态" tabindex="-1">进程状态 <a class="header-anchor" href="#进程状态" aria-label="Permalink to &quot;进程状态&quot;">​</a></h4><p>操作系统将进程执行分为多个阶段：</p><ol><li><strong>创建态</strong>: <ul><li>创建空白PCB（<code>struct task_struct</code>）</li><li>包含进程状态、ID、空间地址、文件表项等</li></ul></li><li><strong>就绪态</strong>: <ul><li>准备工作完成，等待CPU调度</li></ul></li><li><strong>运行态</strong>: <ul><li>CPU正在执行进程指令</li></ul></li><li><strong>阻塞态</strong>: <ul><li>等待外部事件（如I/O完成）</li></ul></li><li><strong>消亡态</strong>: <ul><li>释放PCB资源</li></ul></li></ol><p><strong>状态转换关系</strong>:</p>`,22)),(i(),p(d,null,{default:n(()=>[k(t,{id:"mermaid-213",class:"mermaid",graph:"graph%20LR%20%20%0A%20%20%E5%88%9B%E5%BB%BA%E6%80%81%20--%3E%20%E5%B0%B1%E7%BB%AA%E6%80%81%20%20%0A%20%20%E5%B0%B1%E7%BB%AA%E6%80%81%20--%3E%20%E8%BF%90%E8%A1%8C%E6%80%81%20%20%0A%20%20%E8%BF%90%E8%A1%8C%E6%80%81%20--%3E%20%E5%B0%B1%E7%BB%AA%E6%80%81%20%20%0A%20%20%E8%BF%90%E8%A1%8C%E6%80%81%20--%3E%20%E9%98%BB%E5%A1%9E%E6%80%81%20%20%0A%20%20%E9%98%BB%E5%A1%9E%E6%80%81%20--%3E%20%E5%B0%B1%E7%BB%AA%E6%80%81%20%20%0A%20%20%E8%BF%90%E8%A1%8C%E6%80%81%20--%3E%20%E6%B6%88%E4%BA%A1%E6%80%81%20%20%0A"})]),fallback:n(()=>s[0]||(s[0]=[r(" Loading... ",-1)])),_:1})),s[2]||(s[2]=a(`<blockquote><p><strong>注意</strong>: 阻塞态需先切回就绪态才能进入运行态。</p></blockquote><hr><h4 id="进程调度策略" tabindex="-1">进程调度策略 <a class="header-anchor" href="#进程调度策略" aria-label="Permalink to &quot;进程调度策略&quot;">​</a></h4><table tabindex="0"><thead><tr><th><strong>调度类型</strong></th><th><strong>策略</strong></th><th><strong>示例系统</strong></th></tr></thead><tbody><tr><td>分时系统</td><td>时间片轮转</td><td>Linux, Windows, macOS</td></tr><tr><td>实时系统</td><td>优先级抢占</td><td>uCOS, FreeRTOS</td></tr></tbody></table><ul><li><strong>时间片轮转</strong>: 每个进程执行固定时长后切换</li><li><strong>优先级抢占</strong>: 高优先级进程可中断低优先级进程</li></ul><hr><h4 id="进程地址空间分布" tabindex="-1">进程地址空间分布 <a class="header-anchor" href="#进程地址空间分布" aria-label="Permalink to &quot;进程地址空间分布&quot;">​</a></h4><p>Linux对进程数据分段管理：</p><table tabindex="0"><thead><tr><th><strong>段</strong></th><th><strong>内容</strong></th><th><strong>属性</strong></th><th><strong>生命周期</strong></th></tr></thead><tbody><tr><td>.text</td><td>代码</td><td>只读、共享</td><td>随进程持续</td></tr><tr><td>.data</td><td>已初始化的全局变量/静态变量</td><td>可读写</td><td>随进程持续</td></tr><tr><td>.bss</td><td>未初始化的全局变量/静态变量</td><td>可读写（初始化为0）</td><td>随进程持续</td></tr><tr><td>.rodata</td><td>只读数据（如字符串常量）</td><td>只读</td><td>随进程持续</td></tr><tr><td>stack</td><td>局部变量</td><td>可读写、自动释放</td><td>随代码块持续</td></tr><tr><td>heap</td><td><code>malloc</code>/<code>calloc</code>动态分配的内存</td><td>可读写、需手动释放</td><td>显式释放或进程结束</td></tr></tbody></table><blockquote><p><strong>关键点</strong>:</p><ul><li><strong>栈空间</strong>: 返回局部变量地址会导致悬空指针</li><li><strong>堆空间</strong>: 需手动释放避免内存泄漏</li></ul></blockquote><hr><h4 id="linux进程api" tabindex="-1">Linux进程API <a class="header-anchor" href="#linux进程api" aria-label="Permalink to &quot;Linux进程API&quot;">​</a></h4><h5 id="创建进程" tabindex="-1">创建进程 <a class="header-anchor" href="#创建进程" aria-label="Permalink to &quot;创建进程&quot;">​</a></h5><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/types.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@描述:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  创建子进程（复制父进程数据/指令/文件描述符等）  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@返回值:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  成功:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    父进程返回子进程ID (&gt;0)  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    子进程返回0  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  失败: 返回-1（errno被设置）  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>注意</strong>:</p><ul><li>父子进程独立运行</li><li>子进程从<code>fork()</code>返回处开始执行</li></ul><h5 id="获取进程id" tabindex="-1">获取进程ID <a class="header-anchor" href="#获取进程id" aria-label="Permalink to &quot;获取进程ID&quot;">​</a></h5><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getpid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 返回当前进程ID  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getppid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 返回父进程ID</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="进程退出" tabindex="-1">进程退出 <a class="header-anchor" href="#进程退出" aria-label="Permalink to &quot;进程退出&quot;">​</a></h5><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdlib.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 正常退出（清理缓冲区）  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 立即退出（不做清理）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong><code>status</code></strong>: 退出码（<code>0</code>表示成功，非<code>0</code>表示错误）</li></ul><h5 id="等待子进程" tabindex="-1">等待子进程 <a class="header-anchor" href="#等待子进程" aria-label="Permalink to &quot;等待子进程&quot;">​</a></h5><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/wait.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wstatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@描述:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  等待任意子进程结束  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@wstatus: 存储子进程退出状态  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@返回值: 成功返回子进程ID，失败返回-1  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> waitpid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wstatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@pid:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &gt;0: 指定进程ID  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -1: 任意子进程  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  0: 同组任意子进程  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;-1: 组ID为|pid|的任意子进程  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@options:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  0: 阻塞等待  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  WNOHANG: 非阻塞  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><hr><h4 id="特殊进程类型" tabindex="-1">特殊进程类型 <a class="header-anchor" href="#特殊进程类型" aria-label="Permalink to &quot;特殊进程类型&quot;">​</a></h4><h5 id="僵尸进程" tabindex="-1">僵尸进程 <a class="header-anchor" href="#僵尸进程" aria-label="Permalink to &quot;僵尸进程&quot;">​</a></h5><ul><li><strong>定义</strong>: 已结束但未被父进程<code>wait()</code>回收的进程</li><li><strong>风险</strong>: 占用进程表项（不占内存/CPU）</li><li><strong>避免</strong>: 父进程必须调用<code>wait()</code>/<code>waitpid()</code></li></ul><h5 id="孤儿进程" tabindex="-1">孤儿进程 <a class="header-anchor" href="#孤儿进程" aria-label="Permalink to &quot;孤儿进程&quot;">​</a></h5><ul><li><strong>定义</strong>: 父进程先于子进程结束</li><li><strong>处理</strong>: 被<code>init</code>进程（PID=1）接管并自动回收</li></ul><h5 id="守护进程" tabindex="-1">守护进程 <a class="header-anchor" href="#守护进程" aria-label="Permalink to &quot;守护进程&quot;">​</a></h5><ul><li><strong>定义</strong>: 后台运行且无控制终端的进程</li><li><strong>用途</strong>: 系统级任务（如网络服务）</li><li><strong>创建步骤</strong>: <ol><li><code>fork()</code>创建子进程，父进程退出</li><li>子进程调用<code>setsid()</code>创建新会话</li><li>更改工作目录（如<code>chdir(&quot;/&quot;)</code>）</li><li>重设文件权限掩码（<code>umask(0)</code>）</li><li>关闭继承的文件描述符</li></ol></li></ul><p><strong>示例代码</strong>:</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdlib.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> daemonize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pid_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EXIT_FAILURE);  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EXIT_SUCCESS);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 父进程退出  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setsid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EXIT_FAILURE);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 创建新会话  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chdir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EXIT_FAILURE);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 更改工作目录  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 守护进程主逻辑  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 执行任务 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><hr><h4 id="关键总结" tabindex="-1">关键总结 <a class="header-anchor" href="#关键总结" aria-label="Permalink to &quot;关键总结&quot;">​</a></h4><table tabindex="0"><thead><tr><th><strong>概念</strong></th><th><strong>核心要点</strong></th></tr></thead><tbody><tr><td><strong>进程 vs 程序</strong></td><td>动态 vs 静态，一次执行 vs 持久存储</td></tr><tr><td><strong>进程状态</strong></td><td>创建→就绪→运行→阻塞→消亡</td></tr><tr><td><strong>地址空间</strong></td><td>分段管理（.text/.data/.bss/stack/heap）</td></tr><tr><td><strong>僵尸进程</strong></td><td>父进程未调用<code>wait()</code>导致残留进程表项</td></tr><tr><td><strong>守护进程</strong></td><td>无终端关联的后台进程，需脱离父进程控制</td></tr></tbody></table><p><strong>作业</strong>: 实现守护进程监控系统任务。</p>`,37))])}const m=l(o,[["render",g]]);export{F as __pageData,m as default};
