import{_ as i,c as a,o as n,a4 as e}from"./chunks/framework.BQlL4Ck5.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/3.C++进阶课程/第3节文件IO/1.系统IO.md","filePath":"C++/3.C++进阶课程/第3节文件IO/1.系统IO.md","lastUpdated":1754871536000}'),l={name:"C++/3.C++进阶课程/第3节文件IO/1.系统IO.md"};function t(p,s,d,h,r,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h3 id="文件系统" tabindex="-1">文件系统 <a class="header-anchor" href="#文件系统" aria-label="Permalink to &quot;文件系统&quot;">​</a></h3><h4 id="裸奔-层次-不带操作系统编程" tabindex="-1">“裸奔”层次：不带操作系统编程 <a class="header-anchor" href="#裸奔-层次-不带操作系统编程" aria-label="Permalink to &quot;“裸奔”层次：不带操作系统编程&quot;">​</a></h4><table tabindex="0"><thead><tr><th>层级</th><th>说明</th></tr></thead><tbody><tr><td>APP</td><td>应用层</td></tr><tr><td>Hardware</td><td>硬件层</td></tr></tbody></table><p><strong>特点</strong>：</p><ul><li>简单粗暴：应用层直接操作硬件（寄存器、IO口等）。</li></ul><p><strong>缺点</strong>：</p><ul><li>开发需理解原理图和硬件细节。</li><li>仅支持单任务运行，无法并发。</li></ul><h4 id="带操作系统的编程" tabindex="-1">带操作系统的编程 <a class="header-anchor" href="#带操作系统的编程" aria-label="Permalink to &quot;带操作系统的编程&quot;">​</a></h4><table tabindex="0"><thead><tr><th>层级</th><th>说明</th></tr></thead><tbody><tr><td>APP</td><td>应用层</td></tr><tr><td>OS</td><td>操作系统</td></tr><tr><td>Hardware</td><td>硬件层</td></tr></tbody></table><p><strong>特点</strong>：</p><ul><li>开发聚焦应用逻辑，无需关心硬件细节。</li><li>支持多任务并发运行。</li></ul><p><strong>缺点</strong>：</p><ul><li>API数量庞大。</li><li>API功能可能不符合特定需求。</li></ul><p><strong>操作系统（OS）定义</strong>：</p><ul><li>直接运行在“裸机”上的基础系统软件，所有应用软件依赖其支持。 <strong>常见操作系统</strong>：</li><li>Windows（x86/xp/win8/win10/win11）</li><li>Linux（Ubuntu/CentOS/RedHat/Kali）</li><li>macOS</li><li>iOS</li><li>Android</li><li>鸿蒙</li><li>Unix</li></ul><p><strong>Linux开发特点</strong>：</p><ul><li>通过调用Linux提供的系统API接口操作硬件或使用系统服务。</li></ul><hr><h3 id="linux文件系统" tabindex="-1">Linux文件系统 <a class="header-anchor" href="#linux文件系统" aria-label="Permalink to &quot;Linux文件系统&quot;">​</a></h3><p><strong>核心理念</strong>：一切皆文件。所有操作通过文件接口实现。</p><h4 id="文件系统组成" tabindex="-1">文件系统组成 <a class="header-anchor" href="#文件系统组成" aria-label="Permalink to &quot;文件系统组成&quot;">​</a></h4><p>文件系统是存储、组织、管理和提供访问文件的一套方式、方法、协议及软件实现。</p><p><strong>文件</strong>：</p><ul><li><strong>文件属性</strong>：由 <code>inode</code>（索引节点）管理，存储文件元数据（权限、大小等）。</li><li><strong>文件内容</strong>：实际存储的数据。</li></ul><h4 id="文件操作过程" tabindex="-1">文件操作过程 <a class="header-anchor" href="#文件操作过程" aria-label="Permalink to &quot;文件操作过程&quot;">​</a></h4><ol><li><strong>硬链接</strong>：通过文件名找到对应 <code>inode</code>。</li><li><strong>内核数据结构</strong>： <ul><li><code>struct inode</code>：描述文件的物理信息（内核创建）。</li><li><code>struct file</code>：描述已打开文件的状态（如文件偏移量）。</li><li>一个文件可被多个应用打开，每个打开操作对应独立的 <code>struct file</code>。</li></ul></li><li><strong>操作流程</strong>：<div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>进程文件表项 → struct file → struct inode → 硬件inode → 文件内容</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h4 id="进程文件表项" tabindex="-1">进程文件表项 <a class="header-anchor" href="#进程文件表项" aria-label="Permalink to &quot;进程文件表项&quot;">​</a></h4><p>每个进程维护一个文件指针数组（<code>struct file* []</code>）。</p><ul><li><strong>文件描述符（fd）</strong>：数组下标，标识打开的文件。 <ul><li><code>open()</code> 返回 fd，后续操作通过 fd 访问文件。</li></ul></li></ul><p><strong>系统IO函数</strong>：</p><ul><li><code>open()</code>, <code>read()</code>, <code>write()</code>, <code>close()</code> 等由操作系统提供的文件操作接口。</li></ul><hr><h3 id="linux系统io操作" tabindex="-1">Linux系统IO操作 <a class="header-anchor" href="#linux系统io操作" aria-label="Permalink to &quot;Linux系统IO操作&quot;">​</a></h3><h4 id="打开文件-open" tabindex="-1">打开文件：<code>open()</code> <a class="header-anchor" href="#打开文件-open" aria-label="Permalink to &quot;打开文件：\`open()\`&quot;">​</a></h4><p><strong>函数原型</strong>：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;fcntl.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 版本1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pathname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 版本2（创建文件时）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pathname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mode_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>参数说明</strong>：</p><ul><li><code>pathname</code>：文件路径（含文件名和扩展名）。</li><li><code>flags</code>：打开方式标志位： <ul><li><code>O_RDONLY</code>：只读</li><li><code>O_WRONLY</code>：只写</li><li><code>O_RDWR</code>：可读可写</li><li><code>O_CREAT</code>：文件不存在时创建（需配合 <code>mode</code> 参数）。</li></ul></li><li><code>mode</code>：文件权限（八进制数，如 <code>0777</code>）。实际权限 = <code>mode &amp; ~umask</code>。</li></ul><p><strong>返回值</strong>：</p><ul><li>成功：文件描述符（<code>fd</code>）。</li><li>失败：<code>-1</code>。</li></ul><h4 id="读取文件-read" tabindex="-1">读取文件：<code>read()</code> <a class="header-anchor" href="#读取文件-read" aria-label="Permalink to &quot;读取文件：\`read()\`&quot;">​</a></h4><p><strong>函数原型</strong>：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ssize_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>参数说明</strong>：</p><ul><li><code>fd</code>：文件描述符（<code>open()</code> 返回）。</li><li><code>buf</code>：存储读取数据的内存地址指针。</li><li><code>count</code>：需读取的字节数。</li></ul><p><strong>返回值</strong>：</p><ul><li>成功：实际读取的字节数。</li><li>失败：<code>-1</code>。</li></ul><h4 id="写入文件-write" tabindex="-1">写入文件：<code>write()</code> <a class="header-anchor" href="#写入文件-write" aria-label="Permalink to &quot;写入文件：\`write()\`&quot;">​</a></h4><p><strong>函数原型</strong>：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ssize_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>参数说明</strong>：</p><ul><li><code>fd</code>：文件描述符。</li><li><code>buf</code>：待写入数据的内存地址指针。</li><li><code>count</code>：需写入的字节数。</li></ul><p><strong>返回值</strong>：</p><ul><li>成功：实际写入的字节数。</li><li>失败：<code>-1</code>。</li></ul><h4 id="移动文件光标-lseek" tabindex="-1">移动文件光标：<code>lseek()</code> <a class="header-anchor" href="#移动文件光标-lseek" aria-label="Permalink to &quot;移动文件光标：\`lseek()\`&quot;">​</a></h4><p><strong>函数原型</strong>：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">off_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lseek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">off_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> whence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>参数说明</strong>：</p><ul><li><code>fd</code>：文件描述符。</li><li><code>offset</code>：偏移字节数（正数向文件尾，负数向文件头）。</li><li><code>whence</code>：基准位置： <ul><li><code>SEEK_SET</code>：文件开头</li><li><code>SEEK_CUR</code>：当前位置</li><li><code>SEEK_END</code>：文件末尾</li></ul></li></ul><p><strong>返回值</strong>：</p><ul><li>成功：实际偏移的字节数。</li><li>失败：<code>-1</code>。</li></ul><blockquote><p><strong>注意</strong>：偏移超出文件末尾形成“空洞”，写入时填充空洞。</p></blockquote><h4 id="关闭文件-close" tabindex="-1">关闭文件：<code>close()</code> <a class="header-anchor" href="#关闭文件-close" aria-label="Permalink to &quot;关闭文件：\`close()\`&quot;">​</a></h4><p><strong>函数原型</strong>：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>参数说明</strong>：</p><ul><li><code>fd</code>：需关闭的文件描述符。</li></ul><p><strong>返回值</strong>：</p><ul><li>成功：<code>0</code>。</li><li>失败：<code>-1</code>。</li></ul><h3 id="文件权限与-umask" tabindex="-1">文件权限与 <code>umask</code> <a class="header-anchor" href="#文件权限与-umask" aria-label="Permalink to &quot;文件权限与 \`umask\`&quot;">​</a></h3><h4 id="权限计算规则" tabindex="-1">权限计算规则 <a class="header-anchor" href="#权限计算规则" aria-label="Permalink to &quot;权限计算规则&quot;">​</a></h4><ul><li>实际权限 = 指定权限 <code>&amp; ~umask</code>。示例：<div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>指定权限：0777</span></span>
<span class="line"><span>umask：0022</span></span>
<span class="line"><span>实际权限：0777 &amp; ~0022 = 0777 &amp; 0755 = 0755</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h4 id="设置-umask" tabindex="-1">设置 <code>umask</code> <a class="header-anchor" href="#设置-umask" aria-label="Permalink to &quot;设置 \`umask\`&quot;">​</a></h4><p><strong>函数原型</strong>：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mode_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> umask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mode_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>参数说明</strong>：</p><ul><li><code>mask</code>：新的权限掩码值。</li></ul><p><strong>返回值</strong>：</p><ul><li>旧的 <code>umask</code> 值。</li></ul><blockquote><p><strong>注意</strong>：代码中的 <code>umask</code> 设置不影响系统全局设定。</p></blockquote><hr><h3 id="作业" tabindex="-1">作业 <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业&quot;">​</a></h3><p>实现文件拷贝功能：将文件A的内容完整复制到文件B（B为空文件）。</p><p><strong>步骤</strong>：</p><ol><li>用 <code>open()</code> 打开源文件（A）和目标文件（B）。</li><li>循环调用 <code>read()</code> 从A读取数据到缓冲区。</li><li>调用 <code>write()</code> 将缓冲区数据写入B。</li><li>用 <code>close()</code> 关闭两个文件。</li></ol><hr><p><strong>总结</strong>：</p><ul><li><strong>系统IO</strong>：Linux通过文件描述符抽象文件操作。</li><li><strong>核心函数</strong>：<code>open</code>、<code>read</code>、<code>write</code>、<code>lseek</code>、<code>close</code> 实现完整文件管理。</li><li><strong>权限控制</strong>：<code>umask</code> 调节文件创建时的实际权限。</li></ul><hr>`,89)]))}const u=i(l,[["render",t]]);export{c as __pageData,u as default};
