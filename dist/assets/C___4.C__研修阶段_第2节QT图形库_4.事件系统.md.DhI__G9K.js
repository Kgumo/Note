import{_ as i,c as a,o as n,a4 as l}from"./chunks/framework.BQlL4Ck5.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/4.C++研修阶段/第2节QT图形库/4.事件系统.md","filePath":"C++/4.C++研修阶段/第2节QT图形库/4.事件系统.md","lastUpdated":1754871536000}'),e={name:"C++/4.C++研修阶段/第2节QT图形库/4.事件系统.md"};function t(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h3 id="事件系统" tabindex="-1">事件系统 <a class="header-anchor" href="#事件系统" aria-label="Permalink to &quot;事件系统&quot;">​</a></h3><p>Qt 事件系统中的所有事件类型都是通过 <code>QEvent</code> 类来管理的，且所有事件类型都继承自 <code>QEvent</code>。Qt 中的事件种类繁多，根据事件的不同用途和触发场景，可以对事件进行分类整理。</p><h4 id="事件系统概述" tabindex="-1">事件系统概述 <a class="header-anchor" href="#事件系统概述" aria-label="Permalink to &quot;事件系统概述&quot;">​</a></h4><ul><li><strong>事件 (Event)</strong>：事件是描述用户输入或其他操作的对象。Qt 提供了多种事件类型，例如： <ul><li>鼠标事件 (<code>QMouseEvent</code>)：描述鼠标的移动、点击、释放等操作。</li><li>键盘事件 (<code>QKeyEvent</code>)：描述键盘的按键按下、释放等操作。</li><li>触摸事件 (<code>QTouchEvent</code>)：描述触摸屏的触摸、移动、释放等操作。</li><li>定时器事件 (<code>QTimerEvent</code>)：描述定时器的计时器事件。</li></ul></li><li><strong>事件循环 (Event Loop)</strong>：Qt 应用程序通过事件循环接收并处理事件。事件循环不断从事件队列中获取事件，并将其分派给相应的对象进行处理。</li><li><strong>事件处理 (Event Handling)</strong>：对象通过事件处理数据来响应事件。每个事件类型都有一个对应的事件处理函数，例如： <ul><li><code>mousePressEvent(QMouseEvent)</code>：处理鼠标按下事件。</li><li><code>keyPressEvent(QKeyEvent)</code>：处理键盘按键按下事件。</li><li><code>touchEvent(QTouchEvent)</code>：处理触摸事件。</li></ul></li><li><strong>事件分发器 (Event Dispatcher)</strong>： <ul><li>事件分发器在 Qt 事件系统中起着关键的协调和调度作用。它维护着事件类型与事件处理器之间的映射关系，当事件发生时，它依据事件的类型在已建立的映射中查找对应的事件处理器，并将事件传递给这些处理器。例如，在一个复杂的图形界面应用中，可能存在多个不同类型的组件对鼠标点击事件感兴趣，事件分发器能够准确地将鼠标点击事件路由到相应组件的事件处理器中。</li></ul></li><li><strong>事件处理器 (Event Handler)</strong>： <ul><li>事件处理器负责对事件进行实际的处理操作。它包含一系列针对不同事件类型的处理方法或函数，这些逻辑定义了接收到特定事件时应采取的具体行动。</li><li>比如在处理鼠标点击事件时，事件处理器可能会获取鼠标点击的位置、点击的按键信息等，然后根据这些信息执行相应的业务逻辑，如在图形界面中更新显示内容、触发特定的计算或数据操作等。</li></ul></li></ul><h4 id="事件传递机制" tabindex="-1">事件传递机制 <a class="header-anchor" href="#事件传递机制" aria-label="Permalink to &quot;事件传递机制&quot;">​</a></h4><ul><li><strong>事件冒泡 (Event Bubbling)</strong>：当事件发生时，事件首先被发送给最顶层的对象，然后逐级向下传递，直到找到能够处理该事件的对象。</li><li><strong>事件捕获 (Event Capturing)</strong>：事件捕获机制与事件冒泡相反，事件首先被发送给最底层的对象，然后逐级向上传递。</li></ul><h4 id="事件处理函数" tabindex="-1">事件处理函数 <a class="header-anchor" href="#事件处理函数" aria-label="Permalink to &quot;事件处理函数&quot;">​</a></h4><ul><li><code>QObject::event(QEvent)</code>：这是所有事件处理函数的基类，它可以处理所有类型的事件。</li><li><code>QWidget::event(QEvent)</code>：这是 <code>QWidget</code> 类的事件处理函数，它可以处理 <code>QWidget</code> 对象的事件。</li><li><strong>其他事件处理函数</strong>：Qt 提供了针对不同事件类型的事件处理函数，例如 <code>mousePressEvent</code>、<code>keyPressEvent</code> 等。</li></ul><hr><h3 id="事件类型" tabindex="-1">事件类型 <a class="header-anchor" href="#事件类型" aria-label="Permalink to &quot;事件类型&quot;">​</a></h3><h4 id="输入事件" tabindex="-1">输入事件 <a class="header-anchor" href="#输入事件" aria-label="Permalink to &quot;输入事件&quot;">​</a></h4><p>与用户输入设备（如鼠标、键盘、触摸等）交互相关的事件。</p><ul><li><strong>QKeyEvent</strong>：键盘事件，处理键盘按键的按下和释放。 <ul><li><code>QEvent::KeyPress</code>：键盘按下。</li><li><code>QEvent::KeyRelease</code>：键盘释放。</li></ul></li><li><strong>QMouseEvent</strong>：鼠标事件，处理鼠标按钮的按下、释放、移动等。 <ul><li><code>QEvent::MouseButtonPress</code>：鼠标按下。</li><li><code>QEvent::MouseButtonRelease</code>：鼠标释放。</li><li><code>QEvent::MouseButtonDblClick</code>：鼠标双击。</li><li><code>QEvent::MouseMove</code>：鼠标移动。</li></ul></li><li><strong>QWheelEvent</strong>：滚轮事件，处理鼠标滚轮滚动。 <ul><li><code>QEvent::Wheel</code>：鼠标滚轮滚动。</li></ul></li><li><strong>QTouchEvent</strong>：触摸事件，处理触摸屏上的多点触摸操作。 <ul><li><code>QEvent::TouchBegin</code>：开始触摸。</li><li><code>QEvent::TouchEnd</code>：触摸结束。</li><li><code>QEvent::TouchUpdate</code>：触摸更新。</li></ul></li><li><strong>QTabletEvent</strong>：绘图板事件，处理在绘图板上操作的事件。 <ul><li><code>QEvent::TabletPress</code>：绘图板笔按下。</li><li><code>QEvent::TabletRelease</code>：绘图板笔释放。</li><li><code>QEvent::TabletMove</code>：绘图板笔移动。</li></ul></li><li><strong>QInputMethodEvent</strong>：输入法事件，处理输入法的输入。 <ul><li><code>QEvent::InputMethod</code>：输入法事件。</li></ul></li></ul><h4 id="窗口事件" tabindex="-1">窗口事件 <a class="header-anchor" href="#窗口事件" aria-label="Permalink to &quot;窗口事件&quot;">​</a></h4><p>与窗口状态、属性和显示相关的事件。</p><ul><li><strong>QResizeEvent</strong>：窗口调整大小事件。 <ul><li><code>QEvent::Resize</code>：窗口大小改变。</li></ul></li><li><strong>QMoveEvent</strong>：窗口移动事件。 <ul><li><code>QEvent::Move</code>：窗口移动。</li></ul></li><li><strong>QCloseEvent</strong>：窗口关闭事件。 <ul><li><code>QEvent::Close</code>：窗口关闭。</li></ul></li><li><strong>QShowEvent</strong>：窗口显示事件。 <ul><li><code>QEvent::Show</code>：窗口显示。</li></ul></li><li><strong>QHideEvent</strong>：窗口隐藏事件。 <ul><li><code>QEvent::Hide</code>：窗口隐藏。</li></ul></li><li><strong>QFocusEvent</strong>：窗口或部件获得或失去焦点。 <ul><li><code>QEvent::FocusIn</code>：获得焦点。</li><li><code>QEvent::FocusOut</code>：失去焦点。</li></ul></li><li><strong>QEnterEvent</strong>：鼠标进入窗口事件。 <ul><li><code>QEvent::Enter</code>：鼠标进入窗口或部件。</li></ul></li><li><strong>QLeaveEvent</strong>：鼠标离开窗口事件。 <ul><li><code>QEvent::Leave</code>：鼠标离开窗口或部件。</li></ul></li><li><strong>QWindowStateChangeEvent</strong>：窗口状态改变事件。 <ul><li><code>QEvent::WindowStateChange</code>：窗口状态改变（如最小化、最大化）。</li></ul></li></ul><h4 id="定时器事件" tabindex="-1">定时器事件 <a class="header-anchor" href="#定时器事件" aria-label="Permalink to &quot;定时器事件&quot;">​</a></h4><p>处理定时器触发的事件。</p><ul><li><strong>QTimerEvent</strong>：定时器事件。 <ul><li><code>QEvent::Timer</code>：定时器到期。</li></ul></li></ul><h4 id="绘制和更新事件" tabindex="-1">绘制和更新事件 <a class="header-anchor" href="#绘制和更新事件" aria-label="Permalink to &quot;绘制和更新事件&quot;">​</a></h4><p>与窗口或控件的绘制、重绘相关的事件。</p><ul><li><strong>QPaintEvent</strong>：绘制事件，窗口或部件需要重绘时触发。 <ul><li><code>QEvent::Paint</code>：需要绘制。</li></ul></li><li><strong>QUpdateLaterEvent</strong>：更新事件，用于延迟更新。 <ul><li><code>QEvent::UpdateLater</code>：延迟更新事件。</li></ul></li><li><strong>QUpdateRequestEvent</strong>：请求更新事件。 <ul><li><code>QEvent::UpdateRequest</code>：请求更新事件。</li></ul></li></ul><h4 id="拖放事件" tabindex="-1">拖放事件 <a class="header-anchor" href="#拖放事件" aria-label="Permalink to &quot;拖放事件&quot;">​</a></h4><p>与拖放操作相关的事件。</p><ul><li><strong>QDragEnterEvent</strong>：拖动进入事件。 <ul><li><code>QEvent::DragEnter</code>：拖动进入。</li></ul></li><li><strong>QDragMoveEvent</strong>：拖动移动事件。 <ul><li><code>QEvent::DragMove</code>：拖动时鼠标移动。</li></ul></li><li><strong>QDropEvent</strong>：拖动释放事件，处理放下的动作。 <ul><li><code>QEvent::Drop</code>：释放被拖动的内容。</li></ul></li><li><strong>QDragLeaveEvent</strong>：拖动离开事件。 <ul><li><code>QEvent::DragLeave</code>：拖动离开目标区域。</li></ul></li></ul><h4 id="上下文菜单和快捷键事件" tabindex="-1">上下文菜单和快捷键事件 <a class="header-anchor" href="#上下文菜单和快捷键事件" aria-label="Permalink to &quot;上下文菜单和快捷键事件&quot;">​</a></h4><p>处理上下文菜单、快捷键和其他类似操作。</p><ul><li><strong>QContextMenuEvent</strong>：上下文菜单事件，通常是鼠标右键点击触发。 <ul><li><code>QEvent::ContextMenu</code>：上下文菜单触发。</li></ul></li><li><strong>QShortcutEvent</strong>：快捷键事件，处理全局或本地的快捷键操作。 <ul><li><code>QEvent::Shortcut</code>：快捷键按下。</li><li><code>QEvent::ShortcutOverride</code>：快捷键覆盖事件。</li></ul></li></ul><h4 id="系统事件" tabindex="-1">系统事件 <a class="header-anchor" href="#系统事件" aria-label="Permalink to &quot;系统事件&quot;">​</a></h4><p>与系统相关的事件，如设备、平台相关操作。</p><ul><li><strong>QFileOpenEvent</strong>：文件打开事件，通常在双击文件时触发（在 macOS 上常用）。 <ul><li><code>QEvent::FileOpen</code>：文件打开事件。</li></ul></li><li><strong>QPlatformSurfaceEvent</strong>：平台表面事件，处理底层平台表面（surface）创建或销毁的事件。 <ul><li><code>QEvent::PlatformSurface</code>：平台表面事件。</li></ul></li></ul><h4 id="对象事件" tabindex="-1">对象事件 <a class="header-anchor" href="#对象事件" aria-label="Permalink to &quot;对象事件&quot;">​</a></h4><p>与对象状态相关的事件。</p><ul><li><strong>QChildEvent</strong>：子对象事件，处理对象的子对象添加或删除。 <ul><li><code>QEvent::ChildAdded</code>：子对象添加。</li><li><code>QEvent::ChildRemoved</code>：子对象删除。</li></ul></li><li><strong>QEvent::ParentChange</strong>：对象的父对象发生变化时触发。 <ul><li><code>QEvent::ParentChange</code>：父对象改变。</li></ul></li><li><strong>QEvent::ThreadChange</strong>：对象的线程改变时触发。 <ul><li><code>QEvent::ThreadChange</code>：对象从一个线程移到另一个线程。</li></ul></li><li><strong>QEvent::DynamicPropertyChange</strong>：动态属性变化时触发。 <ul><li><code>QEvent::DynamicPropertyChange</code>：动态属性改变。</li></ul></li></ul><h4 id="布局事件" tabindex="-1">布局事件 <a class="header-anchor" href="#布局事件" aria-label="Permalink to &quot;布局事件&quot;">​</a></h4><p>与布局相关的事件，通常是布局管理器处理的事件。</p><ul><li><strong>QEvent::LayoutRequest</strong>：布局请求事件，通常用于请求重新布局。 <ul><li><code>QEvent::LayoutRequest</code>：布局请求。</li></ul></li><li><strong>QEvent::GeometryChange</strong>：几何形状发生变化的事件。 <ul><li><code>QEvent::GeometryChange</code>：几何形状改变。</li></ul></li></ul><h4 id="其他事件" tabindex="-1">其他事件 <a class="header-anchor" href="#其他事件" aria-label="Permalink to &quot;其他事件&quot;">​</a></h4><p>一些不常用或特殊的事件类型。</p><ul><li><strong>QEvent::Quit</strong>：程序退出事件，通常在应用程序关闭时触发。 <ul><li><code>QEvent::Quit</code>：应用程序退出。</li></ul></li><li><strong>QEvent::StyleChange</strong>：样式改变事件，部件的视觉样式发生变化时触发。 <ul><li><code>QEvent::StyleChange</code>：样式改变。</li></ul></li><li><strong>QEvent::LocaleChange</strong>：区域设置变化事件，系统语言或区域发生变化时触发。 <ul><li><code>QEvent::LocaleChange</code>：区域设置变化。</li></ul></li><li><strong>QEvent::LanguageChange</strong>：语言变化事件，通常在多语言应用程序中，语言切换时触发。 <ul><li><code>QEvent::LanguageChange</code>：语言改变。</li></ul></li><li><strong>QEvent::WindowActivate / QEvent::WindowDeactivate</strong>：窗口激活/失活事件。 <ul><li><code>QEvent::WindowActivate</code>：窗口激活。</li><li><code>QEvent::WindowDeactivate</code>：窗口失活。</li></ul></li><li><strong>QEvent::ApplicationActivate / QEvent::ApplicationDeactivate</strong>：应用程序激活/失活事件。 <ul><li><code>QEvent::ApplicationActivate</code>：应用程序激活。</li><li><code>QEvent::ApplicationDeactivate</code>：应用程序失活。</li></ul></li><li><strong>QEvent::Clipboard</strong>：剪贴板事件，处理剪贴板内容的变化。 <ul><li><code>QEvent::Clipboard</code>：剪贴板改变。</li></ul></li></ul><h4 id="自定义事件" tabindex="-1">自定义事件 <a class="header-anchor" href="#自定义事件" aria-label="Permalink to &quot;自定义事件&quot;">​</a></h4><p>用户可以通过继承 <code>QEvent</code> 创建自定义事件。通过 <code>QEvent::registerEventType()</code> 方法可以为自定义事件注册一个唯一的类型。</p><hr><h3 id="信号与槽" tabindex="-1">信号与槽 <a class="header-anchor" href="#信号与槽" aria-label="Permalink to &quot;信号与槽&quot;">​</a></h3><p>在 Qt 框架中，信号与槽（Signals and Slots）机制是一种强大的事件处理方式，它提供了一种类型安全的回调机制，使得不同的对象之间可以进行高效的通信。与传统的回调函数相比，信号与槽机制更加灵活、安全且易于维护。</p><h4 id="信号与槽的基本概念" tabindex="-1">信号与槽的基本概念 <a class="header-anchor" href="#信号与槽的基本概念" aria-label="Permalink to &quot;信号与槽的基本概念&quot;">​</a></h4><p><strong>信号 (Signals)</strong><br> 信号是一种特殊的函数声明，它可以在特定的事件发生时被发射（emitted）。信号可以携带任意数量和类型的参数，用于传递事件相关的信息。<br> 例如，一个按钮被点击时，可以发射一个信号，表示按钮被点击了。信号的声明通常使用关键字 <code>signals</code>，并且只能在类的声明中进行。</p><p><strong>槽 (Slots)</strong><br> 槽是普通的成员函数，可以被连接到一个或多个信号上。当信号被发射时，与之连接的槽函数将被自动调用。<br> 槽函数可以有不同的参数类型和返回值类型，但必须与连接的信号的参数类型相匹配。槽函数可以在任何 Qt 对象中定义，包括自定义的类。</p><h4 id="声明信号和槽" tabindex="-1">声明信号和槽 <a class="header-anchor" href="#声明信号和槽" aria-label="Permalink to &quot;声明信号和槽&quot;">​</a></h4><p>在 Qt 中，信号和槽的声明使用特定的关键字。在类的声明中，使用 <code>signals</code> 关键字声明信号，使用 <code>slots</code> 和普通的成员函数声明槽。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Q_OBJECT  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明信号  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signals:  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mySignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明槽函数  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public slots:  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mySlot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="发射信号" tabindex="-1">发射信号 <a class="header-anchor" href="#发射信号" aria-label="Permalink to &quot;发射信号&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendSignalFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    emit </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello Qt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 发射信号，并传递了参数  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="连接信号和槽" tabindex="-1">连接信号和槽 <a class="header-anchor" href="#连接信号和槽" aria-label="Permalink to &quot;连接信号和槽&quot;">​</a></h4><p>在 Qt 中，可以使用 <code>connect</code> 函数将信号和槽连接起来。连接时，需要指定信号的发送者、信号、槽的接收者和槽函数。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QMetaObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Connection  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QtPrivate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sender, Func1 signal,  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QtPrivate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ContextTypeForFunctor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ContextType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context, Func2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">slot,  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Qt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::ConnectionType type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Qt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::AutoConnection)  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@描述：  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    连接信号与槽的  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@sender:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    信号发送者对象。  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@signal:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    信号函数。  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@context:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    类似于接受者  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@slot:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    槽函数，接收到信号之后的处理函数  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">@type:  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    指定信号和槽之间的连接方式，决定信号发出之后槽函数如何被调用  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    Qt::AutoConnection     会根据信号发送者和接收者是否在同一线程自动选择；  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    Qt::DirectConnection    信号发出之前调用    非阻塞  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    Qt::QueuedConnection    信号发出放入接收的事件队列中等待处理    阻塞  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>使用示例</strong>：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SIGNAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string)), obj2, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SLOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySlot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 完成信号与槽的绑定</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="高级特性" tabindex="-1">高级特性 <a class="header-anchor" href="#高级特性" aria-label="Permalink to &quot;高级特性&quot;">​</a></h4><p><strong>多信号连接到一个槽</strong><br> 多个信号可以连接到一个槽函数。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SIGNAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySignal1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)), obj2, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SLOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySlot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SIGNAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySignal2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(QString)), obj2, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SLOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySlot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>一个信号连接到多个槽</strong><br> 一个信号可以连接到多个不同的槽函数。当信号被发射时，所有连接的槽函数将按照连接的顺序依次被调用。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SIGNAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)), obj2, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SLOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySlot1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SIGNAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)), obj2, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SLOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySlot2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>断开信号和槽的连接</strong><br> 可以使用 <code>disconnect</code> 函数断开信号和槽的连接。断开连接后，当信号被发射时，与之连接的槽函数将不再被调用。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SIGNAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)), obj2, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SLOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mySlot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>自定义信号和槽的参数类型</strong><br> Qt 支持自定义信号和槽的参数类型。可以使用 Qt 的元对象系统来注册自定义的类型，以便在信号和槽中使用。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Q_DECLARE_METATYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyCustomType)  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Q_OBJECT  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signals:  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mySignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyCustomType</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 自定义参数类型的信号  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public slots:  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mySlot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyCustomType</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 自定义参数类型的槽  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><hr><h3 id="作业" tabindex="-1">作业 <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业&quot;">​</a></h3><ul><li>通过对象树模拟文件系统结构。 <ul><li>使用元对象系统，事件系统。</li><li>当增加一个派生类的时候，打印一句话，删除的时候打印一句话。</li></ul></li></ul>`,70)]))}const c=i(e,[["render",t]]);export{E as __pageData,c as default};
