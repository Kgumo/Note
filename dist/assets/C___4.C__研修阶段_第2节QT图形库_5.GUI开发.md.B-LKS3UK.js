import{_ as i,c as a,o as n,a3 as l}from"./chunks/framework.C3IOjdSt.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/4.C++研修阶段/第2节QT图形库/5.GUI开发.md","filePath":"C++/4.C++研修阶段/第2节QT图形库/5.GUI开发.md","lastUpdated":1754900608000}'),p={name:"C++/4.C++研修阶段/第2节QT图形库/5.GUI开发.md"};function e(t,s,h,k,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h3 id="gui与库" tabindex="-1">GUI与库 <a class="header-anchor" href="#gui与库" aria-label="Permalink to &quot;GUI与库&quot;">​</a></h3><p>在Qt应用程序开发中，<code>QCoreApplication</code>和<code>QApplication</code>是两个至关重要的类。它们分别用于创建和管理控制台应用程序和GUI应用程序的事件循环。<code>QCoreApplication</code>提供了所有应用程序都需要的核心功能，而<code>QApplication</code>则继承自<code>QCoreApplication</code>，并扩展了与GUI相关的功能。</p><h4 id="qcoreapplication" tabindex="-1">QCoreApplication <a class="header-anchor" href="#qcoreapplication" aria-label="Permalink to &quot;QCoreApplication&quot;">​</a></h4><p><code>QCoreApplication</code>是一个基础类，用于管理非GUI应用程序的控制流和主要设置。它处理应用程序的初始化和清理工作，提供了事件循环的运行机制，并提供了访问应用程序级别的功能和设置的接口。<br> 事件循环是<code>QCoreApplication</code>的关键机制。是一个永不停歇的循环（通过<code>exec()</code>函数启动），不断地从操作系统获取事件消息。这些事件可以来自多种渠道，如网络模块（当有新的网络连接请求或者数据到达时）、定时器模块（定时器到期）等。<br> 事件循环会维护一个事件队列，新产生的事件会被放入这个队列中，然后按照顺序逐个取出事件并分发给对应的对象进行处理。例如，当一个定时器到期产生<code>QTimerEvent</code>时，事件循环会将这个事件发送给之前关联了该定时器的对象的<code>timerEvent</code>函数进行处理。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    QCoreApplication </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(argc, argv);  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>事件分发流程：<code>QCoreApplication::eventFilter</code> -&gt; 接受者<code>eventFilter</code> -&gt; 接受者<code>event</code> -&gt; 接受者细分<code>event</code> -&gt; 接受者父对象。</p><h4 id="qguiapplication" tabindex="-1">QGuiApplication <a class="header-anchor" href="#qguiapplication" aria-label="Permalink to &quot;QGuiApplication&quot;">​</a></h4><p><code>QGuiApplication</code>是<code>QApplication</code>的基础，提供了一些与图形用户界面相关的基本功能，如处理屏幕信息、字体和输入法等。它适用于那些只需要基本图形界面支持而不需要完整窗口系统功能的应用程序。</p><h4 id="qapplication" tabindex="-1">QApplication <a class="header-anchor" href="#qapplication" aria-label="Permalink to &quot;QApplication&quot;">​</a></h4><p><code>QApplication</code>继承自<code>QGuiApplication</code>，这意味着它继承了<code>QGuiApplication</code>的所有核心功能，如事件循环机制、应用程序初始化和清理逻辑以及部分应用程序级别的功能接口。在构建GUI应用程序时，<code>QApplication</code>首先会调用<code>QGuiApplication</code>的构造函数完成底层的基础设置，为后续的GUI相关操作提供稳固的基础。<br><code>QApplication</code>还处理了与窗口系统相关的一些特定功能，如处理应用程序的命令行参数、设置应用程序的图标和风格、管理应用程序的主窗口等。</p><p><strong>应用场景：</strong></p><ul><li>如果应用程序是无界面的，直接使用<code>QCoreApplication</code>即可。</li><li>如果是GUI相关，但没有使用<code>widgets</code>模块，就使用<code>QGuiApplication</code>。</li><li>否则使用<code>QApplication</code>。</li></ul><hr><h3 id="gui-qwidget" tabindex="-1">GUI-QWidget <a class="header-anchor" href="#gui-qwidget" aria-label="Permalink to &quot;GUI-QWidget&quot;">​</a></h3><p>在Qt中，widget（小部件或控件）是构建图形化界面的核心元素。<code>QWidget</code>作为所有用户界面对象的基类，发挥着至关重要的作用。<br><code>QWidget</code>继承自<code>QObject</code>和<code>QPaintDevice</code>。<code>QObject</code>为其赋予了强大的对象模型特性，包括信号与槽机制。这使得不同的<code>QWidget</code>对象之间能够进行高效且灵活的通信，极大地便利了复杂用户界面和逻辑交互的构建。同时，<code>QObject</code>还负责对对象的内存管理和元对象系统的相关功能。<br> 而继承自<code>QPaintDevice</code>则让<code>QWidget</code>具备了绘图的能力，能够在其界面上进行各种图形和图像的绘制操作。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Q_WIDGETS_EXPORT</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QPaintDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Q_OBJECT  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RenderFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        DrawWindowBackground</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        DrawChildren</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        IgnoreMask</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Q_DECLARE_FLAGS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RenderFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RenderFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public Q_SLOTS:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public Q_SLOTS:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setWindowTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bool </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isActiveWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() const;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public Q_SLOTS:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    virtual void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setVisible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> visible);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hidden);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showMinimized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showMaximized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showFullScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showNormal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bool </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">raise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lower</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stackUnder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(QWidget</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">move</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">move</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> w, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    QLayout *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() const;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    virtual QVariant </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inputMethodQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Qt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::InputMethodQuery) const;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Qt::InputMethodHints </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inputMethodHints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() const;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInputMethodHints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Qt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::InputMethodHints hints);  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">protected Q_SLOTS:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateMicroFocus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">protected:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initializeWindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destroyOldWindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destroyWindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destroySubWindows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    friend class QDataWidgetMapperPrivate;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    virtual bool </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">focusNextPrevChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inline bool </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">focusNextChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> focusNextPrevChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> focusPreviousChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> focusNextPrevChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    QWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QWidgetPrivate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QWidget</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Qt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WindowFlags</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setBackingStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QBackingStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testAttribute_helper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Qt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WidgetAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    QLayout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    friend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QBackingStoreDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    QWidgetData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div><p>这是一个标准的C++语言规范定义下的类，继承于<code>QObject</code>（用于实现底层的信号与槽）和<code>QPaintDevice</code>（用于绘图）。</p><h4 id="qwidget常用函数" tabindex="-1">QWidget常用函数 <a class="header-anchor" href="#qwidget常用函数" aria-label="Permalink to &quot;QWidget常用函数&quot;">​</a></h4><ul><li><strong>设置窗口标题</strong>：<code>void setWindowTitle(const QString &amp;);</code></li><li><strong>获取窗口标题</strong>：<code>QString windowTitle() const;</code></li><li><strong>设置窗口图标</strong>：<code>void setWindowIcon(const QIcon &amp;);</code><ul><li>说明：<code>QIcon</code>是一个Qt中用于表示图标的类，它可以用于在用户界面中显示图标，例如在按钮、菜单项、工具栏等控件上。<code>QIcon</code>可以加载多种格式的图标文件，如PNG、SVG、XPM等，并提供了丰富的接口用于管理和操作图标。</li></ul></li><li><strong>获取窗口图标</strong>：<code>QIcon windowIcon() const;</code></li><li><strong>返回设备类型</strong>：<code>int devType() const override;</code><ul><li>说明：这里的<code>override</code>关键字作用是限制引用其的<code>.cpp</code>文件必须给出其相应的函数体。</li></ul></li><li><strong>判断是否为顶层窗口</strong>：<code>bool isTopLevel() const;</code></li><li><strong>获取x坐标</strong>：<code>int x() const;</code></li><li><strong>获取y坐标</strong>：<code>int y() const;</code></li><li><strong>获取位置</strong>：<code>QPoint pos() const;</code><ul><li>说明：<code>QPoint</code>是Qt中表示二维平面上点的类。它包含了两个整数类型的成员变量，分别表示点的横坐标和纵坐标。</li></ul></li><li><strong>获取大小</strong>：<code>QSize size() const;</code></li><li><strong>获取宽度</strong>：<code>inline int width() const;</code></li><li><strong>获取高度</strong>：<code>inline int height() const;</code></li><li><strong>获取最小大小</strong>：<code>QSize minimumSize() const;</code></li><li><strong>获取最大大小</strong>：<code>QSize maximumSize() const;</code></li><li><strong>设置固定大小</strong>：<code>void setFixedSize(const QSize &amp;);</code></li></ul><h4 id="qwidget的子类" tabindex="-1">QWidget的子类 <a class="header-anchor" href="#qwidget的子类" aria-label="Permalink to &quot;QWidget的子类&quot;">​</a></h4><ul><li><strong>QDialog</strong>：用于实现对话框的类。对话框通常用于与用户进行短期交互，例如获取用户输入、显示消息等。它具有一些默认的行为，比如通常会阻塞父窗口的操作，直到对话框关闭。对话框一般会有默认的按钮（如“确定”、“取消”等），并且其大小通常是固定的或者根据内容自适应。</li><li><strong>QMainWindow</strong>：是一个主窗口类，通常用于构建具有菜单栏、工具栏、状态栏和中心工作区的应用程序主窗口。它提供了一些预设的布局和功能，方便开发者组织和管理界面元素。</li></ul><p>除了直接使用<code>QWidget</code>和<code>QDialog</code>、<code>QMainWindow</code>之外，Qt还提供了许多<code>QWidget</code>的子类，常用的子类包括：</p><ul><li><strong>QPushButton</strong>：按钮控件，用于触发操作或事件。</li><li><strong>QLabel</strong>：标签控件，用于显示文本或图像。</li><li><strong>QLineEdit</strong>：单行文本输入框控件，用于接收用户输入。</li><li><strong>QTextEdit</strong>：多行文本输入框控件，用于接收用户多行输入。</li><li><strong>QSpinBox</strong>：整数微调框控件，用于选择整数值。</li><li><strong>QComboBox</strong>：下拉列表框控件，用于从预定义的选项中选择一个。</li><li><strong>QCheckBox</strong>：复选框控件，用于表示两种状态的选项。</li></ul><p><strong>作业：</strong></p><ul><li>设计后期阶段性项目“聊天软件”的UI。</li><li>把UI设计的好看一些。</li><li>去学习一下CSS样式表。</li></ul>`,25)]))}const c=i(p,[["render",e]]);export{o as __pageData,c as default};
