import{_ as i,c as a,o as n,a3 as l}from"./chunks/framework.C8Xs1bna.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/3.C++进阶课程/第2节数据结构与基本算法/09.二叉树 - 哈夫曼树.md","filePath":"C++/3.C++进阶课程/第2节数据结构与基本算法/09.二叉树 - 哈夫曼树.md","lastUpdated":1754900608000}'),t={name:"C++/3.C++进阶课程/第2节数据结构与基本算法/09.二叉树 - 哈夫曼树.md"};function e(h,s,p,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h3 id="树与二叉树" tabindex="-1">树与二叉树 <a class="header-anchor" href="#树与二叉树" aria-label="Permalink to &quot;树与二叉树&quot;">​</a></h3><h4 id="树的概念" tabindex="-1">树的概念 <a class="header-anchor" href="#树的概念" aria-label="Permalink to &quot;树的概念&quot;">​</a></h4><p>树（tree）是n（n&gt;=0）个结点的有限集。在任意一棵非空树中：</p><ul><li>有且仅有一个特定的结点称为（root）根结点</li><li>当n&gt;1的时候，其余结点可以分为m（m&gt;0）个互不相交的有限集：T₁、T₂、T₃…Tₘ。其中每一个有限集，又可以看成是一棵树，并且称之为根的子树。</li></ul><hr><p><strong>图示：</strong></p><ul><li>根节点 <ul><li>t₁</li><li>t₂</li><li>t₃</li><li>t₄</li></ul></li></ul><hr><p><strong>树结点结构：</strong><br> 树结点包含一个数据元素以及若干个指向其子树的分支（指针）。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 示例代码 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TreeNode  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Element Data;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 数据域  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TreeNode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t3...;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 多子树指针  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 单链表结点  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 树结点定义  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TreeNode  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">childNode_ptr;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 分支结点的集合（链表形式存储子节点下标）  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="创建树示例" tabindex="-1">创建树示例 <a class="header-anchor" href="#创建树示例" aria-label="Permalink to &quot;创建树示例&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一棵树（含10个结点）  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tree </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化数据  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 建立关系：将根结点（t1[0]）的子节点下标存入链表  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].childNode_ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 链表头指针，存储子节点下标 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="结点层次" tabindex="-1">结点层次 <a class="header-anchor" href="#结点层次" aria-label="Permalink to &quot;结点层次&quot;">​</a></h4><ul><li><strong>定义</strong>：从根开始，根结点为<strong>第一层</strong>，根的子结点（孩子）为<strong>第二层</strong>，以此类推。</li><li><strong>树的高度/深度</strong>：树中结点的最大层次。</li></ul><h4 id="结点的度" tabindex="-1">结点的度 <a class="header-anchor" href="#结点的度" aria-label="Permalink to &quot;结点的度&quot;">​</a></h4><ul><li><strong>定义</strong>：结点拥有的子树数量。 <ul><li><strong>叶子结点（终端结点）</strong>：度为0的结点。</li><li><strong>分支结点</strong>：度不为0的结点。</li></ul></li></ul><hr><h3 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h3><h4 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ol><li>每个结点最多有两个子树（不存在度&gt;2的结点）。</li><li>子树分为<strong>左子树</strong>和<strong>右子树</strong>，次序不可颠倒。</li></ol><h4 id="二叉树的五大形态" tabindex="-1">二叉树的五大形态 <a class="header-anchor" href="#二叉树的五大形态" aria-label="Permalink to &quot;二叉树的五大形态&quot;">​</a></h4><ol><li>空二叉树</li><li>只有一个根结点的二叉树</li><li>只有左子树的二叉树</li><li>只有右子树的二叉树</li><li>左右子树均存在的二叉树（完全二叉树）</li></ol><h4 id="二叉树的性质" tabindex="-1">二叉树的性质 <a class="header-anchor" href="#二叉树的性质" aria-label="Permalink to &quot;二叉树的性质&quot;">​</a></h4><ol><li><p><strong>第i层的最大结点数</strong>：至多 (2^{i-1}) 个结点（(i \\geq 1)）。</p><ul><li>第一层：(2^{0} = 1) 个结点</li><li>第二层：(2^{1} = 2) 个结点</li><li>第四层：(2^{3} = 8) 个结点</li></ul></li><li><p><strong>深度为k的二叉树最大结点数</strong>：至多 (2^{k} - 1) 个结点。</p></li><li><p><strong>叶子结点与度为2结点的关系</strong>：</p><ul><li>终端结点（叶子）数 (n_0)，度为2的结点数 (n_2)，满足 (n_0 = n_2 + 1)。</li></ul></li><li><p><strong>满二叉树</strong>：</p><ul><li>深度为 (k) 且有 (2^{k} - 1) 个结点的二叉树（无法在不增加深度的情况下添加新结点）。</li></ul></li><li><p><strong>完全二叉树</strong>：</p><ul><li>除最后一层外为满二叉树，最后一层结点从左至右连续排列。</li><li>对完全二叉树的结点按层次编号（从1到n），编号为 (i) 的结点： <ul><li>左孩子（若存在）：编号 (2i)</li><li>右孩子（若存在）：编号 (2i + 1)</li><li>父结点：编号 (\\lfloor i/2 \\rfloor)（向下取整）</li></ul></li></ul></li><li><p><strong>完全二叉树的深度</strong>：</p><ul><li>具有 (n) 个结点的完全二叉树深度为 (\\lfloor \\log_2 n \\rfloor + 1)（向下取整）。</li><li>示例：(n = 11)，深度为 (\\lfloor \\log_2 11 \\rfloor + 1 = 4)。</li></ul></li></ol><hr><h3 id="二叉树的存储结构" tabindex="-1">二叉树的存储结构 <a class="header-anchor" href="#二叉树的存储结构" aria-label="Permalink to &quot;二叉树的存储结构&quot;">​</a></h3><h4 id="顺序存储结构" tabindex="-1">顺序存储结构 <a class="header-anchor" href="#顺序存储结构" aria-label="Permalink to &quot;顺序存储结构&quot;">​</a></h4><ul><li>使用数组存储，下标关系： <ul><li>根结点：<code>tree[0]</code></li><li>结点 (i) 的左孩子：<code>tree[2*i + 1]</code></li><li>结点 (i) 的右孩子：<code>tree[2*i + 2]</code></li></ul></li></ul><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 根结点  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 根的左孩子（下标2*0+1）  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 根的右孩子（下标2*0+2）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="链式存储结构" tabindex="-1">链式存储结构 <a class="header-anchor" href="#链式存储结构" aria-label="Permalink to &quot;链式存储结构&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ElementType data;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lchild;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 左子节点指针  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rchild;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 右子节点指针  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h3 id="二叉树的遍历" tabindex="-1">二叉树的遍历 <a class="header-anchor" href="#二叉树的遍历" aria-label="Permalink to &quot;二叉树的遍历&quot;">​</a></h3><p><strong>访问</strong>：对结点进行打印、修改或对比操作，每个结点仅访问一次。</p><h4 id="遍历方式" tabindex="-1">遍历方式 <a class="header-anchor" href="#遍历方式" aria-label="Permalink to &quot;遍历方式&quot;">​</a></h4><ol><li><strong>先序遍历</strong>：根 → 左子树 → 右子树（根左右）</li><li><strong>中序遍历</strong>：左子树 → 根 → 右子树（左根右）</li><li><strong>后序遍历</strong>：左子树 → 右子树 → 根（左右根）</li><li><strong>层次遍历</strong>：按层从上到下、从左到右访问。</li></ol><blockquote><p><strong>注意</strong>：遍历时需递归处理非终端结点的子树。</p></blockquote><h4 id="作业示例" tabindex="-1">作业示例 <a class="header-anchor" href="#作业示例" aria-label="Permalink to &quot;作业示例&quot;">​</a></h4><p><strong>给定先序和中序序列，求后序序列</strong>：</p><ol><li><p>先序：<code>11 9 3 5 6 99 32 15</code><br> 中序：<code>3 5 6 9 11 15 32 99</code><br><strong>后序</strong>：<code>6 5 3 9 15 32 99 11</code></p></li><li><p>中序：<code>1 2 3 6 9 15 33 52</code><br> 先序：<code>52 6 1 3 2 9 33 15</code><br><strong>后序</strong>：<code>2 3 1 15 33 9 6 52</code></p></li><li><p>中序：<code>8 13 19 20 21 35 66</code><br> 先序：<code>35 21 13 8 19 20 66</code><br><strong>后序</strong>：<code>8 13 20 19 21 66 35</code></p></li></ol><hr><h3 id="二叉排序树" tabindex="-1">二叉排序树 <a class="header-anchor" href="#二叉排序树" aria-label="Permalink to &quot;二叉排序树&quot;">​</a></h3><h4 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h4><ul><li>对任意结点： <ul><li>左子树所有结点值 &lt; 该结点值</li><li>右子树所有结点值 &gt; 该结点值</li></ul></li><li><strong>注意</strong>：不存在值相等的结点。</li></ul><h4 id="结点插入" tabindex="-1">结点插入 <a class="header-anchor" href="#结点插入" aria-label="Permalink to &quot;结点插入&quot;">​</a></h4><ol><li><strong>空树</strong>：新结点作为根结点。</li><li><strong>非空树</strong>： <ul><li>若新值 &lt; 当前结点值： <ul><li>左子树存在 → 递归比较左子树</li><li>左子树不存在 → 新结点作为左孩子</li></ul></li><li>若新值 &gt; 当前结点值： <ul><li>右子树存在 → 递归比较右子树</li><li>右子树不存在 → 新结点作为右孩子</li></ul></li></ul></li></ol><p><strong>示例插入序列</strong>：<code>11 → 9 → 3 → 5 → 6 → 99 → 32 → 15</code></p><ol><li><code>11</code> 为根</li><li><code>9 &lt; 11</code> → 成为11的左孩子</li><li><code>3 &lt; 11</code> → 递归至左子树 <code>9</code>，<code>3 &lt; 9</code> → 成为9的左孩子</li></ol><h4 id="遍历特性" tabindex="-1">遍历特性 <a class="header-anchor" href="#遍历特性" aria-label="Permalink to &quot;遍历特性&quot;">​</a></h4><ul><li><strong>中序遍历</strong>：输出有序序列（从小到大）。</li></ul><h4 id="结点删除" tabindex="-1">结点删除 <a class="header-anchor" href="#结点删除" aria-label="Permalink to &quot;结点删除&quot;">​</a></h4><ol><li><strong>叶子结点</strong>：直接删除，父结点指针置空。</li><li><strong>只有左子树</strong>： <ul><li>用左子树中最大结点替换被删结点。</li><li>若最大结点非左子树的根 → 调整其父结点指针指向其左孩子。</li></ul></li><li><strong>只有右子树</strong>： <ul><li>用右子树中最小结点替换被删结点。</li><li>若最小结点非右子树的根 → 调整其父结点指针指向其右孩子。</li></ul></li><li><strong>左右子树均存在</strong>： <ul><li>可选左子树最大结点或右子树最小结点替换。</li></ul></li></ol><hr><h3 id="平衡二叉树-avl树" tabindex="-1">平衡二叉树（AVL树） <a class="header-anchor" href="#平衡二叉树-avl树" aria-label="Permalink to &quot;平衡二叉树（AVL树）&quot;">​</a></h3><h4 id="定义-1" tabindex="-1">定义 <a class="header-anchor" href="#定义-1" aria-label="Permalink to &quot;定义&quot;">​</a></h4><ul><li>空树，或满足： <ul><li>左右子树均为平衡二叉树</li><li>左右子树深度差绝对值 (\\leq 1)</li></ul></li><li><strong>平衡因子</strong>：结点左子树深度 (-) 右子树深度（取值范围：(-1, 0, 1)）。</li></ul><h4 id="平衡操作" tabindex="-1">平衡操作 <a class="header-anchor" href="#平衡操作" aria-label="Permalink to &quot;平衡操作&quot;">​</a></h4><ol><li><p><strong>左深左插（LL型）</strong>：</p><ul><li><strong>场景</strong>：左子树的左侧新增结点导致失衡。</li><li><strong>操作</strong>：单向右旋（以失衡结点的左孩子为轴右旋）。<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>失衡结点（6）            旋转后：  </span></span>
<span class="line"><span>   /                     5  </span></span>
<span class="line"><span>  5（IB_left）          / \\  </span></span>
<span class="line"><span> /                     4   6  </span></span>
<span class="line"><span>4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li><li><p><strong>右深右插（RR型）</strong>：</p><ul><li><strong>场景</strong>：右子树的右侧新增结点导致失衡。</li><li><strong>操作</strong>：单向左旋（以失衡结点的右孩子为轴左旋）。<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>失衡结点（6）            旋转后：  </span></span>
<span class="line"><span>   \\                     7  </span></span>
<span class="line"><span>    7（IB_right）       / \\  </span></span>
<span class="line"><span>     \\                 6   8  </span></span>
<span class="line"><span>      8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li><li><p><strong>左深右插（LR型）</strong>：</p><ul><li><strong>场景</strong>：左子树的右侧新增结点导致失衡。</li><li><strong>操作</strong>： <ol><li>先对左子树左旋（转为LL型）</li><li>再整体右旋</li></ol></li></ul></li><li><p><strong>右深左插（RL型）</strong>：</p><ul><li><strong>场景</strong>：右子树的左侧新增结点导致失衡。</li><li><strong>操作</strong>： <ol><li>先对右子树右旋（转为RR型）</li><li>再整体左旋</li></ol></li></ul></li></ol><p><strong>作业</strong>：</p><ul><li>绘制右深右插（RR型）平衡操作示意图。</li><li>实现RR型平衡代码。</li></ul><hr><h3 id="哈夫曼树-最优二叉树" tabindex="-1">哈夫曼树（最优二叉树） <a class="header-anchor" href="#哈夫曼树-最优二叉树" aria-label="Permalink to &quot;哈夫曼树（最优二叉树）&quot;">​</a></h3><h4 id="应用背景" tabindex="-1">应用背景 <a class="header-anchor" href="#应用背景" aria-label="Permalink to &quot;应用背景&quot;">​</a></h4><ul><li>电报通信中字符的二进制编码优化：高频字符短编码，低频字符长编码。</li><li><strong>哈夫曼编码</strong>：以字符频率为权值，构建哈夫曼树，路径左分支标0、右分支标1。</li></ul><h4 id="定义-2" tabindex="-1">定义 <a class="header-anchor" href="#定义-2" aria-label="Permalink to &quot;定义&quot;">​</a></h4><ul><li><strong>带权路径长度（WPL）</strong>：树中所有叶子结点的（路径长度 × 权值）之和。</li><li><strong>最优二叉树</strong>：WPL最小的二叉树。</li></ul><h4 id="构建步骤" tabindex="-1">构建步骤 <a class="header-anchor" href="#构建步骤" aria-label="Permalink to &quot;构建步骤&quot;">​</a></h4><ol><li><strong>构建森林</strong>： <ul><li>将 (n) 个权值 ({w_1, w_2, \\dots, w_n}) 看作 (n) 棵仅含根结点的树，存入优先队列（按权值升序）。</li></ul></li><li><strong>创建新树</strong>： <ul><li>从队列取出权值最小的两棵树 (A, B)。</li><li>创建新结点 (P)，权值 (w_P = w_A + w_B)，(A, B) 分别为 (P) 的左右子树。</li></ul></li><li><strong>加入新树</strong>： <ul><li>将 (P) 加入优先队列。</li></ul></li><li><strong>重复合并</strong>： <ul><li>重复步骤2-3，直至队列只剩一棵树 → 此树为哈夫曼树。</li></ul></li></ol><h4 id="优先队列实现" tabindex="-1">优先队列实现 <a class="header-anchor" href="#优先队列实现" aria-label="Permalink to &quot;优先队列实现&quot;">​</a></h4><ul><li>使用<strong>有序链表</strong>维护结点权值升序排列。</li><li>支持操作：插入（自动排序）、删除最小元素。</li></ul><hr><p><strong>作业</strong>：</p><ol><li>完成未遍历的二叉树后序和层次遍历结果。</li><li>实现二叉排序树的销毁和循环删除结点操作。</li><li>每日完成20道数据结构相关题目（截图提交至学习群）。</li></ol>`,73)]))}const E=i(t,[["render",e]]);export{g as __pageData,E as default};
