import{_ as a,c as t,o as i,a3 as n}from"./chunks/framework.C3IOjdSt.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/2.C++基础课程/1.基础语法和程序结构/02.进制.md","filePath":"C++/2.C++基础课程/1.基础语法和程序结构/02.进制.md","lastUpdated":1754900608000}'),e={name:"C++/2.C++基础课程/1.基础语法和程序结构/02.进制.md"};function l(d,s,p,r,h,o){return i(),t("div",null,s[0]||(s[0]=[n(`<h3 id="_1-进制系统" tabindex="-1"><strong>1. 进制系统</strong> <a class="header-anchor" href="#_1-进制系统" aria-label="Permalink to &quot;**1. 进制系统**&quot;">​</a></h3><h4 id="_1-1-进制表示" tabindex="-1"><strong>1.1 进制表示</strong> <a class="header-anchor" href="#_1-1-进制表示" aria-label="Permalink to &quot;**1.1 进制表示**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>进制</th><th>基数</th><th>前缀</th><th>示例</th></tr></thead><tbody><tr><td>二进制</td><td>2</td><td><code>0b</code></td><td><code>0b101</code></td></tr><tr><td>八进制</td><td>8</td><td><code>0</code></td><td><code>061</code></td></tr><tr><td>十进制</td><td>10</td><td>无</td><td><code>123</code></td></tr><tr><td>十六进制</td><td>16</td><td><code>0x</code></td><td><code>0x45</code></td></tr></tbody></table><ul><li><strong>进制转换</strong>： <ul><li><strong>十进制 → 二进制</strong>： <ul><li>整数：除2取余，逆序排列。</li><li>小数：乘2取整，顺序排列。</li></ul><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>例：13.6 → 1101.1001...</span></span>
<span class="line"><span>  整数部分：13 ÷ 2 = 余1 → 1101（逆序）</span></span>
<span class="line"><span>  小数部分：0.6 × 2 = 取整1 → 0.1001（顺序）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><strong>二进制 → 十进制</strong>： <ul><li>公式：每位值 × 2<sup>位置索引</sup>（索引从0开始）</li></ul><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>例：1100.001 → 12.125</span></span>
<span class="line"><span>  整数：1×2³ + 1×2² + 0×2¹ + 0×2⁰ = 12</span></span>
<span class="line"><span>  小数：0×2⁻¹ + 0×2⁻² + 1×2⁻³ = 0.125</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><hr><h4 id="_1-2-存储单位" tabindex="-1"><strong>1.2 存储单位</strong> <a class="header-anchor" href="#_1-2-存储单位" aria-label="Permalink to &quot;**1.2 存储单位**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>单位</th><th>换算关系</th></tr></thead><tbody><tr><td>位 (bit)</td><td>最小单位（0/1）</td></tr><tr><td>字节 (B)</td><td>1 B = 8 bit</td></tr><tr><td>千字节 (KB)</td><td>1 KB = 1024 B</td></tr><tr><td>兆字节 (MB)</td><td>1 MB = 1024 KB</td></tr></tbody></table><hr><h4 id="_1-3-原码-反码-补码" tabindex="-1"><strong>1.3 原码/反码/补码</strong> <a class="header-anchor" href="#_1-3-原码-反码-补码" aria-label="Permalink to &quot;**1.3 原码/反码/补码**&quot;">​</a></h4><ul><li><strong>正数</strong>：三码相同（<code>12 → 0000...1100</code>）。</li><li><strong>负数</strong>（以 <code>-12</code> 为例）：<div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>原码：1000...1100（符号位1，其余为绝对值）</span></span>
<span class="line"><span>反码：1111...0011（符号位不变，其余取反）</span></span>
<span class="line"><span>补码：1111...0100（反码 + 1）→ 计算机存储格式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><strong>补码意义</strong>：统一加减法运算（减法转为加法）：<div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 - 1 = 1 + (-1) </span></span>
<span class="line"><span>  → 0000...0001（1补码） </span></span>
<span class="line"><span>  + 1111...1111（-1补码） </span></span>
<span class="line"><span>  = 0000...0000（结果0）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><hr><h4 id="_1-4-有符号与无符号数" tabindex="-1"><strong>1.4 有符号与无符号数</strong> <a class="header-anchor" href="#_1-4-有符号与无符号数" aria-label="Permalink to &quot;**1.4 有符号与无符号数**&quot;">​</a></h4><ul><li><strong>区别</strong>：最高位是否作为符号位。<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> 0b1000...0010</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 无符号（正数）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> 0b1000...0010</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 有符号（负数补码）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>输出差异</strong>：<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出无符号值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出有符号值（可能为负数）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><hr><p><strong>附：C++关键字表</strong>（部分）</p><table tabindex="0"><thead><tr><th>关键字</th><th>关键字</th><th>关键字</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>float</code></td><td><code>return</code></td></tr><tr><td><code>const</code></td><td><code>namespace</code></td><td><code>static_cast</code></td></tr><tr><td><code>bool</code></td><td><code>using</code></td><td><code>dynamic_cast</code></td></tr></tbody></table>`,16)]))}const b=a(e,[["render",l]]);export{k as __pageData,b as default};
