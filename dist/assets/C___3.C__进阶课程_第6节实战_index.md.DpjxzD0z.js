import{_ as a,c as r,o as t,a3 as p}from"./chunks/framework.C8Xs1bna.js";const C=JSON.parse('{"title":"实战参考目录","description":"","frontmatter":{},"headers":[],"relativePath":"C++/3.C++进阶课程/第6节实战/index.md","filePath":"C++/3.C++进阶课程/第6节实战/index.md","lastUpdated":1754900608000}'),o={name:"C++/3.C++进阶课程/第6节实战/index.md"};function d(i,e,n,h,s,_){return t(),r("div",null,e[0]||(e[0]=[p('<hr><p>对前三个阶段的实战操作，因为从下一个阶段是属于另一个岗位了，从这就可以去划分了</p><hr><h1 id="实战参考目录" tabindex="-1">实战参考目录 <a class="header-anchor" href="#实战参考目录" aria-label="Permalink to &quot;实战参考目录&quot;">​</a></h1><hr><p><a href="/C++/3.C++进阶课程/第6节实战/双日志系统1.0">双日志系统1.0</a></p><p>设计一个日志系统，支持多线程安全的日志记录，并能够根据日期自动创建日志文件。该日志系统应包括全局日志和按日期分割的日志文件。</p><hr><p><a href="/C++/3.C++进阶课程/第6节实战/双日志系统2.0">双日志系统2.0</a></p><p>实现一个双日志系统，该系统包含两个日志记录器,不同的日志记录器保存不同的东西</p><hr><p><a href="/C++/3.C++进阶课程/第6节实战/利用线程找最大值">利用线程找最大值</a></p><p>设计一个线程池来并行查找一个整数向量中的最大值。每个线程负责处理向量的一部分，并找到该部分的最大值。最终，主线程将这些局部最大值合并，得到全局最大值。</p><hr><p><a href="/C++/3.C++进阶课程/第6节实战/异常安全的动态矩阵类Matrix实现">异常安全的动态矩阵类 Matrix 实现</a></p><p>实现一个异常安全的动态矩阵类 <code>Matrix</code>，支持强异常保证的 <code>resize</code> 操作，并提供移动赋值运算符和访问元素的方法。</p><hr><p><a href="/C++/3.C++进阶课程/第6节实战/PTP项目">PTP项目</a></p><p>PTP是一个基于POSIX线程(pthread)库开发的轻量级线程池实现</p><hr>',20)]))}const f=a(o,[["render",d]]);export{C as __pageData,f as default};
