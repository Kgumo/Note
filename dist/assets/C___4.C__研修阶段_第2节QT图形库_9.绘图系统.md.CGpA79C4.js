import{_ as e,c as d,o,a3 as a}from"./chunks/framework.C3IOjdSt.js";const P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/4.C++研修阶段/第2节QT图形库/9.绘图系统.md","filePath":"C++/4.C++研修阶段/第2节QT图形库/9.绘图系统.md","lastUpdated":1754900608000}'),r={name:"C++/4.C++研修阶段/第2节QT图形库/9.绘图系统.md"};function i(n,t,c,l,s,h){return o(),d("div",null,t[0]||(t[0]=[a('<h3 id="绘图系统" tabindex="-1">绘图系统 <a class="header-anchor" href="#绘图系统" aria-label="Permalink to &quot;绘图系统&quot;">​</a></h3><p>Qt的绘图系统使用户可以在屏幕上实现自定义的图像绘画。绘图系统基于 <code>QPainter</code>、<code>QPaintDevice</code> 和 <code>QPaintEngine</code> 类：</p><ul><li><strong>QPainter</strong>：用于执行绘图操作的类。</li><li><strong>QPaintDevice</strong>：一个抽象的二维界面，可使用 <code>QPainter</code> 进行绘图。</li><li><strong>QPaintEngine</strong>：为 <code>QPainter</code> 提供在不同设备上绘图的接口。<code>QPaintEngine</code> 类由 <code>QPainter</code> 和 <code>QPaintDevice</code> 内部使用，应用程序一般无需直接操作，除非需创建自定义设备类型。</li></ul><h4 id="绘图设备" tabindex="-1">绘图设备 <a class="header-anchor" href="#绘图设备" aria-label="Permalink to &quot;绘图设备&quot;">​</a></h4><p>常见的绘图设备包括：</p><ul><li><strong>QPixmap</strong>：用于位图操作和快速绘制。针对屏幕进行特殊优化，与底层显示设备紧密相关。</li><li><strong>QPicture</strong>：可记录和重现 <code>QPainter</code> 命令的绘图设备，平台无关（不依赖硬件）。</li><li><strong>QImage</strong>：提供像素级操作，独立于硬件绘制系统。作为 <code>QPaintDevice</code>，可在非GUI线程中绘制，显著提升UI响应速度。</li><li><strong>QBitmap</strong>：提供单色图像（色深始终为1）。占用存储空间小，适合制作光标文件和笔刷。</li></ul><h4 id="绘图工具" tabindex="-1">绘图工具 <a class="header-anchor" href="#绘图工具" aria-label="Permalink to &quot;绘图工具&quot;">​</a></h4><ul><li><strong>QPainter</strong>：核心绘图类，执行各种绘图操作。</li><li><strong>QPen</strong>：设置线条属性（颜色、宽度、样式等）。</li><li><strong>QBrush</strong>：填充图形内部（颜色、样式、渐变等）。</li></ul><h4 id="图形绘制" tabindex="-1">图形绘制 <a class="header-anchor" href="#图形绘制" aria-label="Permalink to &quot;图形绘制&quot;">​</a></h4><p>支持基本图形绘制（点、线、矩形、椭圆等）以及路径绘制和图形组合。</p><h4 id="paintevent事件和绘图" tabindex="-1">paintEvent事件和绘图 <a class="header-anchor" href="#paintevent事件和绘图" aria-label="Permalink to &quot;paintEvent事件和绘图&quot;">​</a></h4><p><code>QWidget</code> 类及其子类是最常用的绘图设备。继承自 <code>QWidget</code> 的类均有 <code>paintEvent()</code> 事件。若需在设备上绘图，只需重写此事件即可。</p><h3 id="qpainter绘图的主要属性" tabindex="-1">QPainter绘图的主要属性 <a class="header-anchor" href="#qpainter绘图的主要属性" aria-label="Permalink to &quot;QPainter绘图的主要属性&quot;">​</a></h3><p>使用 <code>QPainter</code> 绘图时，主要通过以下3个属性控制绘图元素特性：</p><ol><li><strong>pen属性</strong>：<code>QPen</code> 对象，控制线条颜色、宽度、线型等。</li><li><strong>brush属性</strong>：<code>QBrush</code> 对象，设置区域填充特性（颜色、方式、渐变），支持图片材质填充。</li><li><strong>font属性</strong>：<code>QFont</code> 对象，绘制文字时设置字体样式、大小等。</li></ol><h3 id="qpen的主要功能" tabindex="-1">QPen的主要功能 <a class="header-anchor" href="#qpen的主要功能" aria-label="Permalink to &quot;QPen的主要功能&quot;">​</a></h3><p><code>QPen</code> 用于设置绘图时的线条特性：</p><table tabindex="0"><thead><tr><th>函数原型</th><th>功能作用</th></tr></thead><tbody><tr><td><code>void setColor(QColor &amp;color)</code></td><td>设置画笔颜色（线条颜色），参数为 <code>QColor</code> 类型。</td></tr><tr><td><code>void setWidth(int width)</code></td><td>设置线条宽度，参数为 <code>int</code> 类型。</td></tr><tr><td><code>void setStyle(Qt::PenStyle style)</code></td><td>设置线条样式，参数为 <code>Qt::PenStyle</code> 枚举类型。</td></tr><tr><td><code>void setCapStyle(Qt::PenCapStyle style)</code></td><td>设置线条端点样式，参数为 <code>Qt::PenCapStyle</code> 枚举类型。</td></tr><tr><td><code>void setJoinStyle(Qt::PenJoinStyle style)</code></td><td>设置连接样式，参数为 <code>Qt::PenJoinStyle</code> 枚举类型。</td></tr></tbody></table><h3 id="qbrush的主要功能" tabindex="-1">QBrush的主要功能 <a class="header-anchor" href="#qbrush的主要功能" aria-label="Permalink to &quot;QBrush的主要功能&quot;">​</a></h3><p><code>QBrush</code> 定义 <code>QPainter</code> 绘图时的填充特性：</p><table tabindex="0"><thead><tr><th>函数原型</th><th>功能</th></tr></thead><tbody><tr><td><code>void setColor(QColor &amp;color)</code></td><td>设置画刷颜色（实体填充时的填充颜色）。</td></tr><tr><td><code>void setStyle(Qt::BrushStyle style)</code></td><td>设置画刷样式，参数为 <code>Qt::BrushStyle</code> 枚举类型。</td></tr><tr><td><code>void setTexture(QPixmap &amp;pixmap)</code></td><td>设置 <code>QPixmap</code> 图片作为画刷材质，样式自动设为 <code>Qt::TexturePattern</code>。</td></tr><tr><td><code>void setTextureImage(QImage &amp;image)</code></td><td>设置 <code>QImage</code> 图片作为画刷材质，样式自动设为 <code>Qt::TexturePattern</code>。</td></tr></tbody></table><h4 id="画刷样式枚举-qt-brushstyle" tabindex="-1">画刷样式枚举（Qt::BrushStyle） <a class="header-anchor" href="#画刷样式枚举-qt-brushstyle" aria-label="Permalink to &quot;画刷样式枚举（Qt::BrushStyle）&quot;">​</a></h4><table tabindex="0"><thead><tr><th>枚举常量</th><th>描述</th></tr></thead><tbody><tr><td><code>Qt::NoBrush</code></td><td>不填充。</td></tr><tr><td><code>Qt::SolidPattern</code></td><td>单一颜色填充。</td></tr><tr><td><code>Qt::HorPattern</code></td><td>水平线填充。</td></tr><tr><td><code>Qt::VerPattern</code></td><td>垂直线填充。</td></tr><tr><td><code>Qt::LinearGradientPattern</code></td><td>线性渐变（需使用 <code>QLinearGradient</code> 类对象）。</td></tr><tr><td><code>Qt::RadialGradientPattern</code></td><td>辐射渐变（需使用 <code>QRadialGradient</code> 类对象）。</td></tr><tr><td><code>Qt::ConicalGradientPattern</code></td><td>圆锥渐变（需使用 <code>QConicalGradient</code> 类对象）。</td></tr><tr><td><code>Qt::TexturePattern</code></td><td>材质填充（需指定 <code>texture</code> 或 <code>textureImage</code> 图片）。</td></tr></tbody></table><h3 id="双缓冲" tabindex="-1">双缓冲 <a class="header-anchor" href="#双缓冲" aria-label="Permalink to &quot;双缓冲&quot;">​</a></h3><p>双缓冲是一种绘图优化技术：在绘图设备未完成绘图时，将需绘制的内容暂存到临时设备；待绘图设备准备就绪后，再同步显示内容。</p><hr><h3 id="作业" tabindex="-1">作业 <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业&quot;">​</a></h3><p>完成涂鸦板项目。</p>',28)]))}const u=e(r,[["render",i]]);export{P as __pageData,u as default};
