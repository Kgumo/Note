import{_ as d,c as o,o as a,a3 as e}from"./chunks/framework.CkaDlzKP.js";const s=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/4.C++研修阶段/第2节QT图形库/7.布局管理.md","filePath":"C++/4.C++研修阶段/第2节QT图形库/7.布局管理.md","lastUpdated":1754900608000}'),r={name:"C++/4.C++研修阶段/第2节QT图形库/7.布局管理.md"};function i(c,t,l,n,h,u){return a(),o("div",null,t[0]||(t[0]=[e('<h3 id="布局管理" tabindex="-1">布局管理 <a class="header-anchor" href="#布局管理" aria-label="Permalink to &quot;布局管理&quot;">​</a></h3><h4 id="布局管理器" tabindex="-1">布局管理器 <a class="header-anchor" href="#布局管理器" aria-label="Permalink to &quot;布局管理器&quot;">​</a></h4><p>在我们之前直接通过界面拖拽设置控件时，都是通过手动控制控件位置的。每个控件的位置需要计算坐标，最终通过 <code>setGeometry</code> 或 <code>move</code> 方法进行摆放。这种方式在界面内容较多时计算复杂，且无法自适应窗口大小的调整（例如窗口缩放时控件位置不会动态更新）。因此，Qt 引入了**布局管理器（Layout）**机制。</p><h4 id="常见布局管理器" tabindex="-1">常见布局管理器 <a class="header-anchor" href="#常见布局管理器" aria-label="Permalink to &quot;常见布局管理器&quot;">​</a></h4><ol><li><strong>QVBoxLayout（垂直布局）</strong></li><li><strong>QHBoxLayout（水平布局）</strong></li><li><strong>QGridLayout（网格布局）</strong></li><li><strong>QFormLayout（表单布局）</strong></li></ol><hr><h4 id="垂直布局-qvboxlayout" tabindex="-1">垂直布局（QVBoxLayout） <a class="header-anchor" href="#垂直布局-qvboxlayout" aria-label="Permalink to &quot;垂直布局（QVBoxLayout）&quot;">​</a></h4><table tabindex="0"><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>layoutLeftMargin</code></td><td>左侧边距</td></tr><tr><td><code>layoutRightMargin</code></td><td>右侧边距</td></tr><tr><td><code>layoutTopMargin</code></td><td>上方边距</td></tr><tr><td><code>layoutBottomMargin</code></td><td>下方边距</td></tr><tr><td><code>layoutSpacing</code></td><td>相邻元素之间的间距</td></tr></tbody></table><hr><h4 id="水平布局-qhboxlayout" tabindex="-1">水平布局（QHBoxLayout） <a class="header-anchor" href="#水平布局-qhboxlayout" aria-label="Permalink to &quot;水平布局（QHBoxLayout）&quot;">​</a></h4><table tabindex="0"><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>layoutLeftMargin</code></td><td>左侧边距</td></tr><tr><td><code>layoutRightMargin</code></td><td>右侧边距</td></tr><tr><td><code>layoutTopMargin</code></td><td>上方边距</td></tr><tr><td><code>layoutBottomMargin</code></td><td>下方边距</td></tr><tr><td><code>layoutSpacing</code></td><td>相邻元素之间的间距</td></tr></tbody></table><hr><h4 id="网格布局-qgridlayout" tabindex="-1">网格布局（QGridLayout） <a class="header-anchor" href="#网格布局-qgridlayout" aria-label="Permalink to &quot;网格布局（QGridLayout）&quot;">​</a></h4><p><code>QGridLayout</code> 的用法与 <code>QVBoxLayout</code>、<code>QHBoxLayout</code> 相似，但其布局基于行和列。</p><table tabindex="0"><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>layoutLeftMargin</code></td><td>左侧边距</td></tr><tr><td><code>layoutRightMargin</code></td><td>右侧边距</td></tr><tr><td><code>layoutTopMargin</code></td><td>上方边距</td></tr><tr><td><code>layoutBottomMargin</code></td><td>下方边距</td></tr><tr><td><code>layoutHorizontalSpacing</code></td><td>相邻元素之间水平方向的间距</td></tr><tr><td><code>layoutVerticalSpacing</code></td><td>相邻元素之间垂直方向的间距</td></tr><tr><td><code>layoutRowStretch</code></td><td>行方向的拉伸系数</td></tr><tr><td><code>layoutColumnStretch</code></td><td>列方向的拉伸系数</td></tr></tbody></table><p><strong>特殊设置说明</strong>：</p><ul><li><code>QGridLayout</code> 提供 <code>setRowStretch()</code> 方法设置行拉伸系数。</li><li>若拉伸效果不明显（例如按钮高度固定），需将控件的垂直方向 <code>sizePolicy</code> 属性设置为 <code>QSizePolicy::Expanding</code>（尽可能填充满布局管理器）。</li></ul><p><strong>控件尺寸策略（SizePolicy）可选值</strong>：</p><table tabindex="0"><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td><code>QSizePolicy::Ignored</code></td><td>忽略控件尺寸，不影响布局</td></tr><tr><td><code>QSizePolicy::Minimum</code></td><td>控件最小尺寸固定，布局时不会超过该值</td></tr><tr><td><code>QSizePolicy::Maximum</code></td><td>控件最大尺寸固定，布局时不会小于该值</td></tr><tr><td><code>QSizePolicy::Preferred</code></td><td>控件理想尺寸固定，布局时尽量接近该值</td></tr><tr><td><code>QSizePolicy::Expanding</code></td><td>控件尺寸可随空间调整，尽可能占据更多空间</td></tr><tr><td><code>QSizePolicy::Shrinking</code></td><td>控件尺寸可随空间调整，尽可能缩小以适应空间</td></tr></tbody></table><hr><h4 id="表单布局-qformlayout" tabindex="-1">表单布局（QFormLayout） <a class="header-anchor" href="#表单布局-qformlayout" aria-label="Permalink to &quot;表单布局（QFormLayout）&quot;">​</a></h4><p><code>QFormLayout</code> 适用于表单类界面（例如收集用户信息的场景），典型结构包含标签（如“学号”、“姓名”）和对应的输入控件（如文本框）。</p><p><strong>应用场景示例</strong>：<br> 在学校或社群中收集电话号码的文档，表单包含以下字段：</p><ol><li>学号</li><li>姓名</li><li>电话<br> 用户填写后可直接提交。</li></ol><hr><h3 id="作业" tabindex="-1">作业 <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业&quot;">​</a></h3><p>完成 2048 小游戏。</p>',27)]))}const b=d(r,[["render",i]]);export{s as __pageData,b as default};
