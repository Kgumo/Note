import{_ as a,c as t,o as e,a3 as o}from"./chunks/framework.C8Xs1bna.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/4.C++研修阶段/第3节工具使用/2.Git远程仓库.md","filePath":"C++/4.C++研修阶段/第3节工具使用/2.Git远程仓库.md","lastUpdated":1754900608000}'),l={name:"C++/4.C++研修阶段/第3节工具使用/2.Git远程仓库.md"};function s(n,i,r,h,d,c){return e(),t("div",null,i[0]||(i[0]=[o(`<h3 id="github" tabindex="-1">GitHub <a class="header-anchor" href="#github" aria-label="Permalink to &quot;GitHub&quot;">​</a></h3><h4 id="什么是github" tabindex="-1">什么是GitHub <a class="header-anchor" href="#什么是github" aria-label="Permalink to &quot;什么是GitHub&quot;">​</a></h4><p>GitHub 平台的开发始于 2007 年 10 月 19 日，由 Tom Preston-Werner、Chris Wanstrath、P.J. Hyett 和 Scott Chacon 于 2008 年 4 月推出。简单来说 GitHub 就是一个远程仓库，远程仓库通信的理解就是一个可以保存自己代码的地方。在实际开发当中一个项目往往是有多个人来共同协作开发完成的，那么就需要一个统一代码保存的地方，而 GitHub 就是起到一个共享和汇总代码的作用。</p><h4 id="github登录与注册" tabindex="-1">GitHub登录与注册 <a class="header-anchor" href="#github登录与注册" aria-label="Permalink to &quot;GitHub登录与注册&quot;">​</a></h4><p><strong>clash for window 工具</strong></p><h5 id="安装watt-toolkit-梯子" tabindex="-1">安装Watt Toolkit (梯子) <a class="header-anchor" href="#安装watt-toolkit-梯子" aria-label="Permalink to &quot;安装Watt Toolkit (梯子)&quot;">​</a></h5><ul><li>打开 Microsoft Store 搜索 Watt Toolkit 后并下载安装。</li><li>安装完过后直接启动。</li><li>选择 GitHub，然后点击加速。</li></ul><h4 id="github的网页操作" tabindex="-1">GitHub的网页操作 <a class="header-anchor" href="#github的网页操作" aria-label="Permalink to &quot;GitHub的网页操作&quot;">​</a></h4><ul><li>进入 GitHub 官网。</li></ul><h5 id="build-and-ship-software-on-a-single-collaborative-platform" tabindex="-1">Build and ship software on a single, collaborative platform <a class="header-anchor" href="#build-and-ship-software-on-a-single-collaborative-platform" aria-label="Permalink to &quot;Build and ship software on a single, collaborative platform&quot;">​</a></h5><ul><li>点击 Sign In 进行登录。</li><li>没有 GitHub 账号点击下方的 Create an account。</li><li>可以点击浏览器右上角的文本选项，将其进行页面翻译（推荐使用 Microsoft Edge 浏览器）。</li><li>点击右上角的 + 号即可创建一个仓库。</li><li>在 setting 中更改库的一些属性，或者删除库。</li></ul><h4 id="git终端使用" tabindex="-1">Git终端使用 <a class="header-anchor" href="#git终端使用" aria-label="Permalink to &quot;Git终端使用&quot;">​</a></h4><p>GitHub 终端下载地址：<a href="https://gitforwindows.org/" target="_blank" rel="noreferrer">Git for Windows</a></p><ul><li>Linux 安装：<code>apt-get install git</code>。</li><li>下载 Git 终端（git bash）。安装 Bit Bash 一路 next 即可。</li></ul><hr><h3 id="git-配置" tabindex="-1">Git 配置 <a class="header-anchor" href="#git-配置" aria-label="Permalink to &quot;Git 配置&quot;">​</a></h3><p>Git 提供了一个叫做 <strong>git config</strong> 的命令，用来配置或读取相应的工作环境变量。这些环境变量决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><ul><li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>system</code> 选项，读写的就是这个文件。</li><li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>global</code> 选项，读写的就是这个文件。</li><li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li></ul><p>在 Windows 系统上，Git 会找到用户主目录下的 <code>.gitconfig</code> 文件。主目录即 <code>$HOME</code> 变量指定的目录，一般都是 <code>C:\\Documents and Settings\\$USER</code>。此外，Git 还会尝试找寻 <code>/etc/gitconfig</code> 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</p><h4 id="配置用户名和邮箱" tabindex="-1">配置用户名和邮箱 <a class="header-anchor" href="#配置用户名和邮箱" aria-label="Permalink to &quot;配置用户名和邮箱&quot;">​</a></h4><p>配置个人的用户名称和电子邮件地址，这是为了在每次提交代码时记录提交者的信息：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;你的用户名&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;你的邮箱&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,22)]))}const p=a(l,[["render",s]]);export{g as __pageData,p as default};
