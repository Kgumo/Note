import{_ as i,c as a,o as n,a4 as l}from"./chunks/framework.BQlL4Ck5.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/3.C++进阶课程/第5节网络编程/2.TCP和udp及通信协议.md","filePath":"C++/3.C++进阶课程/第5节网络编程/2.TCP和udp及通信协议.md","lastUpdated":1754871536000}'),e={name:"C++/3.C++进阶课程/第5节网络编程/2.TCP和udp及通信协议.md"};function t(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h3 id="socket套接字" tabindex="-1">Socket套接字 <a class="header-anchor" href="#socket套接字" aria-label="Permalink to &quot;Socket套接字&quot;">​</a></h3><p>Socket 是一个编程接口（网络编程接口），是一种特殊的文件描述符（write/read）。Socket 并不仅限于 TCP/IP。<br> Socket 独立于具体协议的编程接口，这个接口位于 TCP/IP 四层模型的应用层与传输层之间。</p><h4 id="socket的类型" tabindex="-1">Socket的类型 <a class="header-anchor" href="#socket的类型" aria-label="Permalink to &quot;Socket的类型&quot;">​</a></h4><ul><li><strong>流式套接字</strong>（<code>SOCK_STREAM</code>）： <ul><li>面向字节流，针对于传输层协议为 TCP 协议的网络应用。</li></ul></li><li><strong>数据报套接字</strong>（<code>SOCK_DGRAM</code>）： <ul><li>面向数据报，针对于传输层协议为 UDP 协议的网络应用。</li></ul></li><li><strong>原始套接字</strong>（<code>SOCK_RAW</code>）： <ul><li>直接跳过传输层。</li></ul></li></ul><hr><h3 id="基于-tcp-的套接字编程流程" tabindex="-1">基于 TCP 的套接字编程流程 <a class="header-anchor" href="#基于-tcp-的套接字编程流程" aria-label="Permalink to &quot;基于 TCP 的套接字编程流程&quot;">​</a></h3><p>任何网络应用都会有通信双方：</p><ul><li><strong>Send 发送端</strong></li><li><strong>Recv 接收端</strong></li></ul><p><strong>TCP 网络应用</strong>（C/S 模型）（长连接）：</p><ul><li><strong>Client 客户端（TCP）</strong></li><li><strong>Server 服务端（TCP）</strong></li></ul><p><strong>任何的网络应用</strong>：</p><ul><li>传输层的协议（TCP/UDP）+ 端口 + IP 地址</li><li>网络地址：任意一方都需要有一个网络地址（IP+端口）</li></ul><h4 id="tcp-网络应用执行过程" tabindex="-1">TCP 网络应用执行过程 <a class="header-anchor" href="#tcp-网络应用执行过程" aria-label="Permalink to &quot;TCP 网络应用执行过程&quot;">​</a></h4><ol><li><strong>建立连接</strong>：三次握手</li><li><strong>发送/接收数据</strong>： <ul><li>发送数据：<code>write/send/sendto</code></li><li>接收数据：<code>read/recv/recvfrom</code></li></ul></li><li><strong>关闭连接</strong>：四次挥手</li></ol><hr><h3 id="tcp-server-服务端编程流程" tabindex="-1">TCP-Server 服务端编程流程 <a class="header-anchor" href="#tcp-server-服务端编程流程" aria-label="Permalink to &quot;TCP-Server 服务端编程流程&quot;">​</a></h3><h4 id="_1-建立套接字-socket" tabindex="-1">1. 建立套接字：<code>socket()</code> <a class="header-anchor" href="#_1-建立套接字-socket" aria-label="Permalink to &quot;1. 建立套接字：\`socket()\`&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/types.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/socket.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> domain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>描述</strong>：申请指定类型和协议的套接字。</li><li><strong>参数</strong>： <ul><li><code>domain</code>：协议簇（如 <code>AF_INET</code> IPv4, <code>AF_INET6</code> IPv6）。</li><li><code>type</code>：套接字类型（如 <code>SOCK_STREAM</code> TCP, <code>SOCK_DGRAM</code> UDP）。</li><li><code>protocol</code>：具体协议（通常为 0）。</li></ul></li><li><strong>返回值</strong>：成功返回套接字描述符，失败返回 -1。</li></ul><h4 id="_2-绑定网络地址-bind" tabindex="-1">2. 绑定网络地址：<code>bind()</code> <a class="header-anchor" href="#_2-绑定网络地址-bind" aria-label="Permalink to &quot;2. 绑定网络地址：\`bind()\`&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/types.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/socket.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sockfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sockaddr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">socklen_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> addrlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>描述</strong>：将套接字绑定到网络地址。</li><li><strong>参数</strong>： <ul><li><code>sockfd</code>：套接字描述符。</li><li><code>addr</code>：网络地址结构体（如 <code>struct sockaddr_in</code>）。</li><li><code>addrlen</code>：地址结构体长度。</li></ul></li><li><strong>地址结构示例</strong>：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sockaddr_in sock_info;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sock_info.sin_family </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AF_INET;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // IPv4  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sock_info.sin_port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> htons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 端口  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sock_info.sin_addr.s_addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inet_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;192.168.31.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // IP</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><strong>返回值</strong>：成功返回 0，失败返回 -1。</li></ul><h4 id="_3-监听连接-listen" tabindex="-1">3. 监听连接：<code>listen()</code> <a class="header-anchor" href="#_3-监听连接-listen" aria-label="Permalink to &quot;3. 监听连接：\`listen()\`&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/types.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/socket.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sockfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> backlog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>描述</strong>：设置套接字进入监听模式。</li><li><strong>参数</strong>： <ul><li><code>sockfd</code>：套接字描述符。</li><li><code>backlog</code>：最大等待连接队列长度。</li></ul></li><li><strong>返回值</strong>：成功返回 0，失败返回 -1。</li></ul><h4 id="_4-接受客户端连接-accept" tabindex="-1">4. 接受客户端连接：<code>accept()</code> <a class="header-anchor" href="#_4-接受客户端连接-accept" aria-label="Permalink to &quot;4. 接受客户端连接：\`accept()\`&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/types.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/socket.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sockfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sockaddr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">socklen_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addrlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>描述</strong>：等待客户端连接（完成三次握手）。</li><li><strong>参数</strong>： <ul><li><code>sockfd</code>：监听套接字描述符。</li><li><code>addr</code>：存储客户端地址的结构体。</li><li><code>addrlen</code>：地址结构体长度指针。</li></ul></li><li><strong>返回值</strong>：成功返回通信套接字描述符，失败返回 -1。</li></ul><h4 id="_5-数据传输-send-和-recv" tabindex="-1">5. 数据传输：<code>send()</code> 和 <code>recv()</code> <a class="header-anchor" href="#_5-数据传输-send-和-recv" aria-label="Permalink to &quot;5. 数据传输：\`send()\` 和 \`recv()\`&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/types.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/socket.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ssize_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sockfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>描述</strong>：向套接字写入数据。</li><li><strong>参数</strong>： <ul><li><code>sockfd</code>：通信套接字描述符。</li><li><code>buf</code>：待发送数据指针。</li><li><code>len</code>：数据长度。</li><li><code>flags</code>：标志位（通常为 0）。</li></ul></li><li><strong>返回值</strong>：成功返回实际发送字节数，失败返回 -1。</li></ul><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ssize_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> recv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sockfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>描述</strong>：从套接字读取数据。</li><li><strong>参数</strong>：同 <code>send()</code>。</li><li><strong>返回值</strong>：成功返回实际接收字节数，失败返回 -1。</li></ul><h4 id="_6-关闭套接字-shutdown-或-close" tabindex="-1">6. 关闭套接字：<code>shutdown()</code> 或 <code>close()</code> <a class="header-anchor" href="#_6-关闭套接字-shutdown-或-close" aria-label="Permalink to &quot;6. 关闭套接字：\`shutdown()\` 或 \`close()\`&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/socket.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sockfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> how</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><strong>描述</strong>：关闭套接字连接（触发四次挥手）。</li><li><strong>参数</strong>： <ul><li><code>sockfd</code>：套接字描述符。</li><li><code>how</code>：关闭方式（<code>SHUT_RD</code>, <code>SHUT_WR</code>, <code>SHUT_RDWR</code>）。</li></ul></li></ul><hr><h3 id="tcp-client-客户端编程流程" tabindex="-1">TCP-Client 客户端编程流程 <a class="header-anchor" href="#tcp-client-客户端编程流程" aria-label="Permalink to &quot;TCP-Client 客户端编程流程&quot;">​</a></h3><h4 id="_1-建立套接字-socket-1" tabindex="-1">1. 建立套接字：<code>socket()</code> <a class="header-anchor" href="#_1-建立套接字-socket-1" aria-label="Permalink to &quot;1. 建立套接字：\`socket()\`&quot;">​</a></h4><p>同服务端。</p><h4 id="_2-绑定地址-可选" tabindex="-1">2. 绑定地址（可选） <a class="header-anchor" href="#_2-绑定地址-可选" aria-label="Permalink to &quot;2. 绑定地址（可选）&quot;">​</a></h4><p>通常不绑定，由系统分配。</p><h4 id="_3-发起连接请求-connect" tabindex="-1">3. 发起连接请求：<code>connect()</code> <a class="header-anchor" href="#_3-发起连接请求-connect" aria-label="Permalink to &quot;3. 发起连接请求：\`connect()\`&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/types.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/socket.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sockfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sockaddr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">socklen_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> addrlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>描述</strong>：向目标地址发起连接请求。</li><li><strong>参数</strong>： <ul><li><code>sockfd</code>：套接字描述符。</li><li><code>addr</code>：目标服务器地址结构体。</li><li><code>addrlen</code>：地址结构体长度。</li></ul></li><li><strong>返回值</strong>：成功返回 0，失败返回 -1。</li></ul><h4 id="_4-数据传输-send-和-recv" tabindex="-1">4. 数据传输：<code>send()</code> 和 <code>recv()</code> <a class="header-anchor" href="#_4-数据传输-send-和-recv" aria-label="Permalink to &quot;4. 数据传输：\`send()\` 和 \`recv()\`&quot;">​</a></h4><p>同服务端。</p><h4 id="_5-关闭套接字-close" tabindex="-1">5. 关闭套接字：<code>close()</code> <a class="header-anchor" href="#_5-关闭套接字-close" aria-label="Permalink to &quot;5. 关闭套接字：\`close()\`&quot;">​</a></h4><p>同服务端。</p><hr><h3 id="基于-udp-的套接字编程流程" tabindex="-1">基于 UDP 的套接字编程流程 <a class="header-anchor" href="#基于-udp-的套接字编程流程" aria-label="Permalink to &quot;基于 UDP 的套接字编程流程&quot;">​</a></h3><p>UDP 是面向无连接的传输层协议：</p><ul><li>网络环境较好时效率高，较差时可能丢包。</li><li>适用于实时应用（需在应用层增加可靠性控制）。</li></ul><h4 id="udp-recver-接收端" tabindex="-1">UDP Recver（接收端） <a class="header-anchor" href="#udp-recver-接收端" aria-label="Permalink to &quot;UDP Recver（接收端）&quot;">​</a></h4><ol><li><strong>创建套接字</strong>：<code>socket()</code>（类型为 <code>SOCK_DGRAM</code>）。</li><li><strong>绑定地址</strong>：<code>bind()</code>（指定接收端口）。</li><li><strong>接收数据</strong>：<code>recvfrom()</code><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ssize_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> recvfrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sockfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                 struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sockaddr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">src_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">socklen_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">addrlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>参数</strong>： <ul><li><code>src_addr</code>：存储发送方地址的结构体（可为 <code>NULL</code>）。</li><li><code>addrlen</code>：地址结构体长度指针。</li></ul></li></ul></li><li><strong>关闭套接字</strong>：<code>close()</code>。</li></ol><h4 id="udp-sender-发送端" tabindex="-1">UDP Sender（发送端） <a class="header-anchor" href="#udp-sender-发送端" aria-label="Permalink to &quot;UDP Sender（发送端）&quot;">​</a></h4><ol><li><strong>创建套接字</strong>：<code>socket()</code>（类型为 <code>SOCK_DGRAM</code>）。</li><li><strong>发送数据</strong>：<code>sendto()</code><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ssize_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sockfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sockaddr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dest_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">socklen_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> addrlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>参数</strong>： <ul><li><code>dest_addr</code>：目标地址结构体。</li><li><code>addrlen</code>：地址结构体长度。</li></ul></li></ul></li><li><strong>关闭套接字</strong>：<code>close()</code>。</li></ol><hr><h3 id="网络通信协议" tabindex="-1">网络通信协议 <a class="header-anchor" href="#网络通信协议" aria-label="Permalink to &quot;网络通信协议&quot;">​</a></h3><p>协议是通信双方约定的规则：</p><h4 id="示例-1-字符分隔" tabindex="-1">示例 1：字符分隔 <a class="header-anchor" href="#示例-1-字符分隔" aria-label="Permalink to &quot;示例 1：字符分隔&quot;">​</a></h4><ul><li>用特殊字符标记开始/结束（如 <code>STX</code>/<code>ETX</code>）。</li><li>数据为明文，长度不限。</li></ul><h4 id="示例-2-结构化数据包" tabindex="-1">示例 2：结构化数据包 <a class="header-anchor" href="#示例-2-结构化数据包" aria-label="Permalink to &quot;示例 2：结构化数据包&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package {  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 数据包序号  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { CMD, MSG, IMG } type;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 数据类型  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 数据实际大小  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 数据内容  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h3 id="作业" tabindex="-1">作业 <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业&quot;">​</a></h3><ol><li><strong>TCP 封装</strong>：将 TCP 操作封装成一个类。</li><li><strong>UDP 文件传输</strong>：实现 UDP 发送端和接收端，支持发送文件。</li></ol>`,67)]))}const g=i(e,[["render",t]]);export{c as __pageData,g as default};
