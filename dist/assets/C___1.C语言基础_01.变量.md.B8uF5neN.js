import{_ as i,c as a,o as n,a3 as l}from"./chunks/framework.C3IOjdSt.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/1.C语言基础/01.变量.md","filePath":"C++/1.C语言基础/01.变量.md","lastUpdated":1754900608000}'),e={name:"C++/1.C语言基础/01.变量.md"};function t(r,s,h,p,o,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h3 id="_1-预处理指令" tabindex="-1"><strong>1. 预处理指令</strong> <a class="header-anchor" href="#_1-预处理指令" aria-label="Permalink to &quot;**1. 预处理指令**&quot;">​</a></h3><p>在C语言中，预处理指令是在编译之前由预处理器处理的指令，以 <code>#</code> 开头，不以分号 <code>;</code> 结尾。</p><h4 id="_1-1-include-预处理指令" tabindex="-1"><strong>1.1 <code>#include</code> 预处理指令</strong> <a class="header-anchor" href="#_1-1-include-预处理指令" aria-label="Permalink to &quot;**1.1 \`#include\` 预处理指令**&quot;">​</a></h4><ul><li><strong>作用</strong>：将一个头文件的内容包含到当前文件中。</li><li><strong>两种形式</strong>： <ol><li><strong><code>#include &lt;&gt;</code></strong>： <ul><li>系统直接按系统指定的目录检索头文件。</li><li>通常用于包含标准库头文件，如 <code>#include &lt;stdio.h&gt;</code>。</li></ul></li><li><strong><code>#include &quot;&quot;</code></strong>： <ul><li>首先以当前文件所在目录作为起点检索头文件，如果找不到，再按系统指定的目录检索。</li><li>通常用于包含用户自定义的头文件，如 <code>#include &quot;myheader.h&quot;</code>。</li></ul></li></ol></li></ul><hr><h3 id="_2-注释" tabindex="-1"><strong>2. 注释</strong> <a class="header-anchor" href="#_2-注释" aria-label="Permalink to &quot;**2. 注释**&quot;">​</a></h3><p>注释是程序中用于解释代码的文字，不会被编译器执行，但对程序员理解代码非常重要。</p><h4 id="_2-1-注释的分类" tabindex="-1"><strong>2.1 注释的分类</strong> <a class="header-anchor" href="#_2-1-注释的分类" aria-label="Permalink to &quot;**2.1 注释的分类**&quot;">​</a></h4><ol><li><strong>单行注释</strong>： <ul><li>语法：<code>// 被注释内容</code></li><li>使用范围：可以在任何地方使用，如函数外面、里面，或每一条语句后面。</li><li>作用范围：从 <code>//</code> 到这一行末尾。</li><li>示例：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是一个单行注释</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 定义一个变量表示年龄</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li><li><strong>多行注释</strong>： <ul><li>语法：<code>/* 被注释内容 */</code></li><li>使用范围：可以在任何地方使用。</li><li>作用范围：从 <code>/*</code> 到最近的 <code>*/</code>。</li><li>示例：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 这是一个多行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   可以跨越多行 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ol><h4 id="_2-2-注释的注意点" tabindex="-1"><strong>2.2 注释的注意点</strong> <a class="header-anchor" href="#_2-2-注释的注意点" aria-label="Permalink to &quot;**2.2 注释的注意点**&quot;">​</a></h4><ul><li><strong>单行注释</strong>： <ul><li>可以嵌套单行注释和多行注释。</li><li>示例：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单行注释</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 嵌套单行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单行注释 /* 嵌套多行注释 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li><li><strong>多行注释</strong>： <ul><li>可以嵌套单行注释，但不能嵌套多行注释。</li><li>示例：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 多行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 嵌套单行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   不能嵌套多行注释 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><h4 id="_2-3-使用注释的好处" tabindex="-1"><strong>2.3 使用注释的好处</strong> <a class="header-anchor" href="#_2-3-使用注释的好处" aria-label="Permalink to &quot;**2.3 使用注释的好处**&quot;">​</a></h4><ul><li><strong>提高代码可读性</strong>： <ul><li>注释可以帮助其他程序员或未来的自己快速理解代码的意图。</li></ul></li><li><strong>整理实现思路</strong>： <ul><li>在编写代码之前，先写注释可以帮助程序员理清思路。</li></ul></li><li><strong>方便调试和维护</strong>： <ul><li>注释可以记录代码的修改历史或特殊处理的原因。</li></ul></li></ul><hr><h3 id="_3-代码规范" tabindex="-1"><strong>3. 代码规范</strong> <a class="header-anchor" href="#_3-代码规范" aria-label="Permalink to &quot;**3. 代码规范**&quot;">​</a></h3><p>良好的代码规范可以提高代码的可读性和可维护性。</p><h4 id="_3-1-示例" tabindex="-1"><strong>3.1 示例</strong> <a class="header-anchor" href="#_3-1-示例" aria-label="Permalink to &quot;**3.1 示例**&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 作者：贾修</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 描述：这段代码的作用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">哈哈哈</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     /*嘻嘻嘻*/  // 错误：多行注释不能嵌套多行注释</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 呵呵呵 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_3-2-代码规范要点" tabindex="-1"><strong>3.2 代码规范要点</strong> <a class="header-anchor" href="#_3-2-代码规范要点" aria-label="Permalink to &quot;**3.2 代码规范要点**&quot;">​</a></h4><ol><li><strong>一行里最多包含一条语句</strong>： <ul><li>示例：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 不推荐</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li><li><strong>同级别的语句应该上下对齐</strong>： <ul><li>示例：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a is greater than b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b is greater than a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li><li><strong>在合适的时候使用空格和空行</strong>： <ul><li>示例：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 运算符前后加空格</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sum);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 逗号后加空格</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ol><hr><h3 id="_4-数据" tabindex="-1"><strong>4. 数据</strong> <a class="header-anchor" href="#_4-数据" aria-label="Permalink to &quot;**4. 数据**&quot;">​</a></h3><p>在C语言中，数据是程序操作的基础，包括常量和变量。</p><h4 id="_4-1-常量" tabindex="-1"><strong>4.1 常量</strong> <a class="header-anchor" href="#_4-1-常量" aria-label="Permalink to &quot;**4.1 常量**&quot;">​</a></h4><p>常量是程序运行过程中值不能被改变的量。</p><h5 id="_4-1-1-关键字" tabindex="-1"><strong>4.1.1 关键字</strong> <a class="header-anchor" href="#_4-1-1-关键字" aria-label="Permalink to &quot;**4.1.1 关键字**&quot;">​</a></h5><ul><li>C语言中预先保留了32个关键字，如 <code>int</code>、<code>float</code>、<code>return</code> 等。</li><li>特点： <ul><li>所有关键字都是由小写字母构成的。</li><li>在开发工具中会显示特殊颜色。</li></ul></li></ul><h5 id="_4-1-2-字符常量" tabindex="-1"><strong>4.1.2 字符常量</strong> <a class="header-anchor" href="#_4-1-2-字符常量" aria-label="Permalink to &quot;**4.1.2 字符常量**&quot;">​</a></h5><ul><li>用单引号 <code>&#39;&#39;</code> 括起来，如 <code>&#39;A&#39;</code>、<code>&#39;1&#39;</code>。</li><li>特殊情况：转义字符，如 <code>&#39;\\n&#39;</code>（换行符）、<code>&#39;\\0&#39;</code>（空字符）。</li></ul><h5 id="_4-1-3-字符串常量" tabindex="-1"><strong>4.1.3 字符串常量</strong> <a class="header-anchor" href="#_4-1-3-字符串常量" aria-label="Permalink to &quot;**4.1.3 字符串常量**&quot;">​</a></h5><ul><li>用双引号 <code>&quot;&quot;</code> 括起来，如 <code>&quot;Hello&quot;</code>、<code>&quot;123&quot;</code>。</li></ul><h4 id="_4-2-变量" tabindex="-1"><strong>4.2 变量</strong> <a class="header-anchor" href="#_4-2-变量" aria-label="Permalink to &quot;**4.2 变量**&quot;">​</a></h4><p>变量是程序运行过程中值可以被改变的量。</p><h5 id="_4-2-1-变量的定义" tabindex="-1"><strong>4.2.1 变量的定义</strong> <a class="header-anchor" href="#_4-2-1-变量的定义" aria-label="Permalink to &quot;**4.2.1 变量的定义**&quot;">​</a></h5><ul><li><strong>标识符</strong>： <ul><li>用于标识变量、函数等的名称。</li><li>命名规则： <ol><li>不能是关键字。</li><li>只能由字母、数字、下划线组成。</li><li>第一个字符必须为字母或下划线。</li><li>区分大小写，如 <code>Fun</code> 和 <code>fun</code> 不同。</li></ol></li><li>命名规范： <ul><li><strong>望文生义</strong>：如 <code>name</code> 表示名字，<code>age</code> 表示年龄。</li><li><strong>驼峰命名</strong>：如 <code>lastChangeTime</code>、<code>oldName</code>。</li></ul></li></ul></li></ul><h5 id="_4-2-2-变量的作用" tabindex="-1"><strong>4.2.2 变量的作用</strong> <a class="header-anchor" href="#_4-2-2-变量的作用" aria-label="Permalink to &quot;**4.2.2 变量的作用**&quot;">​</a></h5><ul><li>存储程序中需要变化的数据，如年龄、计数器等。</li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><strong>预处理指令</strong>：如 <code>#include</code> 用于包含头文件。</li><li><strong>注释</strong>：单行注释 <code>//</code> 和多行注释 <code>/* */</code>，用于解释代码。</li><li><strong>代码规范</strong>：提高代码的可读性和可维护性。</li><li><strong>常量与变量</strong>：常量是固定值，变量是可变化的值，标识符的命名需遵循规则和规范。</li></ul>`,40)]))}const u=i(e,[["render",t]]);export{k as __pageData,u as default};
