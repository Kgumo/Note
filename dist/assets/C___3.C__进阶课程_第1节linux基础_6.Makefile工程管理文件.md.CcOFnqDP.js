import{_ as a,c as e,o as l,a3 as s}from"./chunks/framework.C8Xs1bna.js";const c=JSON.parse('{"title":"Makefile工程管理文件","description":"","frontmatter":{},"headers":[],"relativePath":"C++/3.C++进阶课程/第1节linux基础/6.Makefile工程管理文件.md","filePath":"C++/3.C++进阶课程/第1节linux基础/6.Makefile工程管理文件.md","lastUpdated":1754900608000}'),t={name:"C++/3.C++进阶课程/第1节linux基础/6.Makefile工程管理文件.md"};function n(r,i,d,o,h,p){return l(),e("div",null,i[0]||(i[0]=[s(`<h1 id="makefile工程管理文件" tabindex="-1">Makefile工程管理文件 <a class="header-anchor" href="#makefile工程管理文件" aria-label="Permalink to &quot;Makefile工程管理文件&quot;">​</a></h1><h2 id="makefile文件主要作用" tabindex="-1">Makefile文件主要作用 <a class="header-anchor" href="#makefile文件主要作用" aria-label="Permalink to &quot;Makefile文件主要作用&quot;">​</a></h2><h3 id="自动化编译" tabindex="-1">自动化编译 <a class="header-anchor" href="#自动化编译" aria-label="Permalink to &quot;自动化编译&quot;">​</a></h3><ul><li>指定编译工具和编译选项</li><li>编写好依赖关系后实现自动化编译</li></ul><h3 id="管理项目" tabindex="-1">管理项目 <a class="header-anchor" href="#管理项目" aria-label="Permalink to &quot;管理项目&quot;">​</a></h3><ul><li>管理源文件和目标文件之间的依赖关系</li><li>自动选择修改过的文件进行编译</li></ul><h3 id="生成可执行文件" tabindex="-1">生成可执行文件 <a class="header-anchor" href="#生成可执行文件" aria-label="Permalink to &quot;生成可执行文件&quot;">​</a></h3><ul><li>定义生成可执行文件的规则和依赖关系</li></ul><h3 id="清理和重建" tabindex="-1">清理和重建 <a class="header-anchor" href="#清理和重建" aria-label="Permalink to &quot;清理和重建&quot;">​</a></h3><ul><li>清理编译中间文件</li><li>删除目标文件</li><li>删除可执行文件</li></ul><h3 id="打包和发布" tabindex="-1">打包和发布 <a class="header-anchor" href="#打包和发布" aria-label="Permalink to &quot;打包和发布&quot;">​</a></h3><ul><li>定义项目打包操作</li><li>定义项目发布操作</li></ul><h2 id="自动化编译方式" tabindex="-1">自动化编译方式 <a class="header-anchor" href="#自动化编译方式" aria-label="Permalink to &quot;自动化编译方式&quot;">​</a></h2><ul><li>在终端执行：<code>make</code></li><li>执行<code>make</code>命令时自动查找当前目录下的Makefile文件</li><li><strong>默认查找顺序</strong>： <ol><li>优先查找大写的<code>Makefile</code>文件</li><li>其次查找小写的<code>makefile</code>文件</li></ol></li><li><strong>指定目标执行</strong>：<code>make target</code></li></ul><h2 id="makefile文件编写格式" tabindex="-1">Makefile文件编写格式 <a class="header-anchor" href="#makefile文件编写格式" aria-label="Permalink to &quot;Makefile文件编写格式&quot;">​</a></h2><h3 id="依赖关系定义" tabindex="-1">依赖关系定义 <a class="header-anchor" href="#依赖关系定义" aria-label="Permalink to &quot;依赖关系定义&quot;">​</a></h3><ul><li><strong>基本语法</strong>：<code>目标文件:依赖文件列表</code></li><li><strong>目标文件</strong>：需要生成的文件 <ul><li>可执行文件</li><li>.o目标文件</li><li>库文件</li></ul></li><li><strong>依赖文件</strong>：生成目标文件所需的文件 <ul><li>一般为<code>.cpp</code>源代码文件</li></ul></li></ul><h2 id="makefile变量定义" tabindex="-1">Makefile变量定义 <a class="header-anchor" href="#makefile变量定义" aria-label="Permalink to &quot;Makefile变量定义&quot;">​</a></h2><h3 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h3><ul><li><strong>定义语法</strong>：<code>变量名 赋值符号 值</code></li><li><strong>变量特性</strong>： <ul><li>没有数据类型</li><li>一般作为字符串使用</li></ul></li></ul><h2 id="makefile赋值方式" tabindex="-1">Makefile赋值方式 <a class="header-anchor" href="#makefile赋值方式" aria-label="Permalink to &quot;Makefile赋值方式&quot;">​</a></h2><h3 id="就地赋值-简单赋值" tabindex="-1">就地赋值（简单赋值） <a class="header-anchor" href="#就地赋值-简单赋值" aria-label="Permalink to &quot;就地赋值（简单赋值）&quot;">​</a></h3><ul><li><strong>语法</strong>：<code>变量名:=值</code></li><li><strong>示例</strong>：<div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VALUE:=&quot;ABCDEF&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="递归赋值-向后展开赋值" tabindex="-1">递归赋值（向后展开赋值） <a class="header-anchor" href="#递归赋值-向后展开赋值" aria-label="Permalink to &quot;递归赋值（向后展开赋值）&quot;">​</a></h3><ul><li><strong>语法</strong>：<code>变量名=值</code></li><li><strong>示例</strong>：<div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">B</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 将B的值赋给A</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">B:=&quot;123&quot; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 此时A和B的值均为&quot;123&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="追加赋值" tabindex="-1">追加赋值 <a class="header-anchor" href="#追加赋值" aria-label="Permalink to &quot;追加赋值&quot;">​</a></h3><ul><li><strong>语法</strong>：<code>变量名+=值1 值2 值3 ...</code></li><li><strong>示例</strong>：<div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A+=1 2 3 4 5 6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等价于A包含&quot;1 2 3 4 5 6&quot;的集合</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="条件赋值" tabindex="-1">条件赋值 <a class="header-anchor" href="#条件赋值" aria-label="Permalink to &quot;条件赋值&quot;">​</a></h3><ul><li><strong>语法</strong>：<code>变量名?=值</code></li><li><strong>赋值条件</strong>：变量未被定义或未被赋值时进行赋值</li><li><strong>示例</strong>：<div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A?=123  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 仅当A未定义时赋值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="变量引用" tabindex="-1">变量引用 <a class="header-anchor" href="#变量引用" aria-label="Permalink to &quot;变量引用&quot;">​</a></h2><ul><li><strong>语法</strong>：<code>$(变量名)</code></li><li><strong>示例</strong>：<div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VALUE:=10</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VALUE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 引用VALUE的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h2 id="自动变量" tabindex="-1">自动变量 <a class="header-anchor" href="#自动变量" aria-label="Permalink to &quot;自动变量&quot;">​</a></h2><table tabindex="0"><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>$*</code></td><td>不包含扩展名的目标文件名</td></tr><tr><td><code>$@</code></td><td>目标文件的完整名称</td></tr><tr><td><code>$+</code></td><td>所有依赖文件名（含重复，空格分隔）</td></tr><tr><td><code>$^</code></td><td>所有依赖文件名（不含重复，空格分隔）</td></tr><tr><td><code>$&lt;</code></td><td>第一个依赖文件名</td></tr><tr><td><code>$?</code></td><td>修改时间比目标文件晚的依赖文件（空格分隔）</td></tr></tbody></table><h2 id="makefile函数" tabindex="-1">Makefile函数 <a class="header-anchor" href="#makefile函数" aria-label="Permalink to &quot;Makefile函数&quot;">​</a></h2><h3 id="文件名展开函数-wildcard" tabindex="-1">文件名展开函数(wildcard) <a class="header-anchor" href="#文件名展开函数-wildcard" aria-label="Permalink to &quot;文件名展开函数(wildcard)&quot;">​</a></h3><ul><li><strong>功能</strong>：搜索指定路径下的特定文件</li><li><strong>参数数量</strong>：1个（文件名通配表达式）</li><li><strong>示例</strong>：<div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SOURCES +=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wildcard</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.cpp)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取当前目录下所有.cpp文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>注意事项</strong>： <ul><li>目录相对于Makefile文件</li><li>不会搜索子目录</li></ul></li></ul><h3 id="字符串替换函数-patsubst" tabindex="-1">字符串替换函数(patsubst) <a class="header-anchor" href="#字符串替换函数-patsubst" aria-label="Permalink to &quot;字符串替换函数(patsubst)&quot;">​</a></h3><ul><li><strong>功能</strong>：对字符串内容进行替换操作</li><li><strong>参数数量</strong>：3个 <ul><li>参数1：原有格式</li><li>参数2：替换格式</li><li>参数3：需要替换的字符串</li></ul></li><li><strong>示例</strong>：<div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OBJECT += </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">patsubst</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> %</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.cpp,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.o,$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SOURCES</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将所有.cpp结尾的文件名替换为.o结尾</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>注意事项</strong>： <ul><li><code>%</code>为通配符，仅作用于Makefile内部</li><li>不会实际改变文件名</li></ul></li></ul><h3 id="遍历列表函数-foreach" tabindex="-1">遍历列表函数(foreach) <a class="header-anchor" href="#遍历列表函数-foreach" aria-label="Permalink to &quot;遍历列表函数(foreach)&quot;">​</a></h3><ul><li><strong>功能</strong>：迭代空格分隔的列表内容</li><li><strong>参数数量</strong>：3个 <ul><li>参数1：当前元素变量名</li><li>参数2：列表</li><li>参数3：对当前元素的操作</li></ul></li><li><strong>示例</strong>：<div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OBJECTS += </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foreach</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename,$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SOURCES</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">),$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename:.cpp=.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="makefile编写规范" tabindex="-1">Makefile编写规范 <a class="header-anchor" href="#makefile编写规范" aria-label="Permalink to &quot;Makefile编写规范&quot;">​</a></h2><ol><li><p><strong>缩进规则</strong>：</p><ul><li>使用<code>Tab</code>缩进描述包含关系</li><li>指令顶格写（命令部分必须以Tab开头）</li></ul></li><li><p><strong>命名规范</strong>：</p><ul><li>变量名使用大写字母</li></ul></li><li><p><strong>文件规范</strong>：</p><ul><li>Makefile没有文件扩展名</li><li>可命名为<code>Makefile</code>或<code>makefile</code></li><li>优先执行大写的<code>Makefile</code>文件</li></ul></li><li><p><strong>特殊变量</strong>：</p><ul><li><code>gcc</code>被定义为<code>cc</code>变量</li></ul></li><li><p><strong>文件位置</strong>：</p><ul><li>Makefile必须放在工程目录下</li></ul></li></ol><h2 id="作业" tabindex="-1">作业 <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业&quot;">​</a></h2><p>编写适合个人工程的Makefile文件，用于编译后续工程代码</p>`,44)]))}const u=a(t,[["render",n]]);export{c as __pageData,u as default};
