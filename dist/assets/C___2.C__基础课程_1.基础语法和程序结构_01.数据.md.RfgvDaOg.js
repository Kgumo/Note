import{_ as i,c as t,o as a,a3 as l}from"./chunks/framework.CkaDlzKP.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/2.C++基础课程/1.基础语法和程序结构/01.数据.md","filePath":"C++/2.C++基础课程/1.基础语法和程序结构/01.数据.md","lastUpdated":1754900608000}'),n={name:"C++/2.C++基础课程/1.基础语法和程序结构/01.数据.md"};function e(d,s,o,r,h,p){return a(),t("div",null,s[0]||(s[0]=[l(`<h3 id="_1-数据与数据类型" tabindex="-1"><strong>1. 数据与数据类型</strong> <a class="header-anchor" href="#_1-数据与数据类型" aria-label="Permalink to &quot;**1. 数据与数据类型**&quot;">​</a></h3><h4 id="_1-1-数据类型" tabindex="-1"><strong>1.1 数据类型</strong> <a class="header-anchor" href="#_1-1-数据类型" aria-label="Permalink to &quot;**1.1 数据类型**&quot;">​</a></h4><ul><li><strong>定义</strong>：程序设计语言中变量的数据种类。</li><li><strong>作用</strong>： <ul><li>计算机：决定变量内存分配大小。</li><li>用户：明确数据含义。</li></ul></li><li><strong>C++数据类型分类</strong>： <ul><li><strong>基本类型</strong>：<table tabindex="0"><thead><tr><th>类型</th><th>说明</th><th>字节数</th><th>示例</th></tr></thead><tbody><tr><td><code>short</code></td><td>短整型</td><td>2</td><td><code>-100, 0</code></td></tr><tr><td><code>int</code></td><td>整型</td><td>4</td><td><code>1, -101</code></td></tr><tr><td><code>long</code></td><td>长整型（32位:4；64位:8）</td><td>4/8</td><td><code>100000L</code></td></tr><tr><td><code>float</code></td><td>单精度浮点型</td><td>4</td><td><code>1.1f, -2.3f</code></td></tr><tr><td><code>double</code></td><td>双精度浮点型</td><td>8</td><td><code>3.1415</code></td></tr><tr><td><code>char</code></td><td>字符型</td><td>1</td><td><code>&#39;a&#39;, &#39;\\n&#39;</code></td></tr><tr><td><code>bool</code></td><td>布尔型</td><td>1</td><td><code>true, false</code></td></tr></tbody></table></li><li><strong>构造类型</strong>：由基础类型组合而成（内存大小自定义） <ul><li>数组：同类型元素集合（<code>int arr[5];</code>）</li><li>结构体：不同类型元素集合（<code>struct {int id; char name;};</code>）</li><li>共用体：共用内存空间的不同类型元素</li><li>枚举：限定范围的值（<code>enum Color {RED, GREEN};</code>）</li></ul></li><li><strong>指针类型</strong>：存储内存地址（<code>int* p;</code>）</li><li><strong>空类型</strong>：<code>void</code>（用于函数返回值/指针）</li></ul></li></ul><hr><h4 id="_1-2-常量" tabindex="-1"><strong>1.2 常量</strong> <a class="header-anchor" href="#_1-2-常量" aria-label="Permalink to &quot;**1.2 常量**&quot;">​</a></h4><ul><li><strong>定义</strong>：程序运行中不可改变的量（如身份证号）。</li><li><strong>分类</strong>： <ul><li><strong>整型常量</strong>：<code>123, -5</code></li><li><strong>浮点型常量</strong>： <ul><li>单精度（<code>float</code>）：以 <code>f</code> 或 <code>F</code> 结尾（<code>1.11f</code>）</li><li>双精度（<code>double</code>）：默认类型（<code>3.14</code>）</li></ul></li><li><strong>字符常量</strong>：单引号包裹（<code>&#39;a&#39;</code>），转义字符除外（<code>&#39;\\n&#39;</code>）</li><li><strong>字符串常量</strong>：双引号包裹（<code>&quot;abc&quot;</code>）</li></ul></li><li><strong>输出方式</strong>： <ul><li><strong>C++</strong>：<code>std::cout &lt;&lt; 1 &lt;&lt; &#39;a&#39; &lt;&lt; &quot;abc&quot;;</code></li><li><strong>C语言</strong>：使用占位符（<code>printf(&quot;%d %c %s&quot;, 1, &#39;a&#39;, &quot;abc&quot;);</code>）<table tabindex="0"><thead><tr><th>类型</th><th>占位符</th><th>示例</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>%d</code></td><td><code>printf(&quot;%d&quot;, 1);</code></td></tr><tr><td><code>float</code></td><td><code>%f/%g</code></td><td><code>printf(&quot;%f&quot;, 1.1f);</code></td></tr><tr><td><code>double</code></td><td><code>%lf/%lg</code></td><td><code>printf(&quot;%lf&quot;, 1.1);</code></td></tr><tr><td><code>char</code></td><td><code>%c</code></td><td><code>printf(&quot;%c&quot;, &#39;a&#39;);</code></td></tr><tr><td>字符串</td><td><code>%s</code></td><td><code>printf(&quot;%s&quot;, &quot;abc&quot;);</code></td></tr></tbody></table></li></ul></li></ul><hr><h4 id="_1-3-变量" tabindex="-1"><strong>1.3 变量</strong> <a class="header-anchor" href="#_1-3-变量" aria-label="Permalink to &quot;**1.3 变量**&quot;">​</a></h4><ul><li><strong>定义</strong>：程序运行中可改变的量。</li><li><strong>标识符规则</strong>： <ol><li>由字母、数字、下划线组成，首字符非数字。</li><li>区分大小写（<code>Fun ≠ fun</code>）。</li><li>不可为关键字（如 <code>int, return</code>）。</li></ol></li><li><strong>命名规范</strong>： <ul><li>望文生义（如 <code>studentAge</code>）。</li><li>驼峰命名（如 <code>fuseName</code>）。</li></ul></li><li><strong>变量定义</strong>：<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 格式1：声明单变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b, c;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 格式2：声明同类型多变量（不推荐）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>初始化</strong>：<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 定义时初始化（推荐）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x; x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 先定义后赋值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>未初始化风险</strong>：内存中为随机值（“垃圾数据”）。</li></ul></li><li><strong>输入输出</strong>： <ul><li><strong>C++</strong>：<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 输入</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 输出</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>C语言</strong>：<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 输入（需取地址符&amp;）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 输出</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>缓冲区问题</strong>： <ul><li>输入空格会截断（<code>123 456</code> → 只读<code>123</code>）。</li><li>清空缓冲区方法：<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setbuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stdin, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 通用方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%*[^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%*c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 正则表达式清空</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ul></li></ul><hr><h4 id="_1-4-常变量" tabindex="-1"><strong>1.4 常变量</strong> <a class="header-anchor" href="#_1-4-常变量" aria-label="Permalink to &quot;**1.4 常变量**&quot;">​</a></h4><ul><li>用 <code>const</code> 修饰，初始化后不可修改：<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 错误！常变量不可重新赋值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><hr><h4 id="_1-5-注释与代码规范" tabindex="-1"><strong>1.5 注释与代码规范</strong> <a class="header-anchor" href="#_1-5-注释与代码规范" aria-label="Permalink to &quot;**1.5 注释与代码规范**&quot;">​</a></h4><ul><li><strong>注释类型</strong>： <ul><li>单行：<code>// 解释文本</code></li><li>多行：<code>/* 注释内容 */</code></li></ul></li><li><strong>嵌套规则</strong>： <ul><li>单行可嵌套多行注释：<code>// /* 示例 */</code></li><li>多行<strong>不可</strong>嵌套多行：<code>/* /* 错误 */ */</code></li></ul></li><li><strong>代码规范</strong>： <ol><li>一行一条语句。</li><li>同级代码对齐。</li><li>运算符两侧加空格（<code>a = b + c;</code>）。</li></ol></li></ul>`,15)]))}const g=i(n,[["render",e]]);export{k as __pageData,g as default};
