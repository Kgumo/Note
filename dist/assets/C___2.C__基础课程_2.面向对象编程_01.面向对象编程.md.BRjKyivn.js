import{_ as i,c as l,o as s,a3 as e}from"./chunks/framework.C3IOjdSt.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/2.C++基础课程/2.面向对象编程/01.面向对象编程.md","filePath":"C++/2.C++基础课程/2.面向对象编程/01.面向对象编程.md","lastUpdated":1754900608000}'),n={name:"C++/2.C++基础课程/2.面向对象编程/01.面向对象编程.md"};function r(t,a,h,o,p,d){return s(),l("div",null,a[0]||(a[0]=[e(`<h3 id="面向对象编程" tabindex="-1">面向对象编程 <a class="header-anchor" href="#面向对象编程" aria-label="Permalink to &quot;面向对象编程&quot;">​</a></h3><h4 id="课程目标" tabindex="-1">课程目标 <a class="header-anchor" href="#课程目标" aria-label="Permalink to &quot;课程目标&quot;">​</a></h4><ul><li>面向对象编程</li><li>面向对象编程注意事项</li></ul><h4 id="面向过程" tabindex="-1">面向过程 <a class="header-anchor" href="#面向过程" aria-label="Permalink to &quot;面向过程&quot;">​</a></h4><ul><li>主函数</li><li>调用1</li><li>调用2</li><li>调用3</li><li>面向过程</li></ul><h5 id="面向过程程序设计思路" tabindex="-1">面向过程程序设计思路 <a class="header-anchor" href="#面向过程程序设计思路" aria-label="Permalink to &quot;面向过程程序设计思路&quot;">​</a></h5><ul><li>提出问题</li><li>分析问题的处理流程</li><li>将大问题分解为小问题 <ul><li>如果小问题比较复杂，就继续划分小问题为更小的问题</li></ul></li><li>然后通过小模块——解决小问题</li><li>最后再根据整个业务流程将这些小问题串在一起（调用函数）</li></ul><h4 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h4><ul><li>对象1 <ul><li>属性</li><li>行为</li></ul></li><li>方法</li><li>对象2 <ul><li>属性</li><li>行为</li></ul></li><li>面向对象</li></ul><h5 id="面向对象程序设计思路" tabindex="-1">面向对象程序设计思路 <a class="header-anchor" href="#面向对象程序设计思路" aria-label="Permalink to &quot;面向对象程序设计思路&quot;">​</a></h5><p>面向对象会把事物抽象成对象的概念，先抽象出对象，然后给对象赋一些属性和方法，然后让每个对象去执行自己的方法。</p><h4 id="面向过程的优缺点" tabindex="-1">面向过程的优缺点 <a class="header-anchor" href="#面向过程的优缺点" aria-label="Permalink to &quot;面向过程的优缺点&quot;">​</a></h4><p><strong>优点：</strong><br> 流程化使得编程任务明确，在开发之前基本考虑了实现方式和最终结果，具体步骤清楚，便于节点分析。<br> 效率高，面向过程强调代码的短小精悍，善于结合数据结构来开发高效率的程序。</p><p><strong>缺点：</strong><br> 耦合度高，扩展性差，后期维护难度比较大。</p><h4 id="面向对象的优缺点" tabindex="-1">面向对象的优缺点 <a class="header-anchor" href="#面向对象的优缺点" aria-label="Permalink to &quot;面向对象的优缺点&quot;">​</a></h4><p><strong>优点：</strong><br> 结构清晰，程序是模块化和结构化，更加符合人类的思维方式；<br> 易扩展，代码重用率高，可继承，可覆盖，可以设计出低耦合的系统；<br> 易维护，系统低耦合的特点有利于减少程序的后期维护工作量。</p><p><strong>缺点：</strong><br> 开销大，程序显得臃肿。<br> 性能低，因为创建对象和销毁对象都需要损耗一定的性能。</p><h4 id="面向对象三大特征" tabindex="-1">面向对象三大特征 <a class="header-anchor" href="#面向对象三大特征" aria-label="Permalink to &quot;面向对象三大特征&quot;">​</a></h4><ol><li>封装</li><li>继承</li><li>多态</li></ol><h4 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h4><p>万物皆对象。任何事物都可以看做对象。</p><h5 id="描述对象" tabindex="-1">描述对象 <a class="header-anchor" href="#描述对象" aria-label="Permalink to &quot;描述对象&quot;">​</a></h5><p>类似于结构体变量，通过对象的属性（名词,数量词,形容词...）和行为（动词）来描述对象。<br> 任何对象都属于一个类型。<br> 有物体,东西的意思,现实世界中,一切都是对象（是一个具体存在的实体）。<br> 任何对象都有属性和行为。</p><h4 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h4><p>类是将多个对象的共性提取出来定义的新的数据类型,是对对象属性和行为的抽象描述。类似于结构体类型。<br> 类和对象的关系是抽象和实例化的关系。</p><h5 id="类的定义" tabindex="-1">类的定义 <a class="header-anchor" href="#类的定义" aria-label="Permalink to &quot;类的定义&quot;">​</a></h5><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 类名  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">访问控制属性：  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //行为：用成员函数表示  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    返回类型 函数名(形参表);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //成员函数  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //属性：用成员变量表示  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    数据类型 变量名;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //成员变量  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="访问控制属性" tabindex="-1">访问控制属性 <a class="header-anchor" href="#访问控制属性" aria-label="Permalink to &quot;访问控制属性&quot;">​</a></h4><ul><li><strong>public</strong>: 公有成员, 类的内部和外部都可以访问的成员</li><li><strong>protected</strong>: 表示该下面的数据成员、成员函数受保护权限，在类内可以访问，类外只有子类可以访问</li><li><strong>private</strong>: 私有成员, 只有在类的内部才可以访问的成员</li></ul><p>使用 <code>class</code> 定义的类默认的访问控制属性是 <code>private</code>。</p><h4 id="类的大小" tabindex="-1">类的大小 <a class="header-anchor" href="#类的大小" aria-label="Permalink to &quot;类的大小&quot;">​</a></h4><p>在类中，只有成员变量占用内存空间，而成员函数是不占用内存空间的。<br> 类占用的内存空间永远是所有成员中占用内存最大成员的倍数（对齐问题）。<br> 空类的大小为1。</p><h4 id="类的实例化" tabindex="-1">类的实例化 <a class="header-anchor" href="#类的实例化" aria-label="Permalink to &quot;类的实例化&quot;">​</a></h4><p>用类似对象的过程叫做实例化。与结构体变量定义相似。</p><h4 id="类内成员访问" tabindex="-1">类内成员访问 <a class="header-anchor" href="#类内成员访问" aria-label="Permalink to &quot;类内成员访问&quot;">​</a></h4><p>与结构体变量访问结构体成员一样通过 <code>.</code> 来访问。</p><h4 id="this指针" tabindex="-1">this指针 <a class="header-anchor" href="#this指针" aria-label="Permalink to &quot;this指针&quot;">​</a></h4><p><strong>定义：</strong><br> 类的内部都隐藏一个该类类型的指针参数,名为 <code>this</code>，可以帮助我们区分类内成员和其他参数。</p><h4 id="面向对象编程的注意事项" tabindex="-1">面向对象编程的注意事项 <a class="header-anchor" href="#面向对象编程的注意事项" aria-label="Permalink to &quot;面向对象编程的注意事项&quot;">​</a></h4><ol><li><p>要确定所设计的类，那些属性和行为是对外公开的，哪些是隐藏的。</p></li><li><p>要符合高内聚，低耦合的设计思想。</p></li><li><p>在定义类的时候,所有的 <code>class</code> 都可以被替换为 <code>struct</code>，代码不会出错。</p></li><li><p>在写类的时候，一般一个标准的类都分为两个文件（<code>.h</code>/<code>.cpp</code>）：</p><ul><li>在头文件中声明类型和函数</li><li>在源文件中实现函数</li></ul></li><li><p>只读成员函数（常函数）：</p><ul><li>表示这个成员函数是只读成员函数，只能读取成员变量的值，保证不修改成员变量的值。</li><li>成员函数的常版本与非常版本可构成有效重载，常对象调用常版本，非常对象调用非常版本。</li></ul></li></ol>`,40)]))}const b=i(n,[["render",r]]);export{u as __pageData,b as default};
