import{_ as s,c as e,o as t,a4 as l}from"./chunks/framework.BQlL4Ck5.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/4.C++研修阶段/第2节QT图形库/2.QT-元对象系统.md","filePath":"C++/4.C++研修阶段/第2节QT图形库/2.QT-元对象系统.md","lastUpdated":1754871536000}'),a={name:"C++/4.C++研修阶段/第2节QT图形库/2.QT-元对象系统.md"};function n(o,i,c,d,r,p){return t(),e("div",null,i[0]||(i[0]=[l(`<h3 id="qt核心" tabindex="-1">Qt核心 <a class="header-anchor" href="#qt核心" aria-label="Permalink to &quot;Qt核心&quot;">​</a></h3><p>Qt框架的核心可以大致分为以下两个部分：</p><p><strong>Qt的核心特性：</strong></p><ul><li>元对象系统</li><li>信号与槽</li><li>对象树</li><li>事件系统</li></ul><p><strong>Qt的核心模块：</strong></p><ul><li><strong>Qt Core：</strong><ul><li>提供了基本的非GUI功能，包括字符串处理、文件和目录操作、事件处理、多线程支持、定时器等。</li></ul></li><li><strong>Qt GUI：</strong><ul><li>用于创建丰富的图形用户界面，提供了窗口、布局、绘图、事件处理、输入处理等基本的图形界面功能。</li></ul></li><li><strong>Qt Widgets：</strong><ul><li>提供了一套丰富的用户界面控件，如按钮、文本框、列表框、表格、菜单等，可以用于构建传统的桌面应用程序。</li></ul></li><li><strong>Qt Network：</strong><ul><li>提供了网络编程相关的类和功能，包括HTTP、TCP、UDP、FTP等协议的支持，可以进行网络通信和数据传输。</li></ul></li><li><strong>Qt SQL：</strong><ul><li>提供了数据库访问的API，支持主流的关系型数据库，如MySQL、sqlite、Postgresql等。</li></ul></li><li><strong>Qt Multimedia：</strong><ul><li>用于处理多媒体内容，包括音频、视频的播放和录制，支持多种格式和编解码器。</li></ul></li><li><strong>Qt Quick：</strong><ul><li>提供了一种声明性的语言（QML）和相应的C++ API，用于创建现代化的用户界面，支持动画、效果、多点触摸等。</li></ul></li><li><strong>Qt QML（Qt Meta-Object Language）：</strong><ul><li>一种基于声明性语法的编程语言，用于构建跨平台的用户界面。是Qt框架的一部分，开发富有交互性和动态性的应用程序界面。</li></ul></li><li><strong>Qt WebEngine：</strong><ul><li>基于Chromium的Web引擎，用于在应用程序中嵌入Web内容，支持HTML5、CSS、JavaScript等。</li></ul></li><li><strong>Qt XML：</strong><ul><li>提供了XML解析和生成的功能，用于处理和操作XML格式的数据。</li></ul></li><li><strong>Qt Bluetooth：</strong><ul><li>提供了蓝牙通信的功能，可以在应用程序中实现蓝牙设备的连接和数据交互。</li></ul></li><li><strong>Qt Concurrent：</strong><ul><li>提供了一套用于并行编程的工具和类。它简化了多线程和并行任务的处理，使开发者能够更轻松地编写并行代码。</li></ul></li><li><strong>QT OpenGL：</strong><ul><li>提供了在应用程序中使用OpenGL和OpenGL ES进行3D图形渲染的功能。它允许开发者在Qt应用程序中创建和显示OpenGL场景，以及与图形进行交互。</li></ul></li><li><strong>QT Test：</strong><ul><li>提供了单元测试框架和模拟鼠标和键盘事件的功能。它可以帮助开发者编写和执行单元测试，以确保代码的正确性和稳定性。此外，Qt Test还提供了与Visual Studio和KDevelop等集成开发环境的整合支持。</li></ul></li></ul><hr><h3 id="元对象系统" tabindex="-1">元对象系统 <a class="header-anchor" href="#元对象系统" aria-label="Permalink to &quot;元对象系统&quot;">​</a></h3><h4 id="元对象系统基本概念" tabindex="-1">元对象系统基本概念 <a class="header-anchor" href="#元对象系统基本概念" aria-label="Permalink to &quot;元对象系统基本概念&quot;">​</a></h4><p>元对象系统是QT对原有C++的一些扩展，主要是为实现信号和槽机制运行时类型信息和动态属性系统等而引入的，信号与槽的机制是QT的核心机制。</p><p><strong>使用元对象系统的功能的三个条件：</strong></p><ul><li>该类必须继承自 <code>QObject</code> 类。</li><li>必须在类声明的私有区域添加 <code>Q_OBJECT</code> 宏，该宏用于启动元对象特性，然后便可使用动态特性、信号和槽等功能了。</li><li>元对象编译器（moc）为每个 <code>Qobject</code> 的子类，提供实现了元对象特性所必须的代码。</li></ul><p>QT中的元对象系统 <code>Q_OBJECT</code> 并不是C++标准代码，因此在使用时需要QT的 MOC（元对象编译器）进行预处理。MOC 会在编译时读取C++代码中的特定宏（如 <code>Q_OBJECT</code>），再由标准的C++编译器进行重新编译。</p><h4 id="moc工具" tabindex="-1">Moc工具 <a class="header-anchor" href="#moc工具" aria-label="Permalink to &quot;Moc工具&quot;">​</a></h4><p>Qt中有一个工具专门为包含 <code>Q_OBJECT</code> 宏的类来生成额外的元对象代码的。<br> 这个工具叫 <strong>moc</strong>（全称是 <strong>Meta-Object Compiler</strong>，元对象编译器），它是一个工具类似于 qmake。<br> 该工具读取并分析 C++源文件，若发现一个或多个包含了 <code>Q_OBJECT</code> 宏的类的声明，则会生成另外一个包含了 <code>Q_OBJECT</code> 宏实现代码的 C++源文件（该源文件通常名称为 <code>moc_*.cpp</code>）。<br> 这个新的源文件要么被<code>#include</code>包含到类的源文件中，要么被编译链接到类的实现中（通常是使用的此种方法）。<br> 这个源文件中包含了用于存储信号和槽函数指针的结构、实现信号发射和槽调用的函数等内容。</p><p><strong>注意：新文件不会“替换”掉旧的文件，而是与原文件一起编译。</strong></p><h4 id="元对象" tabindex="-1">元对象 <a class="header-anchor" href="#元对象" aria-label="Permalink to &quot;元对象&quot;">​</a></h4><p>元对象是指用于描述另一个对象结构的对象。使用编程语言具体实现时，其实就是一个类的对象，只不过这个对象专门用于描述另一个对象而已。比如一个学生类描述一个学生，而学生档案对象来描述学生的信息。</p><h4 id="q-object-宏" tabindex="-1">Q_OBJECT 宏 <a class="header-anchor" href="#q-object-宏" aria-label="Permalink to &quot;Q_OBJECT 宏&quot;">​</a></h4><p><code>Q_OBJECT</code> 的使用：必须要在类中定义元对象系统 <code>Q_OBJECT</code> 宏才能使用（在类定义时，如果没有指定 public 或者 private，则默认为 private(私有)）。<br> 程序运行时，moc会扫描此类，并生成元对象信息，包括但不限于类名、父类、属性、信号、槽函数等。</p><p><code>Q_OBJECT</code> 的特性：</p><ul><li><strong>类型信息</strong>：Qt使用元对象系统来存储关于对象的信息，如类名和父类。</li><li><strong>属性系统</strong>：支持动态的属性机制，允许在运行时查询和修改对象的属性。</li><li><strong>信号和槽的动态连接</strong>：元对象系统允许在运行时创建和解除信号与槽之间的连接。 <ul><li>例如：<code>setProperty</code> 设置注册的动态属性。</li></ul></li></ul><hr><h3 id="反射机制" tabindex="-1">反射机制 <a class="header-anchor" href="#反射机制" aria-label="Permalink to &quot;反射机制&quot;">​</a></h3><p><strong>Reflection 模式（反射模式或反射机制）</strong>：是指在运行时，能获取任意一个类对象的所有类型信息、属性、成员函数等信息的一种机制。</p><h4 id="qt-具体实现反射机制的方法" tabindex="-1">Qt 具体实现反射机制的方法 <a class="header-anchor" href="#qt-具体实现反射机制的方法" aria-label="Permalink to &quot;Qt 具体实现反射机制的方法&quot;">​</a></h4><p><strong><code>QMetaObject</code></strong>：类描述了 <code>qobject</code> 及其派生类对象的所有元信息，该类是 Qt 元对象系统的核心类，因此可以说 <code>QMetaObject</code> 类的对象是 Qt 中的元对象。<br> 例如：获取成员函数的函数名：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QMetaMethod qm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> metaobject-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //获取索引为 1 的成员函数  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">qDebug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //输出该成员函数的名称。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="使用-qt-反射机制的条件" tabindex="-1">使用 Qt 反射机制的条件 <a class="header-anchor" href="#使用-qt-反射机制的条件" aria-label="Permalink to &quot;使用 Qt 反射机制的条件&quot;">​</a></h4><ul><li>需要继承自 <code>QObject</code> 类，并需要在类之中加入 <strong><code>Q_OBJECT</code></strong> 宏。</li><li>注册成员函数：若希望普通成员函数能够被反射，需要在函数声明之前加入 <strong><code>Q_INVOKABLE</code></strong> 宏。</li><li>注册成员变量：若希望成员变量能被反射，需要使用 <strong><code>Q_PROPERTY</code></strong> 宏。</li></ul><p><strong>注册成员函数/变量：</strong></p><ul><li>函数声明之前加入 <strong><code>Q_INVOKABLE</code></strong> 宏。</li><li>变量声明之前加入 <strong><code>Q_PROPERTY</code></strong> 宏。</li></ul><p><strong><code>Q_PROPERTY</code> 宏语法：</strong></p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Q_PROPERTY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type name  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    READ getter  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    WRITE setter  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    NOTIFY signal  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RESET resetFunction  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    STORED </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DESIGNABLE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SCRIPTABLE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="qt-反射机制实现原理" tabindex="-1">Qt 反射机制实现原理 <a class="header-anchor" href="#qt-反射机制实现原理" aria-label="Permalink to &quot;Qt 反射机制实现原理&quot;">​</a></h4><p><code>Q_OBJECT</code> 宏展开之后有一个虚成员函数 <code>meteObject()</code>，该函数会返回一个指向 <code>QMetaObject</code> 类型的指针。<br> Qt 的 <code>moc</code> 会完成以下工作：</p><ul><li>为 <code>Q_OBJECT</code> 宏展开后所声明的成员函数的生成实现代码。</li><li>识别 Qt 中特殊的关键字及宏，比如识别出 <code>Q_PROPERTY</code> 宏、<code>Q_INVOKABLE</code> 宏、<code>slot</code>、<code>signals</code> 等。</li></ul><h4 id="qobject-cast-函数" tabindex="-1">qobject_cast 函数 <a class="header-anchor" href="#qobject-cast-函数" aria-label="Permalink to &quot;qobject_cast 函数&quot;">​</a></h4><p>该函数类似于 C++ 中的 <code>dynamic_cast</code>，但执行速度比 <code>dynamic_cast</code> 更快，且不需要 C++ 的 <code>RTTI</code> 的支持，但 <code>qobject_cast</code> 仅适用于 <code>qobject</code> 及其派生类。<br> 主要作用是把源类型 <code>qobject</code> 转换为父括号中的目标类型 <code>DesType</code>（或其子类型），并返回指向目标类型的指针，若转换失败，则返回 <code>0</code>。</p><p><strong>语法：</strong></p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DestType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> qobject_cast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DestType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(qobject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>使用条件：</strong><br> 目标类型 <code>DestType</code> 必须继承（直接或间接）自 <code>qobject</code>，并使用 <strong><code>Q_OBJECT</code></strong> 宏。</p><hr><h3 id="qmetaobject-类" tabindex="-1">QMetaObject 类 <a class="header-anchor" href="#qmetaobject-类" aria-label="Permalink to &quot;QMetaObject 类&quot;">​</a></h3><p><code>QMetaObject</code> 类：描述一个对象的元信息。</p><p><strong>关键方法：</strong></p><ul><li><code>int indexOfMethod(const char *method) const;</code><ul><li>获取一个成员函数，成功返回函数的索引号，否则返回 <code>-1</code>。</li><li>例如：<div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOfMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;f(int,int)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 错误形式：&quot;f(int a, int b)&quot;、&quot;void f(int, int)&quot;、&quot;f&quot;、&quot;void f&quot;等。  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul></li><li><code>int indexOfSignal(const char * s) const;</code><ul><li>返回信号 <code>s</code> 的索引号，否则返回 <code>-1</code>；若指定的函数存在但不是信号，仍返回 <code>-1</code>。</li></ul></li><li><code>int indexOfConstructor(const char *c) const;</code><ul><li>返回构造函数 <code>c</code> 的索引号，否则返回 <code>-1</code>。</li></ul></li><li><code>int constructorCount() const;</code><ul><li>返回构造函数的数量。</li></ul></li><li><code>int methodCount(int i) const;</code><ul><li>返回函数的数量（包括基类中的函数、信号、槽和普通成员函数）。</li></ul></li><li><code>QMetaMethod constructor(int i) const;</code><ul><li>返回指定索引 <code>i</code> 处的构造函数的元数据。</li></ul></li><li><code>int methodOffset() const;</code><ul><li>返回父类中的所有函数的总和（即该类中第一个成员函数的索引位置）。</li></ul></li><li><code>QMetaMethod method(int i) const;</code><ul><li>返回指定索引 <code>i</code> 处的函数的元数据。</li></ul></li><li><code>const char* className() const;</code><ul><li>获取类的名称。</li></ul></li><li><code>const QMetaObject* superClass() const;</code><ul><li>返回父类的元对象；若无则返回 <code>0</code>。</li></ul></li><li><code>bool inherits(const QMetaObject* mo) const;</code><ul><li>若该类继承自描述的类型，则返回 <code>true</code>（类被认为继承自身）。</li></ul></li></ul><hr><h3 id="qmetamethod-类" tabindex="-1">QMetaMethod 类 <a class="header-anchor" href="#qmetamethod-类" aria-label="Permalink to &quot;QMetaMethod 类&quot;">​</a></h3><p><code>QMetaMethod</code> 类：在 Qt 的反射机制中用于描述类的成员方法的元信息。</p><p><strong>枚举类型：</strong></p><ul><li><code>enum MethodType { Method, Signal, Slot, Constructor }</code><ul><li>描述函数类型：普通成员函数（<code>Method</code>）、信号（<code>Signal</code>）、槽（<code>Slot</code>）、构造函数（<code>Constructor</code>）。</li></ul></li><li><code>enum Access { Private, Protected, Public }</code><ul><li>描述函数访问级别：私有（<code>Private</code>）、受保护（<code>Protected</code>）、公有（<code>Public</code>）。</li></ul></li></ul><p><strong>关键方法：</strong></p><ul><li><code>QByteArray methodsignature() const;</code><ul><li>返回函数的签名（例如 <code>&quot;f(int,int)&quot;</code>）。</li></ul></li><li><code>MethodType methodType() const;</code><ul><li>返回函数的类型（信号、槽、成员函数、构造函数）。</li></ul></li><li><code>int parameterCount() const</code><ul><li>返回函数的参数数量。</li></ul></li><li><code>QList&lt;QByteArray&gt; parameterNames() const;</code><ul><li>返回函数参数名称的列表。</li></ul></li><li><code>QByteArray parameterType() const;</code><ul><li>获取第一个参数的类型。</li></ul></li><li><code>Access access() const;</code><ul><li>返回函数的访问级别（私有、受保护、公有）。</li></ul></li><li><code>const char * typeName() const;</code><ul><li>返回函数的返回类型的名称。</li></ul></li></ul><hr><h3 id="作业" tabindex="-1">作业 <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业&quot;">​</a></h3><p>创建一个对象，将成员变量和函数注册反射机制，利用元素对象系统，获取对象元信息。</p>`,57)]))}const u=s(a,[["render",n]]);export{k as __pageData,u as default};
