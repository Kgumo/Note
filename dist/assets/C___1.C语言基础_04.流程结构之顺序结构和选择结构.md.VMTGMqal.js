import{_ as o,c as r,o as l,a4 as t}from"./chunks/framework.BQlL4Ck5.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/1.C语言基础/04.流程结构之顺序结构和选择结构.md","filePath":"C++/1.C语言基础/04.流程结构之顺序结构和选择结构.md","lastUpdated":1754871536000}'),i={name:"C++/1.C语言基础/04.流程结构之顺序结构和选择结构.md"};function s(a,e,n,c,p,d){return l(),r("div",null,e[0]||(e[0]=[t('<h3 id="_1-顺序结构" tabindex="-1"><strong>1. 顺序结构</strong> <a class="header-anchor" href="#_1-顺序结构" aria-label="Permalink to &quot;**1. 顺序结构**&quot;">​</a></h3><p>顺序结构是程序中最基本的执行方式，代码按照从上到下的顺序依次执行。</p><h4 id="_1-1-示例" tabindex="-1"><strong>1.1 示例</strong> <a class="header-anchor" href="#_1-1-示例" aria-label="Permalink to &quot;**1.1 示例**&quot;">​</a></h4><p>int a = 10;<br>  int b = 20;<br>  int sum = a + b;<br>  printf(&quot;sum = %d\\n&quot;, sum); // 输出：30</p><hr><h3 id="_2-选择结构" tabindex="-1"><strong>2. 选择结构</strong> <a class="header-anchor" href="#_2-选择结构" aria-label="Permalink to &quot;**2. 选择结构**&quot;">​</a></h3><p>选择结构用于根据条件执行不同的代码块，主要包括 <code>if</code>、<code>if...else</code>、<code>if...else if...else</code> 和 <code>switch</code> 语句。</p><h4 id="_2-1-if-语句" tabindex="-1"><strong>2.1 <code>if</code> 语句</strong> <a class="header-anchor" href="#_2-1-if-语句" aria-label="Permalink to &quot;**2.1 `if` 语句**&quot;">​</a></h4><ul><li><p><strong>语法</strong>：</p><p>if (表达式) {<br>      语句块1;<br>  }</p></li><li><p><strong>执行规则</strong>：</p><ul><li>如果 <code>表达式</code> 为真，则执行 <code>语句块1</code>；否则不执行。</li></ul></li><li><p><strong>示例</strong>：</p><p>int score = 50;<br>  if (score &lt; 60) {<br>      printf(&quot;你小子期末挂科啦\\n&quot;);<br>  }</p></li></ul><h4 id="_2-2-if-else-语句" tabindex="-1"><strong>2.2 <code>if...else</code> 语句</strong> <a class="header-anchor" href="#_2-2-if-else-语句" aria-label="Permalink to &quot;**2.2 `if...else` 语句**&quot;">​</a></h4><ul><li><p><strong>语法</strong>：</p><p>if (表达式) {<br>      语句块1;<br>  } else {<br>      语句块2;<br>  }</p></li><li><p><strong>执行规则</strong>：</p><ul><li>如果 <code>表达式</code> 为真，则执行 <code>语句块1</code>；否则执行 <code>语句块2</code>。</li></ul></li><li><p><strong>注意</strong>：</p><ul><li><code>else</code> 不能脱离 <code>if</code> 单独使用。</li></ul></li><li><p><strong>示例</strong>：</p><p>int score = 70;<br>  if (score &lt; 60) {<br>      printf(&quot;你小子期末挂科啦\\n&quot;);<br>  } else {<br>      printf(&quot;你小子可以啊，这都没挂\\n&quot;);<br>  }</p></li></ul><h4 id="_2-3-if-else-if-else-语句" tabindex="-1"><strong>2.3 <code>if...else if...else</code> 语句</strong> <a class="header-anchor" href="#_2-3-if-else-if-else-语句" aria-label="Permalink to &quot;**2.3 `if...else if...else` 语句**&quot;">​</a></h4><ul><li><p><strong>语法</strong>：</p><p>if (表达式1) {<br>      语句块1;<br>  } else if (表达式2) {<br>      语句块2;<br>  } else if (表达式3) {<br>      语句块3;<br>  } else {<br>      语句块4;<br>  }</p></li><li><p><strong>执行规则</strong>：</p><ol><li><p>如果 <code>表达式1</code> 为真，则执行 <code>语句块1</code>。</p></li><li><p>如果 <code>表达式1</code> 为假，则判断 <code>表达式2</code>，如果为真，则执行 <code>语句块2</code>。</p></li><li><p>如果 <code>表达式2</code> 也为假，则判断 <code>表达式3</code>，如果为真，则执行 <code>语句块3</code>。</p></li><li><p>如果所有表达式都为假，则执行 <code>else</code> 中的 <code>语句块4</code>。</p></li></ol></li><li><p><strong>注意</strong>：</p><ul><li><p>众多大括号中，只有一个大括号中的内容会被执行。</p></li><li><p>只有前面所有条件都不满足，才会执行 <code>else</code> 中的内容。</p></li></ul></li><li><p><strong>示例</strong>：</p><p>int score = 85;<br>  if (score &gt;= 90) {<br>      printf(&quot;优秀\\n&quot;);<br>  } else if (score &gt;= 60) {<br>      printf(&quot;及格\\n&quot;);<br>  } else {<br>      printf(&quot;不及格\\n&quot;);<br>  }</p></li></ul><h4 id="_2-4-switch-语句" tabindex="-1"><strong>2.4 <code>switch</code> 语句</strong> <a class="header-anchor" href="#_2-4-switch-语句" aria-label="Permalink to &quot;**2.4 `switch` 语句**&quot;">​</a></h4><ul><li><p><strong>语法</strong>：</p><p>switch (表达式) {<br>      case 常量1:<br>          语句块1;<br>          break;<br>      case 常量2:<br>          语句块2;<br>          break;<br>      default:<br>          语句块3;<br>          break;<br>  }</p></li><li><p><strong>执行规则</strong>：</p><ul><li><p><code>表达式</code> 的值会与每个 <code>case</code> 后的常量进行比较，匹配成功则执行对应的语句块。</p></li><li><p>如果没有任何 <code>case</code> 匹配成功，则执行 <code>default</code> 中的语句块。</p></li></ul></li><li><p><strong>注意</strong>：</p><ul><li><p><code>case</code> 后只能跟整型常量（包括 <code>char</code>，因为 <code>char</code> 本质上是 1 字节的整型）。</p></li><li><p>如果没有 <code>break</code>，程序会继续执行后续的 <code>case</code> 语句，直到遇到 <code>break</code> 或 <code>switch</code> 结束。</p></li></ul></li><li><p><strong>示例</strong>：</p><p>int num = 3;<br>  switch (num) {<br>      case 1:<br>          printf(&quot;星期一\\n&quot;);<br>          break;<br>      case 2:<br>          printf(&quot;星期二\\n&quot;);<br>          break;<br>      case 3:<br>          printf(&quot;星期三\\n&quot;);<br>          // 没有 break，继续执行<br>      case 4:<br>          printf(&quot;星期四\\n&quot;);<br>          // 没有 break，继续执行<br>      case 5:<br>          printf(&quot;星期五\\n&quot;);<br>          // 没有 break，继续执行<br>      case 6:<br>          printf(&quot;星期六\\n&quot;);<br>          break;<br>      case 7:<br>          printf(&quot;星期日\\n&quot;);<br>          break;<br>      default:<br>          printf(&quot;回火星去\\n&quot;);<br>          break;<br>  }</p><ul><li><p>输出：</p><p>星期三<br>  星期四<br>  星期五<br>  星期六</p></li></ul></li></ul><hr><h3 id="_3-数组和字符串" tabindex="-1"><strong>3. 数组和字符串</strong> <a class="header-anchor" href="#_3-数组和字符串" aria-label="Permalink to &quot;**3. 数组和字符串**&quot;">​</a></h3><h4 id="_3-1-数组" tabindex="-1"><strong>3.1 数组</strong> <a class="header-anchor" href="#_3-1-数组" aria-label="Permalink to &quot;**3.1 数组**&quot;">​</a></h4><ul><li><p><strong>定义</strong>：</p><ul><li>数组是相同类型元素的集合，存储在连续的内存空间中。</li></ul></li><li><p><strong>语法</strong>：</p><p>数据类型 数组名[数组长度];</p></li><li><p><strong>示例</strong>：</p><p>int arr[5] = {1, 2, 3, 4, 5}; // 定义一个长度为 5 的整型数组</p></li></ul><h4 id="_3-2-字符串" tabindex="-1"><strong>3.2 字符串</strong> <a class="header-anchor" href="#_3-2-字符串" aria-label="Permalink to &quot;**3.2 字符串**&quot;">​</a></h4><ul><li><p><strong>定义</strong>：</p><ul><li>字符串是字符数组，以 <code>\\0</code>（空字符）结尾。</li></ul></li><li><p><strong>语法</strong>：</p><p>char 字符串名[长度] = &quot;字符串内容&quot;;</p></li><li><p><strong>示例</strong>：</p><p>char str[10] = &quot;Hello&quot;; // 定义一个字符串</p></li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ol><li><p><strong>顺序结构</strong>：代码从上到下依次执行。</p></li><li><p><strong>选择结构</strong>：</p><ul><li><p><code>if</code>：单分支条件判断。</p></li><li><p><code>if...else</code>：双分支条件判断。</p></li><li><p><code>if...else if...else</code>：多分支条件判断。</p></li><li><p><code>switch</code>：多分支选择，适用于整型常量。</p></li></ul></li><li><p><strong>数组和字符串</strong>：</p><ul><li><p>数组是相同类型元素的集合。</p></li><li><p>字符串是字符数组，以 <code>\\0</code> 结尾。</p></li></ul></li></ol>',24)]))}const g=o(i,[["render",s]]);export{u as __pageData,g as default};
