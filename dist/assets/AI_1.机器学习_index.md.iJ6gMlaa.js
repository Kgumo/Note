import{_ as a,c as s,o as r,a3 as i}from"./chunks/framework.C8Xs1bna.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"AI/1.机器学习/index.md","filePath":"AI/1.机器学习/index.md","lastUpdated":1754900608000}'),n={name:"AI/1.机器学习/index.md"};function l(e,t,o,d,h,p){return r(),s("div",null,t[0]||(t[0]=[i(`<h2 id="机器学习核心框架" tabindex="-1">机器学习核心框架 <a class="header-anchor" href="#机器学习核心框架" aria-label="Permalink to &quot;机器学习核心框架&quot;">​</a></h2><h3 id="一、机器学习本质与定义" tabindex="-1"><strong>一、机器学习本质与定义</strong> <a class="header-anchor" href="#一、机器学习本质与定义" aria-label="Permalink to &quot;**一、机器学习本质与定义**&quot;">​</a></h3><h4 id="核心框架-tep" tabindex="-1"><strong>核心框架（TEP）</strong> <a class="header-anchor" href="#核心框架-tep" aria-label="Permalink to &quot;**核心框架（TEP）**&quot;">​</a></h4><ul><li><strong>任务（Task）</strong>：目标场景（如下棋、图像识别）</li><li><strong>经验（Experience）</strong>：训练数据（如历史棋局、标注数据集）</li><li><strong>性能（Performance）</strong>：评价指标（如胜率、准确率）</li></ul><blockquote><p><em>Tom Mitchell定义：系统通过经验在任务上提升性能</em></p></blockquote><h4 id="经典观点" tabindex="-1"><strong>经典观点</strong> <a class="header-anchor" href="#经典观点" aria-label="Permalink to &quot;**经典观点**&quot;">​</a></h4><ul><li><strong>Herbert Simon</strong>：学习是系统通过实践提升效率的过程</li><li><strong>Ryszard Michalski</strong>：学习是对经验表示方法的构造与修改</li></ul><hr><h3 id="二、机器学习系统设计五步法-以国际跳棋ai为例" tabindex="-1"><strong>二、机器学习系统设计五步法</strong>（以国际跳棋AI为例） <a class="header-anchor" href="#二、机器学习系统设计五步法-以国际跳棋ai为例" aria-label="Permalink to &quot;**二、机器学习系统设计五步法**（以国际跳棋AI为例）&quot;">​</a></h3><h4 id="_1-经验设计-训练数据的代表性与偏差" tabindex="-1"><strong>1. 经验设计：训练数据的代表性与偏差</strong> <a class="header-anchor" href="#_1-经验设计-训练数据的代表性与偏差" aria-label="Permalink to &quot;**1. 经验设计：训练数据的代表性与偏差**&quot;">​</a></h4><ul><li><strong>关键问题</strong>：经验能否反映真实场景？ <ul><li><em>案例1</em>：自动驾驶训练数据缺少雪天场景 → 实际路测失败</li><li><em>案例2</em>：IBM Watson误判“多伦多属美国城市”（训练数据缺乏地理歧义样本）</li></ul></li><li><strong>解决方案</strong>： <ul><li>数据多样性（如自动驾驶需覆盖雪地/山地/城市等场景）</li><li>平衡数据分布（避免月亮与香蕉分类器因样本偏差误判）</li></ul></li></ul><h4 id="_2-目标函数-定义学习目标" tabindex="-1"><strong>2. 目标函数：定义学习目标</strong> <a class="header-anchor" href="#_2-目标函数-定义学习目标" aria-label="Permalink to &quot;**2. 目标函数：定义学习目标**&quot;">​</a></h4><ul><li><p><strong>理想目标</strong>：完美价值函数 ( V(b) )（b=棋盘状态）</p><ul><li>( V(b)=100 )（胜），( V(b)=-100 )（败），( V(b)=0 )（平）</li></ul></li><li><p><strong>现实妥协</strong>：直接计算 ( V(b) ) 不可行 → 需近似假设 ( \\hat{V}(b) )</p><blockquote><p>例如：用后续最优状态 ( V(b&#39;) ) 逼近 ( V(b) )</p></blockquote></li></ul><h4 id="_3-假设表示-选择模型结构" tabindex="-1"><strong>3. 假设表示：选择模型结构</strong> <a class="header-anchor" href="#_3-假设表示-选择模型结构" aria-label="Permalink to &quot;**3. 假设表示：选择模型结构**&quot;">​</a></h4><ul><li><p><strong>可选表示方法</strong>：</p><table tabindex="0"><thead><tr><th><strong>类型</strong></th><th><strong>案例</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td>状态表</td><td>穷举所有棋盘状态</td><td>精确但存储爆炸</td></tr><tr><td>线性模型</td><td>加权特征求和（如下）</td><td>高效但表达能力有限</td></tr><tr><td>神经网络</td><td>多层感知机</td><td>强拟合能力需大量数据</td></tr></tbody></table></li><li><p><strong>跳棋特征设计</strong>：<br> [ \\hat{V}(b) = w_0 + w_1 \\cdot \\text{wp}(b) + w_2 \\cdot \\text{rp}(b) + \\cdots + w_6 \\cdot \\text{rt}(b) ]</p><blockquote><p><code>wp</code>=白棋数, <code>rp</code>=红棋数, <code>wt</code>=白棋受威胁数...</p></blockquote></li></ul><h4 id="_4-学习算法-优化模型参数" tabindex="-1"><strong>4. 学习算法：优化模型参数</strong> <a class="header-anchor" href="#_4-学习算法-优化模型参数" aria-label="Permalink to &quot;**4. 学习算法：优化模型参数**&quot;">​</a></h4><ul><li><p><strong>目标</strong>：最小化预测误差 ( \\sum (V_{\\text{train}}(b) - \\hat{V}(b))^2 )</p></li><li><p><strong>梯度下降流程</strong>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">初始化权重 w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [w0, w1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, w6]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> each 训练样本 b:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    error = V_train(b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ̂V(b)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 计算误差</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> each 权重 w_i:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        w_i ← w_i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> η · f_i · error    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># η=学习率（如0.1）, f_i=特征值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>以下是<strong>闭环迭代：自我博弈优化</strong>的简化描述（以国际跳棋AI为例）：</p><hr><h4 id="_5-三步循环流程" tabindex="-1"><strong>5.三步循环流程</strong> <a class="header-anchor" href="#_5-三步循环流程" aria-label="Permalink to &quot;**5.三步循环流程**&quot;">​</a></h4><ol><li><p><strong>初始模型</strong><br> 随机初始化价值预测模型 (\\hat{V})（例如：给棋子数、威胁数等特征赋随机权重）。</p></li><li><p><strong>自我对弈生成数据</strong></p><ul><li>让当前模型 (\\hat{V}) 自己和自己下棋，记录每一步的棋盘状态序列。</li><li></li></ul></li><li><p><strong>标注数据 &amp; 更新模型</strong></p><ul><li><strong>标注</strong>：用后续状态的价值标注当前状态：</li><li><strong>训练</strong>：用梯度下降法更新 (\\hat{V}) 的权重，最小化预测误差：</li></ul></li></ol><hr><h3 id="为何能持续优化" tabindex="-1"><strong>为何能持续优化？</strong> <a class="header-anchor" href="#为何能持续优化" aria-label="Permalink to &quot;**为何能持续优化？**&quot;">​</a></h3><ul><li><strong>数据迭代升级</strong>：模型越强→生成的棋局质量越高→训练数据更接近高手对局。</li><li><strong>目标渐进逼近</strong>：每次用 (\\hat{V}(b_{i+1})) 标注 (b_i)，本质是让当前状态价值向后续最优状态对齐，逐步逼近真实 (V(b))。</li><li><strong>无需人类干预</strong>：系统自主产生数据，摆脱对人工标注的依赖。</li></ul><blockquote><p><strong>类比</strong>：如同棋手通过不断复盘自己的对局（左手vs右手）发现漏洞、调整策略，最终越练越强。</p></blockquote><blockquote><p><em>通过不断生成新棋局，模型持续逼近真实 ( V(b) )</em></p></blockquote><hr><h3 id="三、机器学习基础概念体系" tabindex="-1"><strong>三、机器学习基础概念体系</strong> <a class="header-anchor" href="#三、机器学习基础概念体系" aria-label="Permalink to &quot;**三、机器学习基础概念体系**&quot;">​</a></h3><h4 id="_1-核心组件" tabindex="-1"><strong>1. 核心组件</strong> <a class="header-anchor" href="#_1-核心组件" aria-label="Permalink to &quot;**1. 核心组件**&quot;">​</a></h4><table tabindex="0"><thead><tr><th><strong>概念</strong></th><th><strong>定义</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>实例空间 ( X )</td><td>所有可能输入集合</td><td>棋盘所有状态（约10²⁰种）</td></tr><tr><td>假设空间 ( H )</td><td>候选模型的集合</td><td>线性函数/决策树/神经网络等</td></tr><tr><td>目标概念 ( C )</td><td>待学习的真实映射函数</td><td>完美价值函数 ( V(b) )</td></tr><tr><td>训练集 ( D )</td><td>标注样本集合 ( \\langle x_i, c(x_i) \\rangle )</td><td>带胜负标签的棋盘状态</td></tr></tbody></table><h4 id="_2-关键挑战" tabindex="-1"><strong>2. 关键挑战</strong> <a class="header-anchor" href="#_2-关键挑战" aria-label="Permalink to &quot;**2. 关键挑战**&quot;">​</a></h4><ul><li><p><strong>假设空间复杂度</strong>：</p><ul><li>( n )个二值特征 → 假设空间 ( |H| = 2^{2^n} )（<em>指数爆炸</em>）</li></ul><blockquote><p><em>例：20个特征时 ( |H| \\approx 10^{300000} )，无法遍历</em></p></blockquote></li><li><p><strong>近似必然性</strong>：</p><ul><li>追求 ( h(x) = c(x) ) 对所有 ( x \\in X ) 不可行 → 优化 ( h(x) = c(x) ) 在 ( D ) 上的表现</li></ul></li></ul><hr><h3 id="四、应用场景与设计选择关联" tabindex="-1"><strong>四、应用场景与设计选择关联</strong> <a class="header-anchor" href="#四、应用场景与设计选择关联" aria-label="Permalink to &quot;**四、应用场景与设计选择关联**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>应用场景</strong></th><th><strong>经验设计</strong></th><th><strong>目标函数</strong></th><th><strong>表示选择</strong></th></tr></thead><tbody><tr><td>电商推荐系统</td><td>用户历史行为日志</td><td>点击率预测</td><td>矩阵分解/神经网络</td></tr><tr><td>自动驾驶</td><td>多气候路测数据</td><td>安全驾驶策略</td><td>CNN+强化学习</td></tr><tr><td>信用风险评估</td><td>客户历史还款记录</td><td>违约概率</td><td>逻辑回归/决策树</td></tr></tbody></table>`,35)]))}const c=a(n,[["render",l]]);export{b as __pageData,c as default};
