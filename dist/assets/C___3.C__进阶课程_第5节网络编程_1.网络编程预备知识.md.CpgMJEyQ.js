import{_ as n,c as a,o as l,a4 as p}from"./chunks/framework.BQlL4Ck5.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/3.C++进阶课程/第5节网络编程/1.网络编程预备知识.md","filePath":"C++/3.C++进阶课程/第5节网络编程/1.网络编程预备知识.md","lastUpdated":1754871536000}'),e={name:"C++/3.C++进阶课程/第5节网络编程/1.网络编程预备知识.md"};function i(t,s,r,o,c,d){return l(),a("div",null,s[0]||(s[0]=[p(`<h4 id="计算机网络基础" tabindex="-1">计算机网络基础 <a class="header-anchor" href="#计算机网络基础" aria-label="Permalink to &quot;计算机网络基础&quot;">​</a></h4><p>可以参考这个，这是我当时刷题的发现，有一些东西在后续没有去讲解就找了一系列的视频去看了一下。 【计算机网络基础——协议的本质(数据在网络中的传输)】 <a href="https://www.bilibili.com/video/BV1a846efEbC/?share_source=copy_web&amp;vd_source=3d92aa9d33df3e75ad29563ed567d683###" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1a846efEbC/?share_source=copy_web&amp;vd_source=3d92aa9d33df3e75ad29563ed567d683###</a> 网络预备知识</p><h4 id="网络通信" tabindex="-1">网络通信 <a class="header-anchor" href="#网络通信" aria-label="Permalink to &quot;网络通信&quot;">​</a></h4><p>通信/通讯需要具备两个基本条件：</p><ul><li><strong>传输介质</strong>：（物理层面） <ul><li>网线，光纤</li></ul></li><li><strong>协议</strong>：（软件层面） <ul><li>网络通信协议</li></ul></li></ul><h4 id="网络协议层次模型" tabindex="-1">网络协议层次模型 <a class="header-anchor" href="#网络协议层次模型" aria-label="Permalink to &quot;网络协议层次模型&quot;">​</a></h4><p><strong>层次</strong>：把不同的功能封装成不同功能模块。<br> 为什么叫做<strong>层次</strong>？<br> 因为被封装的模块只能按照已有顺序进行调用，不能越级调用：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>A 模块（用户层）  </span></span>
<span class="line"><span>---  </span></span>
<span class="line"><span>B 模块（OS层）  </span></span>
<span class="line"><span>---  </span></span>
<span class="line"><span>C 模块（硬件层）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>A模块不能直接调用C模块，只能通过先调用B模块的接口，通过B模块的接口来调用C模块。</p><hr><h4 id="osi-七层模型" tabindex="-1">OSI 七层模型 <a class="header-anchor" href="#osi-七层模型" aria-label="Permalink to &quot;OSI 七层模型&quot;">​</a></h4><ol><li><strong>应用层</strong></li><li><strong>表示层</strong></li><li><strong>会话层</strong></li><li><strong>传输层</strong></li><li><strong>网络层</strong></li><li><strong>数据链路层</strong></li><li><strong>硬件层</strong></li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>应用层  </span></span>
<span class="line"><span>应用层协议  </span></span>
<span class="line"><span>应用层  </span></span>
<span class="line"><span>PDU  </span></span>
<span class="line"><span>接口  </span></span>
<span class="line"><span>表示层  </span></span>
<span class="line"><span>表示层协议  </span></span>
<span class="line"><span>表示层  </span></span>
<span class="line"><span>接口  </span></span>
<span class="line"><span>会话层  </span></span>
<span class="line"><span>会话层  </span></span>
<span class="line"><span>传输层  </span></span>
<span class="line"><span>传输层  </span></span>
<span class="line"><span>传输层  </span></span>
<span class="line"><span>数据段  </span></span>
<span class="line"><span>接口  </span></span>
<span class="line"><span>网络层  </span></span>
<span class="line"><span>网络层协议  </span></span>
<span class="line"><span>网络层  </span></span>
<span class="line"><span>数据包  </span></span>
<span class="line"><span>接口  </span></span>
<span class="line"><span>数据链路层  </span></span>
<span class="line"><span>数据链路层协议  </span></span>
<span class="line"><span>数据链路层  </span></span>
<span class="line"><span>帧  </span></span>
<span class="line"><span>接口  </span></span>
<span class="line"><span>物理层  </span></span>
<span class="line"><span>物理层协议  </span></span>
<span class="line"><span>物理层  </span></span>
<span class="line"><span>比特  </span></span>
<span class="line"><span>层  </span></span>
<span class="line"><span>主机A  </span></span>
<span class="line"><span>主机B  </span></span>
<span class="line"><span>数据单元</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><hr><h4 id="tcp-ip-四层模型" tabindex="-1">TCP/IP 四层模型 <a class="header-anchor" href="#tcp-ip-四层模型" aria-label="Permalink to &quot;TCP/IP 四层模型&quot;">​</a></h4><ul><li><strong>应用层</strong><ul><li>应用协议：http,https,tftp,ftp,DNS,QQ协议,BT</li></ul></li><li><strong>传输层</strong><ul><li>主要作用：解决数据如何传输的问题</li><li>协议： <ul><li><strong>TCP</strong>：Transmission Control protocol 传输层控制协议 <ul><li>是一种面向连接的传输层协议，它可以提供高可靠的通信。</li><li>高可靠的通信：即数据无误、数据无丢失、数据无失序、数据无重复到达的一种通信。</li><li>建立连接/断开连接：三次握手和四次挥手<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ADATA  </span></span>
<span class="line"><span>STN报文  </span></span>
<span class="line"><span>SYN报文  </span></span>
<span class="line"><span>ACK报文  </span></span>
<span class="line"><span>ACK报文  </span></span>
<span class="line"><span>三次握手  </span></span>
<span class="line"><span>B  </span></span>
<span class="line"><span>A  </span></span>
<span class="line"><span>四次挥手  </span></span>
<span class="line"><span>B  </span></span>
<span class="line"><span>重发机制  </span></span>
<span class="line"><span>&quot;面向连接&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul></li><li><strong>UDP</strong>：User Datagram Protocol 用户数据报协议 <ul><li>它是不可靠的无连接协议。</li><li>在数据发送之前，因为不需要进行连接就可以直接发送数据。</li><li>&quot;实时应用&quot;</li></ul></li></ul></li></ul></li><li><strong>网络层</strong><ul><li>IP：IP地址（网卡的逻辑上的编号）</li><li>ICMP</li></ul></li><li><strong>设备驱动与硬件层</strong><ul><li>硬件： <ul><li>网卡</li><li>网络</li></ul></li><li>MAC协议： <ul><li>MAC地址（网卡的物理地址 48bits）</li></ul></li></ul></li></ul><hr><h4 id="网络数据传输" tabindex="-1">网络数据传输 <a class="header-anchor" href="#网络数据传输" aria-label="Permalink to &quot;网络数据传输&quot;">​</a></h4><p><strong>分层传输</strong>：</p><ul><li><strong>封包过程</strong></li><li><strong>拆包过程</strong></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>A端    封包过程    拆包过程    B端  </span></span>
<span class="line"><span>data(123)    123  </span></span>
<span class="line"><span>应用层    /app(data)    app(data)    应用层  </span></span>
<span class="line"><span>传输层    /tra(app(data))    tra(app(data))    传输层  </span></span>
<span class="line"><span>网络层    /net(tar(data))    net(tar(data))    网络层  </span></span>
<span class="line"><span>设备驱动和硬件    /hard(net(data))    hard(net(data))    设备驱动和硬件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h4 id="网络设备功能" tabindex="-1">网络设备功能 <a class="header-anchor" href="#网络设备功能" aria-label="Permalink to &quot;网络设备功能&quot;">​</a></h4><ul><li><strong>路由器</strong>：主要功能“路由” <ul><li>选择网络数据包的下一站。</li></ul></li><li><strong>网关</strong>：连接两个或以上网络。</li><li><strong>交换机（switch）</strong>： <ul><li>扩展端口</li><li>有源：增强信号</li></ul></li><li><strong>猫（modern）</strong>：调制解调器 <ul><li>ads1猫</li><li>光纤猫</li></ul></li></ul><hr><h4 id="互联网地址-ip地址" tabindex="-1">互联网地址（IP地址） <a class="header-anchor" href="#互联网地址-ip地址" aria-label="Permalink to &quot;互联网地址（IP地址）&quot;">​</a></h4><p>互联网：internet<br> 互联网上的每一个接口（网卡）都必须有一个唯一的 internet 地址（也叫：IP地址）。协议上的逻辑地址。<br> 进行通信的时候，用到这个 IP 地址唯一标识一台主机（一个网卡）。</p><ul><li><p><strong>IPv4 地址</strong>：</p><ul><li>32bits IP 地址（42亿）</li><li>表示方式： <ul><li>点分十进制：每8个 bit 位为一组，中间用<code>.</code>分割 <ul><li>示例：<code>11010010 01001001 10001100 00000010</code> → <code>210.73.140.2</code></li></ul></li></ul></li></ul></li><li><p><strong>IPv6 地址</strong>：</p><ul><li>128bits IP 地址</li></ul></li></ul><hr><h4 id="ipv4-地址分类" tabindex="-1">IPv4 地址分类 <a class="header-anchor" href="#ipv4-地址分类" aria-label="Permalink to &quot;IPv4 地址分类&quot;">​</a></h4><p>IPv4 地址的 32bits 分为两部分：</p><ul><li><strong>网段号</strong>：标识某个网段（连续高位表示）</li><li><strong>主机号</strong>：标识特定网段中的特定主机（连续低位表示）</li></ul><table tabindex="0"><thead><tr><th>类型</th><th>最高位</th><th>网络号</th><th>主机号</th><th>地址范围</th></tr></thead><tbody><tr><td><strong>A类</strong></td><td><code>0</code></td><td>7bits</td><td>24bits</td><td><code>0.0.0.0 ~ 127.255.255.255</code></td></tr><tr><td><strong>B类</strong></td><td><code>10</code></td><td>14bits</td><td>16bits</td><td><code>128.0.0.0 ~ 191.255.255.255</code></td></tr><tr><td><strong>C类</strong></td><td><code>110</code></td><td>21bits</td><td>8bits</td><td><code>192.0.0.0 ~ 223.255.255.255</code></td></tr><tr><td><strong>D类</strong></td><td><code>1110</code></td><td>-</td><td>多播组号 28bits</td><td><code>224.0.0.0 ~ 239.255.255.255</code></td></tr><tr><td><strong>E类</strong></td><td><code>11110</code></td><td>-</td><td>保留</td><td><code>240.0.0.0 ~ 247.255.255.255</code></td></tr></tbody></table><ul><li><strong>私有地址范围</strong>：<code>192.168.0.0~192.168.255.255</code></li></ul><hr><h4 id="子网掩码-netmask" tabindex="-1">子网掩码（netmask） <a class="header-anchor" href="#子网掩码-netmask" aria-label="Permalink to &quot;子网掩码（netmask）&quot;">​</a></h4><p>用于指定 IP 地址中哪些 bits 是网段号，哪些是主机号：</p><ul><li>子网掩码为 <code>1</code> 的 bit 位表示网段号</li><li>子网掩码为 <code>0</code> 的 bit 位表示主机号</li><li>示例： <ul><li>子网掩码 <code>255.255.254.0</code> → <code>11111111 11111111 11111110 00000000</code></li><li><code>192.168.1.4</code> 和 <code>192.168.2.5</code> 是否同一网段？<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xxxxxxxx xxxxxxxx 00000001 xxxxxxxx → 192.168.1.4  </span></span>
<span class="line"><span>xxxxxxxx xxxxxxxx 00000010 xxxxxxxx → 192.168.2.5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>网段号不同 → <strong>不是同一网段</strong></li></ul></li></ul><hr><h4 id="端口号" tabindex="-1">端口号 <a class="header-anchor" href="#端口号" aria-label="Permalink to &quot;端口号&quot;">​</a></h4><p>TCP 和 UDP 采用 16bits 的端口标识应用程序：</p><ul><li>IP 地址唯一标识网络中的主机</li><li>端口号标识主机上的特定网络应用</li><li>完整网络应用标识：<code>IP地址 + 传输层协议（TCP/UDP） + 端口号</code></li></ul><p><strong>端口号分类</strong>（由 IANA 管理）：</p><ul><li><strong>知名端口</strong>：1~1023 <ul><li>ftp:21</li><li>http:80</li><li>MySQL:3306</li></ul></li><li><strong>注册端口</strong>：1024~49151</li><li><strong>动态/私有端口</strong>：49152~65535</li></ul>`,44)]))}const h=n(e,[["render",i]]);export{u as __pageData,h as default};
