import{_ as i,c as a,o as n,a3 as l}from"./chunks/framework.C8Xs1bna.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/1.C语言基础/02.scanf 函数的缓冲区问题、整型数据类型的补充.md","filePath":"C++/1.C语言基础/02.scanf 函数的缓冲区问题、整型数据类型的补充.md","lastUpdated":1754900608000}'),t={name:"C++/1.C语言基础/02.scanf 函数的缓冲区问题、整型数据类型的补充.md"};function e(d,s,p,h,r,k){return n(),a("div",null,s[0]||(s[0]=[l(`<h3 id="_1-变量的补充-scanf-函数与缓冲区" tabindex="-1"><strong>1. 变量的补充：<code>scanf</code> 函数与缓冲区</strong> <a class="header-anchor" href="#_1-变量的补充-scanf-函数与缓冲区" aria-label="Permalink to &quot;**1. 变量的补充：\`scanf\` 函数与缓冲区**&quot;">​</a></h3><h4 id="_1-1-scanf-函数的工作原理" tabindex="-1"><strong>1.1 <code>scanf</code> 函数的工作原理</strong> <a class="header-anchor" href="#_1-1-scanf-函数的工作原理" aria-label="Permalink to &quot;**1.1 \`scanf\` 函数的工作原理**&quot;">​</a></h4><ul><li><strong>输入缓冲区</strong>： <ul><li>当用户通过键盘输入数据时，系统会先将数据存入输入缓冲区。</li><li>缓冲区是内存空间的一部分，用于临时存储输入输出数据，以提高程序运行效率。</li></ul></li><li><strong><code>scanf</code> 的行为</strong>： <ul><li><code>scanf</code> 会从输入缓冲区中逐个取出内容，并将其赋值给变量。</li><li>如果输入缓冲区不为空，<code>scanf</code> 会直接从缓冲区中获取数据，而不会要求用户再次输入。</li></ul></li></ul><h4 id="_1-2-scanf-清空缓冲区" tabindex="-1"><strong>1.2 <code>scanf</code> 清空缓冲区</strong> <a class="header-anchor" href="#_1-2-scanf-清空缓冲区" aria-label="Permalink to &quot;**1.2 \`scanf\` 清空缓冲区**&quot;">​</a></h4><ul><li><strong>问题</strong>： <ul><li>如果输入缓冲区中残留了无效数据（如回车、空格等），可能会导致 <code>scanf</code> 行为异常。</li></ul></li><li><strong>解决方法</strong>： <ul><li>使用 <code>setbuf(stdin, NULL)</code> 清空输入缓冲区。</li><li>示例：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setbuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stdin, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 清空输入缓冲区</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 重新读取用户输入</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ul><h4 id="_1-3-scanf-的注意事项" tabindex="-1"><strong>1.3 <code>scanf</code> 的注意事项</strong> <a class="header-anchor" href="#_1-3-scanf-的注意事项" aria-label="Permalink to &quot;**1.3 \`scanf\` 的注意事项**&quot;">​</a></h4><ul><li><code>scanf</code> 在读取数字时会跳过空格、制表符和回车。</li><li>示例：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;input num1: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 读取第一个数字</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num1 = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;input num2: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 读取第二个数字</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num2 = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num2);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><hr><h3 id="_2-整型数据类型的补充" tabindex="-1"><strong>2. 整型数据类型的补充</strong> <a class="header-anchor" href="#_2-整型数据类型的补充" aria-label="Permalink to &quot;**2. 整型数据类型的补充**&quot;">​</a></h3><p>C语言中，整型数据类型包括 <code>short</code>、<code>int</code>、<code>long</code> 和 <code>long long</code>，每种类型的有符号和无符号版本。</p><h4 id="_2-1-整型数据类型的特点" tabindex="-1"><strong>2.1 整型数据类型的特点</strong> <a class="header-anchor" href="#_2-1-整型数据类型的特点" aria-label="Permalink to &quot;**2.1 整型数据类型的特点**&quot;">​</a></h4><ul><li><p><strong>占用空间和表示范围</strong>：</p><ul><li>不同操作系统和位数（如 16 位、32 位、64 位）下，整型数据类型的占用空间和表示范围可能不同。</li><li>以 64 位 Windows 环境为例：<table tabindex="0"><thead><tr><th>数据类型</th><th>占用空间</th><th>表示范围</th><th>占位符</th></tr></thead><tbody><tr><td><code>char</code></td><td>1 字节</td><td>-128 ~ 127</td><td><code>%c</code></td></tr><tr><td><code>unsigned char</code></td><td>1 字节</td><td>0 ~ 255</td><td><code>%c</code></td></tr><tr><td><code>short</code></td><td>2 字节</td><td>-32768 ~ 32767</td><td><code>%hd</code></td></tr><tr><td><code>unsigned short</code></td><td>2 字节</td><td>0 ~ 65535</td><td><code>%hu</code></td></tr><tr><td><code>int</code></td><td>4 字节</td><td>-2147483648 ~ 2147483647</td><td><code>%d</code></td></tr><tr><td><code>unsigned int</code></td><td>4 字节</td><td>0 ~ 4294967295</td><td><code>%u</code></td></tr><tr><td><code>long</code></td><td>4 字节</td><td>-2147483648 ~ 2147483647</td><td><code>%ld</code></td></tr><tr><td><code>unsigned long</code></td><td>4 字节</td><td>0 ~ 4294967295</td><td><code>%lu</code></td></tr><tr><td><code>long long</code></td><td>8 字节</td><td>-2^63 ~ 2^63-1</td><td><code>%lld</code></td></tr><tr><td><code>unsigned long long</code></td><td>8 字节</td><td>0 ~ 2^64-1</td><td><code>%llu</code></td></tr></tbody></table></li></ul></li><li><p><strong>示例</strong>：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><hr><h3 id="_3-进制转换-十进制与二进制" tabindex="-1"><strong>3. 进制转换：十进制与二进制</strong> <a class="header-anchor" href="#_3-进制转换-十进制与二进制" aria-label="Permalink to &quot;**3. 进制转换：十进制与二进制**&quot;">​</a></h3><h4 id="_3-1-十进制转二进制" tabindex="-1"><strong>3.1 十进制转二进制</strong> <a class="header-anchor" href="#_3-1-十进制转二进制" aria-label="Permalink to &quot;**3.1 十进制转二进制**&quot;">​</a></h4><ul><li><p><strong>整数部分（除 2 取余法）</strong>：</p><ol><li>将十进制数不断除以 2，记录余数。</li><li>将余数逆序排列，得到二进制结果。</li></ol><ul><li>示例：将 13 转换为二进制<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>13 / 2 = 6 余 1</span></span>
<span class="line"><span> 6 / 2 = 3 余 0</span></span>
<span class="line"><span> 3 / 2 = 1 余 1</span></span>
<span class="line"><span> 1 / 2 = 0 余 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>余数逆序排列：1101（二进制）。</li></ul></li></ul></li><li><p><strong>小数部分（乘 2 取整法）</strong>：</p><ol><li>将小数部分不断乘以 2，记录整数部分。</li><li>将整数部分顺序排列，得到二进制结果。</li></ol><ul><li>示例：将 0.6 转换为二进制<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>0.6 * 2 = 1.2 → 1</span></span>
<span class="line"><span>0.2 * 2 = 0.4 → 0</span></span>
<span class="line"><span>0.4 * 2 = 0.8 → 0</span></span>
<span class="line"><span>0.8 * 2 = 1.6 → 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>整数部分顺序排列：1001（二进制）。</li></ul></li></ul></li></ul><h4 id="_3-2-二进制转十进制" tabindex="-1"><strong>3.2 二进制转十进制</strong> <a class="header-anchor" href="#_3-2-二进制转十进制" aria-label="Permalink to &quot;**3.2 二进制转十进制**&quot;">​</a></h4><ul><li><strong>方法</strong>： <ol><li>将二进制数的每一位乘以 2 的幂次方（从右到左，幂次从 0 开始）。</li><li>将所有结果相加，得到十进制数。</li></ol><ul><li>示例：将 1101 转换为十进制<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 * 2^3 + 1 * 2^2 + 0 * 2^1 + 1 * 2^0</span></span>
<span class="line"><span>= 8 + 4 + 0 + 1</span></span>
<span class="line"><span>= 13（十进制）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ol><li><strong><code>scanf</code> 函数与缓冲区</strong>： <ul><li><code>scanf</code> 从输入缓冲区中读取数据，缓冲区残留数据可能导致问题，可通过 <code>setbuf(stdin, NULL)</code> 清空缓冲区。</li></ul></li><li><strong>整型数据类型</strong>： <ul><li>包括 <code>short</code>、<code>int</code>、<code>long</code> 和 <code>long long</code>，每种类型的有符号和无符号版本占用空间和表示范围不同。</li></ul></li><li><strong>进制转换</strong>： <ul><li>十进制转二进制：整数部分用除 2 取余法，小数部分用乘 2 取整法。</li><li>二进制转十进制：按位乘以 2 的幂次方并相加。</li></ul></li></ol>`,21)]))}const g=i(t,[["render",e]]);export{c as __pageData,g as default};
