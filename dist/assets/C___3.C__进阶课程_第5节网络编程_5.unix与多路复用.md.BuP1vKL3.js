import{_ as i,c as a,o as n,a3 as l}from"./chunks/framework.C3IOjdSt.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/3.C++进阶课程/第5节网络编程/5.unix与多路复用.md","filePath":"C++/3.C++进阶课程/第5节网络编程/5.unix与多路复用.md","lastUpdated":1754900608000}'),e={name:"C++/3.C++进阶课程/第5节网络编程/5.unix与多路复用.md"};function t(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h3 id="unix域协议与多路复用" tabindex="-1">Unix域协议与多路复用 <a class="header-anchor" href="#unix域协议与多路复用" aria-label="Permalink to &quot;Unix域协议与多路复用&quot;">​</a></h3><h4 id="unix域协议" tabindex="-1">Unix域协议 <a class="header-anchor" href="#unix域协议" aria-label="Permalink to &quot;Unix域协议&quot;">​</a></h4><p>Unix域协议是一种<strong>IPC（进程间通信）</strong> 方式，使用Socket编程接口实现本地进程间通信。其特点如下：</p><h5 id="协议簇与套接字类型" tabindex="-1">协议簇与套接字类型 <a class="header-anchor" href="#协议簇与套接字类型" aria-label="Permalink to &quot;协议簇与套接字类型&quot;">​</a></h5><ul><li><strong>协议簇</strong>：<code>AF_UNIX</code> 或 <code>AF_LOCAL</code>（区别于 <code>AF_INET</code> IPv4）。</li><li><strong>套接字类型</strong>： <ul><li><code>SOCK_DGRAM</code>：类似UDP的数据报套接字（无连接）。</li><li><code>SOCK_STREAM</code>：类似TCP的流式套接字（面向连接）。</li></ul></li></ul><h5 id="网络地址结构" tabindex="-1">网络地址结构 <a class="header-anchor" href="#网络地址结构" aria-label="Permalink to &quot;网络地址结构&quot;">​</a></h5><p>使用文件系统路径作为地址（需以 <code>\\0</code> 结尾）：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/un.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sockaddr_un {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    sa_family_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sun_family;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 协议簇（AF_UNIX）  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sun_path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">104</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 套接字文件路径（如 &quot;/tmp/xxx.socket&quot;）  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h5><ul><li><strong>优势</strong>：数据不经过网卡，直接在内核中传输，效率高于IPv4协议。</li><li><strong>典型应用</strong>：本地进程间高速通信（如数据库守护进程与客户端交互）。</li></ul><hr><h4 id="多路复用" tabindex="-1">多路复用 <a class="header-anchor" href="#多路复用" aria-label="Permalink to &quot;多路复用&quot;">​</a></h4><p>多路复用用于<strong>同时监听多个文件描述符的就绪状态</strong>（可读/可写/异常），避免阻塞等待。</p><h5 id="阻塞io的局限性" tabindex="-1">阻塞IO的局限性 <a class="header-anchor" href="#阻塞io的局限性" aria-label="Permalink to &quot;阻塞IO的局限性&quot;">​</a></h5><ul><li><strong>读操作</strong>：无数据时，<code>read</code> 会阻塞直到数据到达。</li><li><strong>写操作</strong>：无缓冲区空间时，<code>write</code> 会阻塞直到可写入。</li></ul><h5 id="_1-select" tabindex="-1">1. <code>select</code> <a class="header-anchor" href="#_1-select" aria-label="Permalink to &quot;1. \`select\`&quot;">​</a></h5><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/select.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nfds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fd_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">readfds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fd_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">writefds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          fd_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exceptfds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>参数</strong>： <ul><li><code>nfds</code>：最大文件描述符值 + 1。</li><li><code>readfds</code>/<code>writefds</code>/<code>exceptfds</code>：监听读/写/异常的描述符集合（传入需监听的描述符，返回就绪的描述符）。</li><li><code>timeout</code>：超时时间（<code>NULL</code> 表示无限等待）。</li></ul></li><li><strong>返回值</strong>： <ul><li><code>&gt;0</code>：就绪的描述符数量。</li><li><code>=0</code>：超时。</li><li><code>&lt;0</code>：出错。</li></ul></li></ul><h6 id="描述符集合操作函数" tabindex="-1">描述符集合操作函数 <a class="header-anchor" href="#描述符集合操作函数" aria-label="Permalink to &quot;描述符集合操作函数&quot;">​</a></h6><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FD_ZERO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 清空集合  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FD_SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fd_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 添加描述符到集合  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FD_CLR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fd_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 从集合移除描述符  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FD_ISSET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fd_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 检查描述符是否在集合中</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="_2-poll" tabindex="-1">2. <code>poll</code> <a class="header-anchor" href="#_2-poll" aria-label="Permalink to &quot;2. \`poll\`&quot;">​</a></h5><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;poll.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pollfd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nfds_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nfds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><strong>参数</strong>： <ul><li><code>fds</code>：<code>struct pollfd</code> 结构体数组（每个元素描述一个监听请求）。</li><li><code>nfds</code>：数组元素个数。</li><li><code>timeout</code>：超时时间（毫秒）。</li></ul></li><li><strong><code>struct pollfd</code> 结构</strong>：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pollfd {  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fd;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 文件描述符  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> events;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 监听的事件（如 POLLIN 可读、POLLOUT 可写）  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> revents;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 返回就绪的事件  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><strong>返回值</strong>：同 <code>select</code>。</li></ul><h5 id="_3-epoll-高效多路复用" tabindex="-1">3. <code>epoll</code>（高效多路复用） <a class="header-anchor" href="#_3-epoll-高效多路复用" aria-label="Permalink to &quot;3. \`epoll\`（高效多路复用）&quot;">​</a></h5><h6 id="创建实例" tabindex="-1">创建实例 <a class="header-anchor" href="#创建实例" aria-label="Permalink to &quot;创建实例&quot;">​</a></h6><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sys/epoll.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> epoll_create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // size &gt; 0（历史遗留，可忽略）  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 成功返回 epoll 文件描述符，失败返回 -1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h6 id="管理监听事件" tabindex="-1">管理监听事件 <a class="header-anchor" href="#管理监听事件" aria-label="Permalink to &quot;管理监听事件&quot;">​</a></h6><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> epoll_ctl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> epfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> op</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> epoll_event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>参数</strong>： <ul><li><code>epfd</code>：<code>epoll_create</code> 返回的描述符。</li><li><code>op</code>：操作类型（<code>EPOLL_CTL_ADD</code> 添加、<code>EPOLL_CTL_DEL</code> 删除、<code>EPOLL_CTL_MOD</code> 修改）。</li><li><code>fd</code>：需监听的文件描述符。</li><li><code>event</code>：监听事件结构体指针：<div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> epoll_event {  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> events;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 监听事件（如 EPOLLIN、EPOLLOUT）  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    epoll_data_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 用户数据  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> epoll_data {  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fd;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u32;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u64;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">epoll_data_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul></li></ul><h6 id="等待事件就绪" tabindex="-1">等待事件就绪 <a class="header-anchor" href="#等待事件就绪" aria-label="Permalink to &quot;等待事件就绪&quot;">​</a></h6><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> epoll_wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> epfd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> epoll_event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> maxevents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>参数</strong>： <ul><li><code>events</code>：输出参数，存储就绪事件的结构体数组。</li><li><code>maxevents</code>：数组最大容量。</li><li><code>timeout</code>：超时时间（毫秒）。</li></ul></li><li><strong>返回值</strong>：同 <code>select</code>。</li></ul><h5 id="触发模式" tabindex="-1">触发模式 <a class="header-anchor" href="#触发模式" aria-label="Permalink to &quot;触发模式&quot;">​</a></h5><ul><li><strong>水平触发（LT）</strong>： <ul><li>只要描述符就绪，持续上报事件（默认模式）。</li></ul></li><li><strong>边缘触发（ET）</strong>： <ul><li>仅在状态变化时上报一次事件（需设置 <code>EPOLLET</code> 标志）。</li></ul></li></ul><h5 id="效率对比" tabindex="-1">效率对比 <a class="header-anchor" href="#效率对比" aria-label="Permalink to &quot;效率对比&quot;">​</a></h5><table tabindex="0"><thead><tr><th><strong>机制</strong></th><th><strong>效率</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td><code>select</code></td><td>低（O(n)轮询）</td><td>支持文件描述符数量有限（通常1024）</td></tr><tr><td><code>poll</code></td><td>中（O(n)轮询）</td><td>无描述符数量限制</td></tr><tr><td><code>epoll</code></td><td>高（O(1)事件通知）</td><td>支持边缘触发，适合高并发场景</td></tr></tbody></table><hr><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong>Unix域协议</strong>：通过文件路径标识地址，实现本地进程间高效通信。</li><li><strong>多路复用</strong>： <ul><li><code>select</code>/<code>poll</code>：适用于少量描述符监听。</li><li><code>epoll</code>：适用于高并发场景，支持边缘触发模式。</li></ul></li></ul>`,39)]))}const E=i(e,[["render",t]]);export{c as __pageData,E as default};
