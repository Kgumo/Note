import{_ as k,C as E,c as d,o as n,a3 as p,b as e,j as r,w as a,a as i,G as t,a4 as h}from"./chunks/framework.CkaDlzKP.js";const D=JSON.parse('{"title":"带头结点的链表","description":"","frontmatter":{},"headers":[],"relativePath":"C++/3.C++进阶课程/第2节数据结构与基本算法/03.链表-其他形态.md","filePath":"C++/3.C++进阶课程/第2节数据结构与基本算法/03.链表-其他形态.md","lastUpdated":1754900608000}'),o={name:"C++/3.C++进阶课程/第2节数据结构与基本算法/03.链表-其他形态.md"};function g(B,s,c,u,A,b){const l=E("Mermaid");return n(),d("div",null,[s[6]||(s[6]=p(`<h1 id="带头结点的链表" tabindex="-1">带头结点的链表 <a class="header-anchor" href="#带头结点的链表" aria-label="Permalink to &quot;带头结点的链表&quot;">​</a></h1><h2 id="头节点引入原因" tabindex="-1">头节点引入原因 <a class="header-anchor" href="#头节点引入原因" aria-label="Permalink to &quot;头节点引入原因&quot;">​</a></h2><ul><li>链表操作中获取长度需要遍历计数，占用CPU资源</li><li>头节点用于存储链表属性信息，避免频繁遍历</li></ul><h2 id="头节点定义" tabindex="-1">头节点定义 <a class="header-anchor" href="#头节点定义" aria-label="Permalink to &quot;头节点定义&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HeadNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 链表长度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    NodeType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 首结点地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    NodeType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 尾结点地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>头节点特性</strong>：</p><ol><li>不参与链表长度计数</li><li>不参与链表遍历</li><li>不作为链表数据结点</li><li>专门存储链表信息</li></ol><h2 id="创建步骤" tabindex="-1">创建步骤 <a class="header-anchor" href="#创建步骤" aria-label="Permalink to &quot;创建步骤&quot;">​</a></h2><h3 id="从无到有创建" tabindex="-1">从无到有创建 <a class="header-anchor" href="#从无到有创建" aria-label="Permalink to &quot;从无到有创建&quot;">​</a></h3>`,9)),(n(),e(h,null,{default:a(()=>[t(l,{id:"mermaid-53",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20A%5B%E5%A4%B4%E7%BB%93%E7%82%B9%E6%8C%87%E9%92%88%5D%20--%3E%20B%5Blength%3D0%5D%0A%20%20%20%20A%20--%3E%20C%5Bfirst%E2%86%92NULL%5D%0A%20%20%20%20A%20--%3E%20D%5Bfinal%E2%86%92NULL%5D%0A"})]),fallback:a(()=>s[0]||(s[0]=[i(" Loading... ",-1)])),_:1})),s[7]||(s[7]=r("h3",{id:"加入第一个结点",tabindex:"-1"},[i("加入第一个结点 "),r("a",{class:"header-anchor",href:"#加入第一个结点","aria-label":'Permalink to "加入第一个结点"'},"​")],-1)),(n(),e(h,null,{default:a(()=>[t(l,{id:"mermaid-57",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20A%5B%E5%A4%B4%E7%BB%93%E7%82%B9%E6%8C%87%E9%92%88%5D%20--%3E%20B%5Blength%3D1%5D%0A%20%20%20%20A%20--%3E%20C%5Bfirst%E2%86%92%E7%BB%93%E7%82%B91%5D%0A%20%20%20%20A%20--%3E%20D%5Bfinal%E2%86%92%E7%BB%93%E7%82%B91%5D%0A%20%20%20%20C%20--%3E%20E%5B%E7%BB%93%E7%82%B91%5D%0A%20%20%20%20E%20--%3E%20F%5Bnext%E2%86%92NULL%5D%0A"})]),fallback:a(()=>s[1]||(s[1]=[i(" Loading... ",-1)])),_:1})),s[8]||(s[8]=r("h3",{id:"增加后续结点",tabindex:"-1"},[i("增加后续结点 "),r("a",{class:"header-anchor",href:"#增加后续结点","aria-label":'Permalink to "增加后续结点"'},"​")],-1)),(n(),e(h,null,{default:a(()=>[t(l,{id:"mermaid-61",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20A%5B%E5%A4%B4%E7%BB%93%E7%82%B9%E6%8C%87%E9%92%88%5D%20--%3E%20B%5Blength%3D2%5D%0A%20%20%20%20A%20--%3E%20C%5Bfirst%E2%86%92%E7%BB%93%E7%82%B91%5D%0A%20%20%20%20A%20--%3E%20D%5Bfinal%E2%86%92%E7%BB%93%E7%82%B92%5D%0A%20%20%20%20C%20--%3E%20E%5B%E7%BB%93%E7%82%B91%5D%0A%20%20%20%20E%20--%3E%20F%5Bnext%E2%86%92%E7%BB%93%E7%82%B92%5D%0A%20%20%20%20F%20--%3E%20G%5B%E7%BB%93%E7%82%B92%5D%0A%20%20%20%20G%20--%3E%20H%5Bnext%E2%86%92NULL%5D%0A"})]),fallback:a(()=>s[2]||(s[2]=[i(" Loading... ",-1)])),_:1})),s[9]||(s[9]=p('<h3 id="删除结点" tabindex="-1">删除结点 <a class="header-anchor" href="#删除结点" aria-label="Permalink to &quot;删除结点&quot;">​</a></h3><ol><li>删除首结点时更新<code>first</code>指针</li><li>删除尾结点时更新<code>final</code>指针</li><li>删除中间结点时维护前后链接</li><li>更新头节点中的<code>length</code>值</li></ol><hr><h1 id="循环链表" tabindex="-1">循环链表 <a class="header-anchor" href="#循环链表" aria-label="Permalink to &quot;循环链表&quot;">​</a></h1><h2 id="循环单链表" tabindex="-1">循环单链表 <a class="header-anchor" href="#循环单链表" aria-label="Permalink to &quot;循环单链表&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>最后一个数据结点的<code>next</code>指针指向首结点</p>',7)),(n(),e(h,null,{default:a(()=>[t(l,{id:"mermaid-100",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20A%5B%E9%A6%96%E7%BB%93%E7%82%B9%5D%20--%3E%20B%5B%E7%BB%93%E7%82%B92%5D%0A%20%20%20%20B%20--%3E%20C%5B%E7%BB%93%E7%82%B93%5D%0A%20%20%20%20C%20--%3E%20D%5B...%5D%0A%20%20%20%20D%20--%3E%20E%5B%E5%B0%BE%E7%BB%93%E7%82%B9%5D%0A%20%20%20%20E%20--%3E%20A%5B%E9%A6%96%E7%BB%93%E7%82%B9%5D%0A"})]),fallback:a(()=>s[3]||(s[3]=[i(" Loading... ",-1)])),_:1})),s[10]||(s[10]=p('<h3 id="创建方法" tabindex="-1">创建方法 <a class="header-anchor" href="#创建方法" aria-label="Permalink to &quot;创建方法&quot;">​</a></h3><ol><li>创建普通单链表</li><li>将尾结点的<code>next</code>指针指向首结点</li></ol><h2 id="循环双链表" tabindex="-1">循环双链表 <a class="header-anchor" href="#循环双链表" aria-label="Permalink to &quot;循环双链表&quot;">​</a></h2><h3 id="定义-1" tabindex="-1">定义 <a class="header-anchor" href="#定义-1" aria-label="Permalink to &quot;定义&quot;">​</a></h3>',4)),(n(),e(h,null,{default:a(()=>[t(l,{id:"mermaid-122",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20A%5B%E9%A6%96%E7%BB%93%E7%82%B9%5D%20--%3E%7Cnext%7C%20B%5B%E7%BB%93%E7%82%B92%5D%0A%20%20%20%20B%20--%3E%7Cprev%7C%20A%0A%20%20%20%20B%20--%3E%7Cnext%7C%20C%5B%E7%BB%93%E7%82%B93%5D%0A%20%20%20%20C%20--%3E%7Cprev%7C%20B%0A%20%20%20%20C%20--%3E%7Cnext%7C%20D%5B...%5D%0A%20%20%20%20D%20--%3E%7Cnext%7C%20E%5B%E5%B0%BE%E7%BB%93%E7%82%B9%5D%0A%20%20%20%20E%20--%3E%7Cprev%7C%20D%0A%20%20%20%20E%20--%3E%7Cnext%7C%20A%0A%20%20%20%20A%20--%3E%7Cprev%7C%20E%0A"})]),fallback:a(()=>s[4]||(s[4]=[i(" Loading... ",-1)])),_:1})),s[11]||(s[11]=p(`<h3 id="创建方法-1" tabindex="-1">创建方法 <a class="header-anchor" href="#创建方法-1" aria-label="Permalink to &quot;创建方法&quot;">​</a></h3><ol><li>将尾结点的<code>next</code>指针指向首结点</li><li>将首结点的<code>prev</code>指针指向尾结点</li></ol><h2 id="循环链表遍历方法" tabindex="-1">循环链表遍历方法 <a class="header-anchor" href="#循环链表遍历方法" aria-label="Permalink to &quot;循环链表遍历方法&quot;">​</a></h2><h3 id="方法一" tabindex="-1">方法一 <a class="header-anchor" href="#方法一" aria-label="Permalink to &quot;方法一&quot;">​</a></h3><ol><li>临时指针指向首结点</li><li>循环条件：<code>temp-&gt;next != head</code></li><li>循环结束后单独处理尾结点</li></ol><h3 id="方法二" tabindex="-1">方法二 <a class="header-anchor" href="#方法二" aria-label="Permalink to &quot;方法二&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current-&gt;data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current-&gt;next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h1 id="链表闭环" tabindex="-1">链表闭环 <a class="header-anchor" href="#链表闭环" aria-label="Permalink to &quot;链表闭环&quot;">​</a></h1><h2 id="闭环定义" tabindex="-1">闭环定义 <a class="header-anchor" href="#闭环定义" aria-label="Permalink to &quot;闭环定义&quot;">​</a></h2><p>尾结点指向链表中任意随机结点形成的环状结构</p>`,11)),(n(),e(h,null,{default:a(()=>[t(l,{id:"mermaid-175",class:"mermaid",graph:"graph%20LR%20%0AA%5B%E9%A6%96%E7%BB%93%E7%82%B9%5D%20--%3E%20B%5B%E7%BB%93%E7%82%B92%5D%20%0AB%20--%3E%20C%5B%E7%BB%93%E7%82%B93%5D%20%0AC%20--%3E%20D%5B%E7%BB%93%E7%82%B94%5D%20%0AD%20--%3E%20E%5B%E7%BB%93%E7%82%B95%5D%20%0AE%20--%3E%20C%5B%E7%BB%93%E7%82%B93%5D%0A"})]),fallback:a(()=>s[5]||(s[5]=[i(" Loading... ",-1)])),_:1})),s[12]||(s[12]=p(`<h2 id="闭环检测算法-快慢指针法" tabindex="-1">闭环检测算法（快慢指针法） <a class="header-anchor" href="#闭环检测算法-快慢指针法" aria-label="Permalink to &quot;闭环检测算法（快慢指针法）&quot;">​</a></h2><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hasCycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 慢指针（每次1步）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fast </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head-&gt;next;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 快指针（每次2步）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fast </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fast-&gt;next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(slow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fast) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 指针相遇说明有环</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        slow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slow-&gt;next;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 慢指针走1步</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fast </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fast-&gt;next-&gt;next;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 快指针走2步</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 快指针遇到空说明无环</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="算法特性" tabindex="-1">算法特性 <a class="header-anchor" href="#算法特性" aria-label="Permalink to &quot;算法特性&quot;">​</a></h3><ol><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li><li><strong>有环判定</strong>：快慢指针相遇</li><li><strong>无环判定</strong>：快指针遇到<code>nullptr</code></li></ol><hr><h1 id="作业" tabindex="-1">作业 <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业&quot;">​</a></h1><p>完成所有链表数据结构相关作业，包括：</p><ol><li>带头结点的单链表实现</li><li>循环单链表实现</li><li>循环双链表实现</li><li>链表闭环检测算法</li><li>完善链表模板类封装</li></ol>`,9))])}const m=k(o,[["render",g]]);export{D as __pageData,m as default};
