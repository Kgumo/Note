import{_ as d,c as o,o as e,a4 as r}from"./chunks/framework.BQlL4Ck5.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/1.C语言基础/03.原码、反码、补码和类型转换.md","filePath":"C++/1.C语言基础/03.原码、反码、补码和类型转换.md","lastUpdated":1754871536000}'),c={name:"C++/1.C语言基础/03.原码、反码、补码和类型转换.md"};function a(l,t,i,n,s,p){return e(),o("div",null,t[0]||(t[0]=[r('<h3 id="_1-三目运算符" tabindex="-1"><strong>1. 三目运算符</strong> <a class="header-anchor" href="#_1-三目运算符" aria-label="Permalink to &quot;**1. 三目运算符**&quot;">​</a></h3><p>三目运算符是C语言中唯一的三元运算符，形式为 <code>表达式1 ? 表达式2 : 表达式3</code>。</p><h4 id="_1-1-语法规则" tabindex="-1"><strong>1.1 语法规则</strong> <a class="header-anchor" href="#_1-1-语法规则" aria-label="Permalink to &quot;**1.1 语法规则**&quot;">​</a></h4><ul><li><p><strong>求值规则</strong>：</p><ul><li><p>如果 <code>表达式1</code> 为真，三目运算符的运算结果为 <code>表达式2</code> 的值。</p></li><li><p>如果 <code>表达式1</code> 为假，三目运算符的运算结果为 <code>表达式3</code> 的值。</p></li></ul></li><li><p><strong>示例</strong>：</p><p>int a = 10;<br>  int b = 20;<br>  int max = (a &gt; b) ? a : b; // 如果 a &gt; b，max = a；否则 max = b<br>  printf(&quot;max = %d\\n&quot;, max); // 输出：20</p></li></ul><h4 id="_1-2-注意事项" tabindex="-1"><strong>1.2 注意事项</strong> <a class="header-anchor" href="#_1-2-注意事项" aria-label="Permalink to &quot;**1.2 注意事项**&quot;">​</a></h4><ul><li><p><code>?</code> 和 <code>:</code> 是一个整体，不能分开使用。</p></li><li><p>三目运算符可以嵌套使用，但应避免过度嵌套，以免降低代码可读性。</p></li></ul><hr><h3 id="_2-运算符优先级" tabindex="-1"><strong>2. 运算符优先级</strong> <a class="header-anchor" href="#_2-运算符优先级" aria-label="Permalink to &quot;**2. 运算符优先级**&quot;">​</a></h3><p>运算符优先级决定了表达式中运算符的执行顺序。以下是C语言中常见运算符的优先级（从高到低）：</p><table tabindex="0"><thead><tr><th>优先级</th><th>运算符名称或含义</th><th>使用形式</th><th>结合方向</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><code>[]</code> 数组下标</td><td><code>数组名[常量表达式]</code></td><td>左到右</td><td></td></tr><tr><td></td><td><code>()</code> 圆括号</td><td><code>(表达式)</code> 或 <code>函数名(形参表)</code></td><td>左到右</td><td></td></tr><tr><td></td><td><code>.</code> 成员选择（对象）</td><td><code>对象.成员名</code></td><td>左到右</td><td></td></tr><tr><td></td><td><code>-&gt;</code> 成员选择（指针）</td><td><code>对象指针-&gt;成员名</code></td><td>左到右</td><td></td></tr><tr><td>2</td><td><code>-</code> 负号运算符</td><td><code>-表达式</code></td><td>右到左</td><td>单目运算符</td></tr><tr><td></td><td><code>~</code> 按位取反</td><td><code>~表达式</code></td><td>右到左</td><td>单目运算符</td></tr><tr><td></td><td><code>++</code> 自增</td><td><code>++变量名</code> 或 <code>变量名++</code></td><td>右到左</td><td>单目运算符</td></tr><tr><td></td><td><code>--</code> 自减</td><td><code>--变量名</code> 或 <code>变量名--</code></td><td>右到左</td><td>单目运算符</td></tr><tr><td></td><td><code>*</code> 取值</td><td><code>*指针变量</code></td><td>右到左</td><td>单目运算符</td></tr><tr><td></td><td><code>&amp;</code> 取地址</td><td><code>&amp;变量名</code></td><td>右到左</td><td>单目运算符</td></tr><tr><td></td><td><code>!</code> 逻辑非</td><td><code>!表达式</code></td><td>右到左</td><td>单目运算符</td></tr><tr><td></td><td><code>(类型)</code> 强制类型转换</td><td><code>(数据类型)表达式</code></td><td>右到左</td><td></td></tr><tr><td></td><td><code>sizeof</code> 长度运算符</td><td><code>sizeof(表达式)</code></td><td>右到左</td><td></td></tr><tr><td>3</td><td><code>/</code> 除</td><td><code>表达式 / 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td></td><td><code>*</code> 乘</td><td><code>表达式 * 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td></td><td><code>%</code> 取模</td><td><code>整型表达式 % 整型表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td>4</td><td><code>+</code> 加</td><td><code>表达式 + 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td></td><td><code>-</code> 减</td><td><code>表达式 - 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td>5</td><td><code>&lt;&lt;</code> 左移</td><td><code>变量 &lt;&lt; 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td></td><td><code>&gt;&gt;</code> 右移</td><td><code>变量 &gt;&gt; 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td>6</td><td><code>&gt;</code> 大于</td><td><code>表达式 &gt; 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td></td><td><code>&gt;=</code> 大于等于</td><td><code>表达式 &gt;= 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td></td><td><code>&lt;</code> 小于</td><td><code>表达式 &lt; 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td></td><td><code>&lt;=</code> 小于等于</td><td><code>表达式 &lt;= 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td>7</td><td><code>==</code> 等于</td><td><code>表达式 == 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td></td><td><code>!=</code> 不等于</td><td><code>表达式 != 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td>8</td><td><code>&amp;</code> 按位与</td><td><code>表达式 &amp; 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td>9</td><td><code>^</code> 按位异或</td><td><code>表达式 ^ 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td>10</td><td><code>|</code> 按位或</td><td><code>表达式 | 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td>11</td><td><code>&amp;&amp;</code> 逻辑与</td><td><code>表达式 &amp;&amp; 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td>12</td><td><code>|</code> 逻辑或</td><td><code>表达式 | 表达式</code></td><td>左到右</td><td>双目运算符</td></tr><tr><td>13</td><td><code>?:</code> 三目运算符</td><td><code>表达式1 ? 表达式2 : 表达式3</code></td><td>右到左</td><td>三元运算符</td></tr><tr><td>14</td><td><code>=</code> 赋值</td><td><code>变量 = 表达式</code></td><td>右到左</td><td></td></tr><tr><td>15</td><td><code>,</code> 逗号运算符</td><td><code>表达式, 表达式, ...</code></td><td>左到右</td><td></td></tr></tbody></table><hr><h3 id="_3-类型转换" tabindex="-1"><strong>3. 类型转换</strong> <a class="header-anchor" href="#_3-类型转换" aria-label="Permalink to &quot;**3. 类型转换**&quot;">​</a></h3><p>类型转换分为 <strong>隐式转换</strong> 和 <strong>强制转换</strong>。</p><h4 id="_3-1-隐式转换" tabindex="-1"><strong>3.1 隐式转换</strong> <a class="header-anchor" href="#_3-1-隐式转换" aria-label="Permalink to &quot;**3.1 隐式转换**&quot;">​</a></h4><ul><li><p><strong>规则</strong>：</p><ul><li><p>系统会自动将占用内存较少的类型提升为占用内存较高的类型，再进行运算。</p></li><li><p>例如，<code>int</code> 和 <code>double</code> 运算时，<code>int</code> 会被隐式转换为 <code>double</code>。</p></li></ul></li><li><p><strong>示例</strong>：</p><p>double a = 1.0 / 2; // 1.0 是 double，2 被隐式转换为 double<br>  printf(&quot;a = %lg\\n&quot;, a); // 输出：0.5<br>  ​<br>  double b = 1 / 2; // 1 和 2 都是 int，结果为 0，再隐式转换为 double<br>  printf(&quot;b = %lg\\n&quot;, b); // 输出：0</p></li></ul><h4 id="_3-2-强制转换" tabindex="-1"><strong>3.2 强制转换</strong> <a class="header-anchor" href="#_3-2-强制转换" aria-label="Permalink to &quot;**3.2 强制转换**&quot;">​</a></h4><ul><li><p><strong>规则</strong>：</p><ul><li>使用强制类型转换运算符 <code>(类型)</code>，将一个变量或表达式转换为指定类型。</li></ul></li><li><p><strong>示例</strong>：</p><p>int a = 0;<br>  double b = 2.3;<br>  a = (int)b; // 将 b 强制转换为 int<br>  printf(&quot;a = %d\\n&quot;, a); // 输出：2<br>  printf(&quot;b = %lg\\n&quot;, b); // 输出：2.3</p></li></ul><hr><h3 id="_4-流程结构" tabindex="-1"><strong>4. 流程结构</strong> <a class="header-anchor" href="#_4-流程结构" aria-label="Permalink to &quot;**4. 流程结构**&quot;">​</a></h3><p>流程结构包括 <strong>顺序结构</strong>、<strong>分支结构</strong> 和 <strong>循环结构</strong>。</p><h4 id="_4-1-顺序结构" tabindex="-1"><strong>4.1 顺序结构</strong> <a class="header-anchor" href="#_4-1-顺序结构" aria-label="Permalink to &quot;**4.1 顺序结构**&quot;">​</a></h4><ul><li><p>代码按照从上到下的顺序依次执行。</p></li><li><p>示例：</p><p>int a = 10;<br>  int b = 20;<br>  int sum = a + b;<br>  printf(&quot;sum = %d\\n&quot;, sum); // 输出：30</p></li></ul><h4 id="_4-2-分支结构" tabindex="-1"><strong>4.2 分支结构</strong> <a class="header-anchor" href="#_4-2-分支结构" aria-label="Permalink to &quot;**4.2 分支结构**&quot;">​</a></h4><ul><li><p>包括 <code>if</code>、<code>else if</code>、<code>else</code> 和 <code>switch</code> 语句。</p></li><li><p>示例：</p><p>int score = 85;<br>  if (score &gt;= 90) {<br>      printf(&quot;优秀\\n&quot;);<br>  } else if (score &gt;= 60) {<br>      printf(&quot;及格\\n&quot;);<br>  } else {<br>      printf(&quot;不及格\\n&quot;);<br>  }</p></li></ul><h4 id="_4-3-循环结构" tabindex="-1"><strong>4.3 循环结构</strong> <a class="header-anchor" href="#_4-3-循环结构" aria-label="Permalink to &quot;**4.3 循环结构**&quot;">​</a></h4><ul><li><p>包括 <code>for</code>、<code>while</code> 和 <code>do-while</code> 语句。</p></li><li><p>示例：</p><p>for (int i = 0; i &lt; 5; i++) {<br>      printf(&quot;%d\\n&quot;, i);<br>  }</p></li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ol><li><p><strong>三目运算符</strong>：<code>表达式1 ? 表达式2 : 表达式3</code>，用于简化条件判断。</p></li><li><p><strong>运算符优先级</strong>：决定了表达式中运算符的执行顺序。</p></li><li><p><strong>类型转换</strong>：</p><ul><li><p>隐式转换：系统自动进行类型提升。</p></li><li><p>强制转换：使用 <code>(类型)</code> 手动转换。</p></li></ul></li><li><p><strong>流程结构</strong>：包括顺序、分支和循环结构，是程序的基本执行方式。</p></li></ol>',29)]))}const b=d(c,[["render",a]]);export{h as __pageData,b as default};
